diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 56033ae4..4a03b1e3 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -724,20 +724,11 @@ class TypeInference
       scope = traverse(name.getFirstChild(), scope);
     }
 
-    // Object literals can be reflected on other types, or changed with
-    // type casts.
+    // Object literals can be reflected on other types.
     // See CodingConvention#getObjectLiteralCase and goog.object.reflect.
     // Ignore these types of literals.
-    // TODO(nicksantos): There should be an "anonymous object" type that
-    // we can check for here.
     ObjectType objectType = ObjectType.cast(type);
-    if (objectType == null) {
-      return scope;
-    }
-
-    boolean hasLendsName = n.getJSDocInfo() != null &&
-        n.getJSDocInfo().getLendsName() != null;
-    if (objectType.hasReferenceName() && !hasLendsName) {
+    if (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) {
       return scope;
     }
 
diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index 222fcf1e..ef02b9c1 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1459,6 +1459,8 @@ final class TypedScopeCreator implements ScopeCreator {
               typeRegistry.getType(objectLiteralCast.typeName));
           if (type != null && type.getConstructor() != null) {
             setDeferredType(objectLiteralCast.objectNode, type);
+            objectLiteralCast.objectNode.putBooleanProp(
+                Node.REFLECTED_OBJECT, true);
           } else {
             compiler.report(JSError.make(t.getSourceName(), n,
                     CONSTRUCTOR_EXPECTED));
@@ -1576,9 +1578,8 @@ final class TypedScopeCreator implements ScopeCreator {
             // what props are going to be on that prototype.
             return;
           }
-          if (qVar.getScope() == scope) {
-            scope.undeclare(qVar);
-          }
+
+          qVar.getScope().undeclare(qVar);
         }
       }
 
@@ -1615,10 +1616,10 @@ final class TypedScopeCreator implements ScopeCreator {
         defineSlot(n, parent, valueType, inferred);
       } else if (rhsValue != null && rhsValue.isTrue()) {
         // We declare these for delegate proxy method properties.
-        FunctionType ownerType =
-            JSType.toMaybeFunctionType(getObjectSlot(ownerName));
-        if (ownerType != null) {
-          JSType ownerTypeOfThis = ownerType.getTypeOfThis();
+        ObjectType ownerType = getObjectSlot(ownerName);
+        FunctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);
+        if (ownerFnType != null) {
+          JSType ownerTypeOfThis = ownerFnType.getTypeOfThis();
           String delegateName = codingConvention.getDelegateSuperclassName();
           JSType delegateType = delegateName == null ?
               null : typeRegistry.getType(delegateName);
@@ -1664,6 +1665,11 @@ final class TypedScopeCreator implements ScopeCreator {
         return true;
       }
 
+      // Prototype sets are always declared.
+      if (qName != null && qName.endsWith(".prototype")) {
+        return false;
+      }
+
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index c92f2050..146ed39d 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -103,7 +103,8 @@ public class Node implements Cloneable, Serializable {
       INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types
                                   // have been inferred.
       CHANGE_TIME        = 56,    // For passes that work only on changed funs.
-      LAST_PROP          = 56;    // Unused in the compiler, but keep for Rhino.
+      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.
+      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.
 
   public static final int   // flags for INCRDECR_PROP
       DECR_FLAG = 0x1,
@@ -136,6 +137,7 @@ public class Node implements Cloneable, Serializable {
         case SLASH_V:   return "slash_v";
         case INFERRED_FUNCTION:   return "inferred";
         case CHANGE_TIME: return "change_time";
+        case REFLECTED_OBJECT: return "reflected_object";
         default:
           throw new IllegalStateException("unexpected prop id " + propType);
       }
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index f72b85a4..3b1b4c1e 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -6752,6 +6752,22 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "};");
   }
 
+  public void testIssue1023() throws Exception {
+    testTypes(
+        "/** @constructor */" +
+        "function F() {}" +
+        "(function () {" +
+        "  F.prototype = {" +
+        "    /** @param {string} x */" +
+        "    bar: function (x) {  }" +
+        "  };" +
+        "})();" +
+        "(new F()).bar(true)",
+        "actual parameter 1 of F.prototype.bar does not match formal parameter\n" +
+        "found   : boolean\n" +
+        "required: string");
+  }
+
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
index 53911e63..0ec67ed1 100644
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -449,7 +449,7 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertFalse(x.isPropertyTypeDeclared("alert"));
 
     ObjectType y = (ObjectType) findNameType("y", globalScope);
-    assertEquals("?",
+    assertEquals("function (this:Window, ?): undefined",
         y.getPropertyType("alert").toString());
   }
 
@@ -548,9 +548,7 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
     assertEquals("function (this:I): undefined",
         iPrototype.getPropertyType("baz").toString());
 
-    // should not be null
-    assertNull(globalScope.getVar("I.prototype"));
-    // assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
+    assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
   }
 
   // TODO(johnlenz): A syntax for stubs using object literals?
