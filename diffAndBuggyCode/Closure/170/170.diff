diff --git a/src/com/google/javascript/jscomp/ControlFlowGraph.java b/src/com/google/javascript/jscomp/ControlFlowGraph.java
index c0764c0c..a9f5ef57 100644
--- a/src/com/google/javascript/jscomp/ControlFlowGraph.java
+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java
@@ -203,4 +203,13 @@ class ControlFlowGraph<N> extends
         return false;
     }
   }
+
+  @Override
+  public String toString() {
+    String s = "CFG:\n";
+    for (GraphvizEdge e : getGraphvizEdges()) {
+      s += e.toString() + '\n';
+    }
+    return s;
+  }
 }
diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index fcc78daa..d58f80cb 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -256,9 +256,8 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
     private final Node use;
     private final Node useCfgNode;
 
-    // Number of uses of the variable within the CFG node that represented the
-    // use in the CFG.
-    private int numUseWithinUseCfgNode;
+    // Number of uses of the variable within the current CFG node.
+    private int numUsesWithinCfgNode;
 
     Candidate(String varName, Definition defMetadata,
         Node use, Node useCfgNode) {
@@ -328,7 +327,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
       // Finally we have to make sure that there are no more than one use
       // in the program and in the CFG node. Even when it is semantically
       // correctly inlining twice increases code size.
-      if (numUseWithinUseCfgNode != 1) {
+      if (numUsesWithinCfgNode != 1) {
         return false;
       }
 
@@ -472,23 +471,41 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
-    private void getNumUseInUseCfgNode(Node n) {
+    private void getNumUseInUseCfgNode(final Node cfgNode) {
 
+      numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-              // do not count in if it is left child of an assignment operator
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-            numUseWithinUseCfgNode++;
+          if (n.isName() && n.getString().equals(varName)) {
+            // We make a special exception when the entire cfgNode is a chain
+            // of assignments, since in that case the assignment statements
+            // will happen after the inlining of the right hand side.
+            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
+            //   and remove this special case.
+            if (parent.isAssign() && (parent.getFirstChild() == n)
+                && isAssignChain(parent, cfgNode)) {
+              // Don't count lhs of top-level assignment chain
+              return;
+            } else {
+              numUsesWithinCfgNode++;
+            }
+          }
+        }
+
+        private boolean isAssignChain(Node child, Node ancestor) {
+          for (Node n = child; n != ancestor; n = n.getParent()) {
+            if (!n.isAssign()) {
+              return false;
+            }
           }
+          return true;
         }
       };
 
-      NodeTraversal.traverse(compiler, n, gatherCb);
+      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
   }
 
@@ -522,7 +539,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
    */
   private static boolean checkLeftOf(
       Node n, Node expressionRoot, Predicate<Node> predicate) {
-    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
+    for (Node p = n; p != expressionRoot; p = p.getParent()) {
       for (Node cur = p.getParent().getFirstChild(); cur != p;
           cur = cur.getNext()) {
         if (predicate.apply(cur)) {
diff --git a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
index bba1ec49..b81f9cbd 100644
--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -84,6 +84,11 @@ final class MustBeReachingVariableDef extends
       // same depends set.
       return otherDef.node == node;
     }
+
+    @Override
+    public String toString() {
+      return "Definition@" + node.toString();
+    }
   }
 
   /**
diff --git a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
index 3dbf8b6d..0e3a6c4f 100644
--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
@@ -574,6 +574,13 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
         "return x;");
   }
 
+  public void testVarAssinInsideHookIssue965() {
+    noInline("var i = 0; return 1 ? (i = 5) : 0, i;");
+    noInline("var i = 0; return (1 ? (i = 5) : 0) ? i : 0;");
+    noInline("var i = 0; return (1 ? (i = 5) : 0) || i;");
+    noInline("var i = 0; return (1 ? (i = 5) : 0) * i;");
+  }
+
   private void noInline(String input) {
     inline(input, input);
   }
