diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java
index 3522e89e..5b5ab44d 100644
--- a/src/com/google/javascript/jscomp/CodeConsumer.java
+++ b/src/com/google/javascript/jscomp/CodeConsumer.java
@@ -257,15 +257,19 @@ abstract class CodeConsumer {
         }
       }
       if (exp > 2) {
-        add(Long.toString(mantissa) + "E" + Integer.toString(exp));
+        addConstant(Long.toString(mantissa) + "E" + Integer.toString(exp));
       } else {
-        add(Long.toString(value));
+        addConstant(Long.toString(value));
       }
     } else {
-      add(String.valueOf(x));
+      addConstant(String.valueOf(x));
     }
   }
 
+  void addConstant(String newcode) {
+    add(newcode);
+  }
+
   static boolean isNegativeZero(double x) {
     return x == 0.0 && Math.copySign(1, x) == -1.0;
   }
diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index da05c4f8..e793ddf2 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -550,7 +550,7 @@ class CodeGenerator {
 
       case Token.NULL:
         Preconditions.checkState(childCount == 0);
-        add("null");
+        cc.addConstant("null");
         break;
 
       case Token.THIS:
@@ -560,12 +560,12 @@ class CodeGenerator {
 
       case Token.FALSE:
         Preconditions.checkState(childCount == 0);
-        add("false");
+        cc.addConstant("false");
         break;
 
       case Token.TRUE:
         Preconditions.checkState(childCount == 0);
-        add("true");
+        cc.addConstant("true");
         break;
 
       case Token.CONTINUE:
diff --git a/src/com/google/javascript/jscomp/InlineCostEstimator.java b/src/com/google/javascript/jscomp/InlineCostEstimator.java
index 9d0dde74..65694ab7 100644
--- a/src/com/google/javascript/jscomp/InlineCostEstimator.java
+++ b/src/com/google/javascript/jscomp/InlineCostEstimator.java
@@ -94,5 +94,14 @@ class InlineCostEstimator {
     void addIdentifier(String identifier) {
       add(ESTIMATED_IDENTIFIER);
     }
+
+    /**
+     * Constants (true, false, null) are considered basically free,
+     * because it's likely that they will get folded when we're done.
+     */
+    @Override
+    void addConstant(String newcode) {
+      add("0");
+    }
   }
 }
diff --git a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java
index 5524e6e3..57567324 100644
--- a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java
+++ b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java
@@ -46,11 +46,13 @@ public class InlineCostEstimatorTest extends TestCase {
 
   public void testCost() {
     checkCost("1", "1");
+    checkCost("true", "1");
+    checkCost("false", "1");
     checkCost("a", "xx");
     checkCost("a + b", "xx+xx");
     checkCost("foo()", "xx()");
     checkCost("foo(a,b)", "xx(xx,xx)");
-    checkCost("10 + foo(a,b)", "10+xx(xx,xx)");
+    checkCost("10 + foo(a,b)", "0+xx(xx,xx)");
     checkCost("1 + foo(a,b)", "1+xx(xx,xx)");
     checkCost("a ? 1 : 0", "xx?1:0");
     checkCost("a.b", "xx.xx");
diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
index 1515f973..80ab5cc8 100644
--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
@@ -2164,6 +2164,18 @@ public class InlineFunctionsTest extends CompilerTestCase {
         "}");
   }
 
+  public void testIssue728() {
+    String f = "var f = function() { return false; };";
+    StringBuilder calls = new StringBuilder();
+    StringBuilder folded = new StringBuilder();
+    for (int i = 0; i < 30; i++) {
+      calls.append("if (!f()) alert('x');");
+      folded.append("if (!false) alert('x');");
+    }
+
+    test(f + calls, folded.toString());
+  }
+
   public void testAnonymous1() {
     assumeMinimumCapture = false;
     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();",
