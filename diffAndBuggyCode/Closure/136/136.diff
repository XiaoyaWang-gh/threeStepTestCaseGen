diff --git a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
index ddfe663e..24800731 100644
--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
@@ -241,6 +241,25 @@ class MakeDeclaredNamesUnique
       NodeTraversal.traverse(compiler, js, this);
     }
 
+    public static String getOrginalName(String name) {
+      int index = indexOfSeparator(name);
+      return (index == -1) ? name : name.substring(0, index);
+    }
+
+    private static int indexOfSeparator(String name) {
+      return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);
+    }
+
+    private static String getOrginalNameInternal(String name, int index) {
+      return name.substring(0, index);
+    }
+
+    private static String getNameSuffix(String name, int index) {
+      return name.substring(
+          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),
+          name.length());
+    }
+
     @Override
     public void visit(NodeTraversal t, Node node, Node parent) {
       if (node.getType() == Token.NAME) {
@@ -255,16 +274,13 @@ class MakeDeclaredNamesUnique
           if (nameMap.containsKey(var)) {
             node.setString(nameMap.get(var));
           } else {
-            String newName = oldName.substring(
-                0, oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));
-            String suffix = oldName.substring(
-                oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR)
-                    + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),
-                oldName.length());
-            
+            int index = indexOfSeparator(oldName);
+            String newName = getOrginalNameInternal(oldName, index);
+            String suffix = getNameSuffix(oldName, index);
+
             // The convention we are using here is that names of the form:
             //    a$$1  ($$ followed by a digit are allowed to mask a global)
-            //    a$$inline_1 ($$ followed by anything that isn't a digit isn't 
+            //    a$$inline_1 ($$ followed by anything that isn't a digit isn't
             //       allowed to mask a global.
             // This preserves existing behavior while allowing simpler diffs
             // when inlining is enabled.
@@ -275,12 +291,12 @@ class MakeDeclaredNamesUnique
               // Non-contextual renamed value.
               recurseScopes = true;
             }
-            
+
             // Before we change the name of this variable, double-check to
             // make sure we're not declaring a duplicate name in the
             // same scope as the var declaration.
             // TODO(johnlenz): This test isn't sufficient; specifically,
-            // a reference to a global may have been introduced. Shortening 
+            // a reference to a global may have been introduced. Shortening
             // the name without checking for such a reference may mask the
             // global causing the wrong value to be referenced.
             if (var.scope.isDeclared(newName, recurseScopes) ||
@@ -412,7 +428,7 @@ class MakeDeclaredNamesUnique
         String idPrefix,
         boolean removeConstness) {
       this.uniqueIdSupplier = uniqueIdSupplier;
-      // To ensure that the id does not conflict with the id from the 
+      // To ensure that the id does not conflict with the id from the
       // ContextualRenamer some prefix is needed.
       Preconditions.checkArgument(!idPrefix.isEmpty());
       this.idPrefix = idPrefix;
@@ -436,7 +452,7 @@ class MakeDeclaredNamesUnique
               0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));
       }
 
-      // By using the same separator the id will be stripped if it isn't 
+      // By using the same separator the id will be stripped if it isn't
       // needed when variable renaming is turned off.
       return name + ContextualRenamer.UNIQUE_ID_SEPARATOR
           + idPrefix + uniqueIdSupplier.get();
diff --git a/src/com/google/javascript/jscomp/MethodCompilerPass.java b/src/com/google/javascript/jscomp/MethodCompilerPass.java
index 94fca016..5e0268f9 100644
--- a/src/com/google/javascript/jscomp/MethodCompilerPass.java
+++ b/src/com/google/javascript/jscomp/MethodCompilerPass.java
@@ -99,36 +99,10 @@ abstract class MethodCompilerPass implements CompilerPass {
    * itself or the name of a function).
    */
   private void addPossibleSignature(String name, Node node, NodeTraversal t) {
-    boolean signatureAdded = false;
-
     if (node.getType() == Token.FUNCTION) {
       // The node we're looking at is a function, so we can add it directly
       addSignature(name, node, t.getSourceName());
-      signatureAdded = true;
-    } else if (node.getType() == Token.NAME) {
-      // The one we're looking at is the name of a function, so look it up in
-      // the current scope
-      String functionName = node.getString();
-      Scope.Var v = t.getScope().getVar(functionName);
-
-      if (v == null) {
-        if (compiler.isIdeMode()) {
-          return;
-        } else {
-          throw new IllegalStateException(
-              "VarCheck should have caught this undefined function");
-        }
-      }
-
-      Node function = v.getInitialValue();
-      if (function != null &&
-          function.getType() == Token.FUNCTION) {
-        addSignature(name, function, v.getInputName());
-        signatureAdded = true;
-      }
-    }
-
-    if (!signatureAdded) {
+    } else {
       nonMethodProperties.add(name);
     }
   }
diff --git a/src/com/google/javascript/jscomp/RenameVars.java b/src/com/google/javascript/jscomp/RenameVars.java
index c9fc7eef..fb13e4de 100644
--- a/src/com/google/javascript/jscomp/RenameVars.java
+++ b/src/com/google/javascript/jscomp/RenameVars.java
@@ -200,6 +200,15 @@ final class RenameVars implements CompilerPass {
 
       // Check if we can rename this.
       if (!okToRenameVar(name, local)) {
+        if (local) {
+          // Blindly de-uniquify for the Prototype library for issue 103.
+          String newName =
+            MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(
+                name);
+          if (!newName.equals(name)) {
+            n.setString(newName);
+          }
+        }
         return;
       }
 
diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index 68942a66..f8a730a4 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -62,6 +62,9 @@ public abstract class CompilerTestCase extends TestCase  {
   /** Whether the Normalize pass runs before pass being tested. */
   private boolean normalizeEnabled = false;
 
+  /** Whether the expected js strings should be normalized. */
+  private boolean normalizeExpected = false;
+
   /** Whether to check that all line number information is preserved. */
   private boolean checkLineNumbers = false;
 
@@ -202,7 +205,28 @@ public abstract class CompilerTestCase extends TestCase  {
    * @see Normalize
    */
   protected void enableNormalize() {
-    normalizeEnabled  = true;
+    enableNormalize(true);
+  }
+
+  /**
+   * Perform AST normalization before running the test pass, and anti-normalize
+   * after running it.
+   *
+   * @param normalizeExpected Whether to perform normalization on the
+   * expected js result.
+   * @see Normalize
+   */
+  protected void enableNormalize(boolean normalizeExpected) {
+    normalizeEnabled = true;
+    this.normalizeExpected = normalizeExpected;
+  }
+
+  /**
+   * Don't perform AST normalization before running the test pass.
+   * @see Normalize
+   */
+  protected void disableNormalize() {
+    normalizeEnabled = false;
   }
 
   /**
@@ -817,7 +841,7 @@ public abstract class CompilerTestCase extends TestCase  {
     Node externsRoot = root.getFirstChild();
     Node mainRoot = externsRoot.getNext();
     // Only run the normalize pass, if asked.
-    if (normalizeEnabled && !compiler.hasErrors()) {
+    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {
       Normalize normalize = new Normalize(compiler, false);
       normalize.process(externsRoot, mainRoot);
       compiler.setNormalized();
diff --git a/test/com/google/javascript/jscomp/InlineGettersTest.java b/test/com/google/javascript/jscomp/InlineGettersTest.java
index 699c6568..1da330f8 100644
--- a/test/com/google/javascript/jscomp/InlineGettersTest.java
+++ b/test/com/google/javascript/jscomp/InlineGettersTest.java
@@ -231,4 +231,20 @@ public class InlineGettersTest extends CompilerTestCase {
         "function Foo(){this.empty=emptyFunction}" +
         "(new Foo).empty()", null);
   }
+
+  public void testIssue2508576_1() {
+    // Method defined by an extern should be left alone.
+    String externs = "function alert(a) {}";
+    testSame(externs, "({a:alert,b:alert}).a(\"a\")", null);
+  }
+
+  public void testIssue2508576_2() {
+    // Anonymous object definition with a side-effect should be left alone.
+    testSame("({a:function(){},b:x()}).a(\"a\")");
+  }  
+
+  public void testIssue2508576_3() {
+    // Anonymous object definition without side-effect should be removed.
+    test("({a:function(){},b:alert}).a(\"a\")", "");
+  }  
 }
diff --git a/test/com/google/javascript/jscomp/MethodCheckTest.java b/test/com/google/javascript/jscomp/MethodCheckTest.java
index cbe3cb40..327d575e 100644
--- a/test/com/google/javascript/jscomp/MethodCheckTest.java
+++ b/test/com/google/javascript/jscomp/MethodCheckTest.java
@@ -97,12 +97,10 @@ public class MethodCheckTest extends CompilerTestCase {
     testSame("Boz.staticMethod1(1);");
     testSame("Boz.staticMethod2(1, 2);");
 
-    testErr("var f = new Bar();f.oneOrTwoArg2(1, 2, 3);",
-            FunctionCheck.WRONG_ARGUMENT_COUNT_ERROR);
-    testErr("Boz.staticMethod1(1, 2);",
-            FunctionCheck.WRONG_ARGUMENT_COUNT_ERROR);
-    testErr("Boz.staticMethod2(1);",
-            FunctionCheck.WRONG_ARGUMENT_COUNT_ERROR);
+    // Can't detect these incorrect usuages as they are defined indirectly.
+    testSame("var f = new Bar();f.oneOrTwoArg2(1, 2, 3);");
+    testSame("Boz.staticMethod1(1, 2);");
+    testSame("Boz.staticMethod2(1);");
   }
 
   public void testNoDefinition() {
diff --git a/test/com/google/javascript/jscomp/RenameVarsTest.java b/test/com/google/javascript/jscomp/RenameVarsTest.java
index 879c7101..9e55e05e 100644
--- a/test/com/google/javascript/jscomp/RenameVarsTest.java
+++ b/test/com/google/javascript/jscomp/RenameVarsTest.java
@@ -46,7 +46,7 @@ public class RenameVarsTest extends CompilerTestCase {
       return new DefaultCodingConvention();
     }
   }
-  
+
   @Override
   protected CompilerPass getProcessor(Compiler compiler) {
     if (withClosurePass) {
@@ -73,6 +73,8 @@ public class RenameVarsTest extends CompilerTestCase {
     localRenamingOnly = false;
     preserveAnonymousFunctionNames = false;
     generatePseudoNames = false;
+
+    // TODO(johnlenz): Enable Normalize during these tests.
   }
 
   public void testRenameSimple() {
@@ -439,13 +441,13 @@ public class RenameVarsTest extends CompilerTestCase {
     test("var goog, a, b; goog.exportSymbol(a, b);",
          "var a, b, c; a.exportSymbol(b, c);");
   }
-  
-  public void testDollarSignSuperExport() {
+
+  public void testDollarSignSuperExport1() {
     useGoogleCodingConvention = false;
     // See http://code.google.com/p/closure-compiler/issues/detail?id=32
     test("var x = function($super,duper,$fantastic){}",
          "var c = function($super,    a,        b){}");
-    
+
     localRenamingOnly = false;
     test("var $super = 1", "var a = 1");
 
@@ -454,17 +456,40 @@ public class RenameVarsTest extends CompilerTestCase {
          "var d = function(a,     b,    c        ){}");
   }
 
+  public void testDollarSignSuperExport2() {
+    boolean normalizedExpectedJs = false;
+    super.enableNormalize(false);
+
+    useGoogleCodingConvention = false;
+    // See http://code.google.com/p/closure-compiler/issues/detail?id=32
+    test("var x = function($super,duper,$fantastic){};" +
+            "var y = function($super,duper){};",
+         "var c = function($super,    a,         b){};" +
+            "var d = function($super,    a){};");
+
+    localRenamingOnly = false;
+    test("var $super = 1", "var a = 1");
+
+    useGoogleCodingConvention = true;
+    test("var x = function($super,duper,$fantastic){};" +
+            "var y = function($super,duper){};",
+         "var d = function(a,     b,    c         ){};" +
+            "var e = function(     a,    b){};");
+
+    super.disableNormalize();
+  }
+
   public void testPseudoNames() {
     generatePseudoNames = false;
     // See http://code.google.com/p/closure-compiler/issues/detail?id=32
     test("var foo = function(a, b, c){}",
          "var d = function(a, b, c){}");
-    
+
     generatePseudoNames = true;
     test("var foo = function(a, b, c){}",
          "var $foo$$ = function($a$$, $b$$, $c$$){}");
-  }  
-  
+  }
+
   private void testRenameMapUsingOldMap(String input, String expected,
                                         VariableMap expectedMap) {
     previouslyUsedMap = renameVars.getVariableMap();
diff --git a/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java
index f5185f89..4347314e 100644
--- a/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java
@@ -153,6 +153,34 @@ public class TypeCheckFunctionCheckTest extends CompilerTestCase {
     testSame("var foo = function(var_args) {}; foo(1, 2);");
   }
 
+  public void testMethodCalls() {
+    final String METHOD_DEFS =
+      "/** @constructor */\n" +
+      "function Foo() {}" +
+      // Methods defined in a separate functions and then added via assignment
+      "function twoArg(arg1, arg2) {};" +
+      "Foo.prototype.prototypeMethod = twoArg;" +
+      "Foo.staticMethod = twoArg;";
+    
+    // Prototype method with too many arguments.
+    testSame(METHOD_DEFS +
+        "var f = new Foo();f.prototypeMethod(1, 2, 3);",
+        TypeCheck.WRONG_ARGUMENT_COUNT);
+    // Prototype method with too few arguments.
+    testSame(METHOD_DEFS +
+        "var f = new Foo();f.prototypeMethod(1);",
+        TypeCheck.WRONG_ARGUMENT_COUNT);
+
+    // Static method with too many arguments.
+    testSame(METHOD_DEFS +
+        "Foo.staticMethod(1, 2, 3);",
+        TypeCheck.WRONG_ARGUMENT_COUNT);
+    // Static method with too few arguments.
+    testSame(METHOD_DEFS +
+        "Foo.staticMethod(1);",
+        TypeCheck.WRONG_ARGUMENT_COUNT);
+  }
+
   public void assertOk(String params, String arguments) {
     assertWarning(params, arguments, null);
   }
