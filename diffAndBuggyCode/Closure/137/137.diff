diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 2b71bea9..18095424 100755
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
index 24800731..d88520cb 100644
--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java
@@ -18,9 +18,12 @@ package com.google.javascript.jscomp;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Supplier;
 import com.google.common.collect.HashMultiset;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multiset;
-import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
+import com.google.common.collect.Sets;
+import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
@@ -28,7 +31,10 @@ import com.google.javascript.rhino.TokenStream;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /**
  *  Find all Functions, VARs, and Exception names and make them
@@ -39,6 +45,7 @@ import java.util.Map;
 class MakeDeclaredNamesUnique
     implements NodeTraversal.ScopedCallback {
 
+  public static final String ARGUMENTS = "arguments";
   private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();
   private final Renamer rootRenamer;
 
@@ -226,12 +233,18 @@ class MakeDeclaredNamesUnique
   /**
    * Inverts the transformation by {@link ContextualRenamer}, when possible.
    */
-  static class ContextualRenameInverter extends AbstractPostOrderCallback
-      implements CompilerPass {
+  static class ContextualRenameInverter
+      implements ScopedCallback, CompilerPass {
     private final AbstractCompiler compiler;
 
-    // A mapping from long names to short ones.
-    private Map<Var, String> nameMap = Maps.newHashMap();
+    // The set of names referenced in the current scope.
+    private Set<String> referencedNames = ImmutableSet.of();
+
+    // Stack reference sets.
+    private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();
+
+    // Name are globally unique initially, so we don't need a per-scope map.
+    private Map<String, List<Node>> nameMap = Maps.newHashMap();
 
     private ContextualRenameInverter(AbstractCompiler compiler) {
       this.compiler = compiler;
@@ -250,77 +263,108 @@ class MakeDeclaredNamesUnique
       return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);
     }
 
-    private static String getOrginalNameInternal(String name, int index) {
-      return name.substring(0, index);
+    private boolean containsSeparator(String name) {
+      return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;
     }
 
-    private static String getNameSuffix(String name, int index) {
-      return name.substring(
-          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),
-          name.length());
+    /**
+     * Prepare a set for the new scope.
+     */
+    public void enterScope(NodeTraversal t) {
+      if (t.inGlobalScope()) {
+        return;
+      }
+
+      referenceStack.push(referencedNames);
+      referencedNames = Sets.newHashSet();
     }
 
-    @Override
-    public void visit(NodeTraversal t, Node node, Node parent) {
-      if (node.getType() == Token.NAME) {
-        String oldName = node.getString();
-        if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) {
-          Scope scope = t.getScope();
-          Var var = t.getScope().getVar(oldName);
-          if (var == null || var.isGlobal()) {
-            return;
-          }
+    /**
+     * Rename vars for the current scope, and merge any referenced 
+     * names into the parent scope reference set.
+     */
+    public void exitScope(NodeTraversal t) {
+      if (t.inGlobalScope()) {
+        return;
+      }
 
-          if (nameMap.containsKey(var)) {
-            node.setString(nameMap.get(var));
-          } else {
-            int index = indexOfSeparator(oldName);
-            String newName = getOrginalNameInternal(oldName, index);
-            String suffix = getNameSuffix(oldName, index);
-
-            // The convention we are using here is that names of the form:
-            //    a$$1  ($$ followed by a digit are allowed to mask a global)
-            //    a$$inline_1 ($$ followed by anything that isn't a digit isn't
-            //       allowed to mask a global.
-            // This preserves existing behavior while allowing simpler diffs
-            // when inlining is enabled.
-            // TODO(johnlenz): Remove this distiction when scoping is properly
-            // checked.
-            boolean recurseScopes = false;
-            if (!suffix.matches("\\d+")) {
-              // Non-contextual renamed value.
-              recurseScopes = true;
-            }
+      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
+        Var v = it.next();
+        handleScopeVar(v);
+      }
 
-            // Before we change the name of this variable, double-check to
-            // make sure we're not declaring a duplicate name in the
-            // same scope as the var declaration.
-            // TODO(johnlenz): This test isn't sufficient; specifically,
-            // a reference to a global may have been introduced. Shortening
-            // the name without checking for such a reference may mask the
-            // global causing the wrong value to be referenced.
-            if (var.scope.isDeclared(newName, recurseScopes) ||
-                !TokenStream.isJSIdentifier(newName)) {
-              newName = oldName;
-            } else {
-              var.scope.declare(newName, var.nameNode, null, null);
-
-              // Handle bleeding functions.
-              Node parentNode = var.getParentNode();
-              if (parentNode.getType() == Token.FUNCTION &&
-                  parentNode == var.scope.getRootNode()) {
-                var.getNameNode().setString(newName);
-              }
-
-              node.setString(newName);
-              compiler.reportCodeChange();
-            }
+      // Merge any names that were referenced but not declared in the current
+      // scope.
+      Set<String> current = referencedNames;
+      referencedNames = referenceStack.pop();
+      // If there isn't anything left in the stack we will be going into the
+      // global scope: don't try to build a set of referenced names for the
+      // global scope.
+      if (!referenceStack.isEmpty()) {
+        referencedNames.addAll(current);
+      }
+    }
 
-            nameMap.put(var, newName);
+    /**
+     * For the Var declared in the current scope determine if it is possible
+     * to revert the name to its orginal form without conflicting with other
+     * values.
+     */
+    void handleScopeVar(Var v) {
+      String name  = v.getName();
+      if (containsSeparator(name)) {
+        String newName = getOrginalName(name);
+        // Check if the new name is valid and if it would cause conflicts.
+        if (TokenStream.isJSIdentifier(newName) &&
+            !referencedNames.contains(newName) && 
+            !newName.equals(ARGUMENTS)) {
+          referencedNames.remove(name);
+          // Adding a reference to the new name to prevent either the parent
+          // scopes or the current scope renaming another var to this new name.
+          referencedNames.add(newName);
+          List<Node> references = nameMap.get(name);
+          Preconditions.checkState(references != null);
+          for (Node n : references) {
+            Preconditions.checkState(n.getType() == Token.NAME);
+            n.setString(newName);
           }
+          compiler.reportCodeChange();
         }
+        nameMap.remove(name);
       }
     }
+
+    @Override
+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
+      return true;
+    }
+
+    @Override
+    public void visit(NodeTraversal t, Node node, Node parent) {
+      if (t.inGlobalScope()) {
+        return;
+      }
+
+      if (NodeUtil.isReferenceName(node)) {
+        String name = node.getString();
+        // Add all referenced names to the set so it is possible to check for
+        // conflicts.
+        referencedNames.add(name);
+        // Store only references to candidate names in the node map.
+        if (containsSeparator(name)) {
+          addCandidateNameReference(name, node);
+        }
+      }
+    }
+
+    private void addCandidateNameReference(String name, Node n) {
+      List<Node> nodes = nameMap.get(name);
+      if (null == nodes) {
+        nodes = Lists.newLinkedList();
+        nameMap.put(name, nodes);
+      }
+      nodes.add(n);
+    }
   }
 
   /**
@@ -367,17 +411,19 @@ class MakeDeclaredNamesUnique
      */
     @Override
     public void addDeclaredName(String name) {
-      if (global) {
-        reserveName(name);
-      } else {
-        // It hasn't been declared locally yet, so increment the count.
-        if (!declarations.containsKey(name)) {
-          int id = incrementNameCount(name);
-          String newName = null;
-          if (id != 0) {
-            newName = getUniqueName(name, id);
+      if (!name.equals(ARGUMENTS)) {
+        if (global) {
+          reserveName(name);
+        } else {
+          // It hasn't been declared locally yet, so increment the count.
+          if (!declarations.containsKey(name)) {
+            int id = incrementNameCount(name);
+            String newName = null;
+            if (id != 0) {
+              newName = getUniqueName(name, id);
+            }
+            declarations.put(name, newName);
           }
-          declarations.put(name, newName);
         }
       }
     }
@@ -437,6 +483,7 @@ class MakeDeclaredNamesUnique
 
     @Override
     public void addDeclaredName(String name) {
+      Preconditions.checkState(!name.equals(ARGUMENTS));
       if (!declarations.containsKey(name)) {
         declarations.put(name, getUniqueName(name));
       }
diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 774fc9c7..6c3643a3 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -1036,6 +1036,14 @@ public final class NodeUtil {
     return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;
   }
 
+  /**
+   * @return Whether the name is a reference to a variable, function or
+   *       function parameter (not a label or a empty anonymous function name).
+   */
+  static boolean isReferenceName(Node n) {
+    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
+  }
+
   /** @return Whether the node is a label name. */
   static boolean isLabelName(Node n) {
     if (n != null && n.getType() == Token.NAME) {
diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index ba70589c..993b68dc 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -79,12 +79,26 @@ class Normalize implements CompilerPass {
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root,
         new NormalizeStatements(compiler, assertOnChange));
-    removeDuplicateDeclarations(root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
+    // It is important that removeDuplicateDeclarations runs after
+    // MakeDeclaredNamesUnique in order for catch block exception names to be
+    // handled properly. Specifically, catch block exception names are
+    // only valid within the catch block, but our currect Scope logic
+    // has no concept of this and includes it in the containing function 
+    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
+    // names unique so that removeDuplicateDeclarations() will properly handle
+    // cases where a function scope variable conflict with a exception name:
+    //   function f() {
+    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
+    //      var e = 1; // f scope 'e'
+    //   }
+    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
+    // TODO(johnlenz): Introduce a seperate scope for catch nodes. 
+    removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
diff --git a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
index 483c088f..930e8559 100644
--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
@@ -89,18 +89,32 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
     testSameWithInversion("", original);
   }
 
-  public void testMakeLocalNamesUniqueWithContext0() {
+  private String wrapInFunction(String s) {
+    return "function f(){" + s + "}";
+  }
+  
+  public void testInFunction(String original, String expected) {
+    test(wrapInFunction(original), wrapInFunction(expected));
+  }
+  
+  public void testSameInFunction(String original) {
+    testSame(wrapInFunction(original));
+  }  
+  
+  public void testMakeLocalNamesUniqueWithContext1() {
     // Set the test type
     this.useDefaultRenamer = true;
 
-    // Local names are made unique.
     invert = true;
     test(
         "var a;function foo(){var a$$inline_1; a = 1}",
         "var a;function foo(){var a$$inline_1; a = 1}");
+    test(
+        "var a;function foo(){var a$$inline_1;}",
+        "var a;function foo(){var a;}");
   }
 
-  public void testMakeLocalNamesUniqueWithContext() {
+  public void testMakeLocalNamesUniqueWithContext2() {
     // Set the test type
     this.useDefaultRenamer = true;
 
@@ -142,7 +156,7 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
   }
 
-  public void testMakeLocalNamesUniqueWithContext2() {
+  public void testMakeLocalNamesUniqueWithContext3() {
     // Set the test type
     this.useDefaultRenamer = true;
 
@@ -155,6 +169,51 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
     testSame(externs, "var extern1 = extern1 || {};", null);
   }
 
+
+
+  public void testMakeLocalNamesUniqueWithContext4() {
+    // Set the test type
+    this.useDefaultRenamer = true;
+
+    // Inversion does not handle exceptions correctly.
+    testInFunction(
+        "var e; try { } catch(e) {e;}; try { } catch(e) {e;}",
+        "var e; try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;}");
+    testInFunction(
+        "var e; try { } catch(e) {e; try { } catch(e) {e;}}",
+        "var e; try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} }");
+    testInFunction(
+        "try { } catch(e) {e;}; try { } catch(e) {e;} var e;",
+        "try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;} var e;");
+    testInFunction(
+        "try { } catch(e) {e; try { } catch(e) {e;}} var e;",
+        "try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} } var e;");
+
+    invert = true;
+
+    testSameInFunction(
+        "var e; try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;}");
+    testSameInFunction(
+        "var e; try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} };");
+    testSameInFunction(
+        "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;};var e$$2;");
+    testSameInFunction(
+        "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} };var e$$2");
+  }
+
+  public void testArguments() {
+    // Set the test type
+    this.useDefaultRenamer = true;
+
+    invert = true;
+    // Don't distinguish between "arguments", it can't be made unique.
+    testSameWithInversion(
+        "function foo(){var arguments;function bar(){var arguments;}}");
+    // Don't introduce new references to arguments, it is special.
+    testSameWithInversion(
+        "function foo(){var arguments$$1;}");
+  }
+
   public void testMakeLocalNamesUniqueWithoutContext() {
     // Set the test type
     this.useDefaultRenamer = false;
@@ -212,6 +271,52 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
          "function() {var CONST = 3; var ACONST = 2;}");
   }
 
+  public void testOnlyInversion2() {
+    invert = true;
+    testSame("function () {" +
+        "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}}");
+  }
+
+  public void testOnlyInversion3() {
+    invert = true;
+    test(
+        "function x1() {" +
+        "  var a$$1;" +
+        "  function x2() {" +
+        "    var a$$2;" +
+        "  }" +
+        "  function x3() {" +
+        "    var a$$3;" +
+        "  }" +
+        "}",
+        "function x1() {" +
+        "  var a$$1;" +
+        "  function x2() {" +
+        "    var a;" +
+        "  }" +
+        "  function x3() {" +
+        "    var a;" +
+        "  }" +
+        "}");
+  }
+
+  public void testOnlyInversion4() {
+    invert = true;
+    test(
+        "function x1() {" +
+        "  var a$$1;" +
+        "  function x2() {" +
+        "    var a;a$$1++" +
+        "  }" +
+        "}",
+        "function x1() {" +
+        "  var a$$1;" +
+        "  function x2() {" +
+        "    var a;a$$1++" +
+        "  }" +
+        "}");
+  }
+
   public void testConstRemovingRename1() {
     removeConst = true;
     test("function() {var CONST = 3; var ACONST$$1 = 2;}",
diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
index 2a4c61a4..2073bff0 100644
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -185,7 +185,7 @@ public class NormalizeTest extends CompilerTestCase {
          "function f() {var window$$1}");
   }
 
-  public void testRemoveDuplicateVarDeclarations() {
+  public void testRemoveDuplicateVarDeclarations1() {
     test("function f() { var a; var a }",
          "function f() { var a; }");
     test("function f() { var a = 1; var a = 2 }",
@@ -200,6 +200,11 @@ public class NormalizeTest extends CompilerTestCase {
          "function f() { var a = 1; for(a in b); }");
   }
 
+  public void testRemoveDuplicateVarDeclarations2() {
+    test("var e = 1; function f(){ try {} catch (e) {} var e = 2 }",
+         "var e = 1; function f(){ try {} catch (e$$2) {} var e$$1 = 2 }");
+  }
+  
   public void testRenamingConstants() {
     test("var ACONST = 4;var b = ACONST;",
          "var ACONST = 4; var b = ACONST;");
