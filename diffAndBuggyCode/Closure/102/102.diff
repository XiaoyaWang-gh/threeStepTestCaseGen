diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 16c35fcc..4e6e1529 100755
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 4aa45558..1db94e2f 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -86,12 +86,12 @@ class Normalize implements CompilerPass, Callback {
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
+    removeDuplicateDeclarations(root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
-    removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
diff --git a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java
index bb3e3881..db992021 100644
--- a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java
+++ b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java
@@ -37,6 +37,10 @@ class SyntacticScopeCreator implements ScopeCreator {
   private String sourceName;
   private final RedeclarationHandler redeclarationHandler;
 
+  // The arguments variable is special, in that it's declared in every local
+  // scope, but not explicitly declared.
+  private static final String ARGUMENTS = "arguments";
+
   public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =
       DiagnosticType.error(
           "JSC_VAR_MULTIPLY_DECLARED_ERROR",
@@ -197,7 +201,7 @@ class SyntacticScopeCreator implements ScopeCreator {
           info = parent.getJSDocInfo();
         }
         allowDupe =
-          info != null && info.getSuppressions().contains("duplicate");
+            info != null && info.getSuppressions().contains("duplicate");
 
         if (!allowDupe) {
           compiler.report(
@@ -226,7 +230,8 @@ class SyntacticScopeCreator implements ScopeCreator {
   private void declareVar(String name, Node n, Node parent,
                           Node gramps, JSType declaredType,
                           Node nodeWithLineNumber) {
-    if (scope.isDeclared(name, false)) {
+    if (scope.isDeclared(name, false)
+        || (scope.isLocal() && name.equals(ARGUMENTS))) {
       redeclarationHandler.onRedeclaration(
           scope, name, n, parent, gramps, nodeWithLineNumber);
     } else {
diff --git a/test/com/google/javascript/jscomp/CompilerRunnerTest.java b/test/com/google/javascript/jscomp/CompilerRunnerTest.java
index c51444f0..b9d70375 100644
--- a/test/com/google/javascript/jscomp/CompilerRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CompilerRunnerTest.java
@@ -40,7 +40,11 @@ public class CompilerRunnerTest extends TestCase {
   /** Externs for the test */
   private final JSSourceFile[] externs = new JSSourceFile[] {
     JSSourceFile.fromCode("externs",
-        "/** @constructor */ function Window() {}\n"
+        "var arguments;" +
+        "/** @constructor \n * @param {...*} var_args \n " +
+        "* @return {!Array} */ " +
+        "function Array(var_args) {}\n"
+        + "/** @constructor */ function Window() {}\n"
         + "/** @type {string} */ Window.prototype.name;\n"
         + "/** @type {Window} */ var window;"
         + "/** @nosideeffects */ function noSideEffects() {}")
@@ -168,6 +172,21 @@ public class CompilerRunnerTest extends TestCase {
          "eval(\"1\");(0,eval)(\"2\");");
   }
 
+  public void testIssue115() {
+    CompilerRunner.FLAG_compilation_level.setForTest(
+        CompilationLevel.SIMPLE_OPTIMIZATIONS);
+    CompilerRunner.FLAG_warning_level.setForTest(
+        WarningLevel.VERBOSE);
+    test("function f() { " +
+         "  var arguments = Array.prototype.slice.call(arguments, 0);" +
+         "  return arguments[0]; " +
+         "}",
+         "function f() { " +
+         "  arguments = Array.prototype.slice.call(arguments, 0);" +
+         "  return arguments[0]; " +
+         "}");
+  }
+
   public void testDebugFlag1() {
     CompilerRunner.FLAG_compilation_level.setForTest(
         CompilationLevel.SIMPLE_OPTIMIZATIONS);
