diff --git a/javadoc/com/google/javascript/rhino/jstype/EnumElementType.html b/javadoc/com/google/javascript/rhino/jstype/EnumElementType.html
index 99d80fdf..74c320c7 100644
--- a/javadoc/com/google/javascript/rhino/jstype/EnumElementType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/EnumElementType.html
@@ -381,7 +381,7 @@ The type of individual elements of an enum type
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyJSDocInfo(java.lang.String)">getOwnPropertyJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyNames()">getOwnPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isNativeObjectType()">isNativeObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isPropertyInExterns(java.lang.String)">isPropertyInExterns</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo, boolean)">setPropertyJSDocInfo</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyJSDocInfo(java.lang.String)">getOwnPropertyJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyNames()">getOwnPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isNativeObjectType()">isNativeObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isPropertyInExterns(java.lang.String)">isPropertyInExterns</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo, boolean)">setPropertyJSDocInfo</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/com/google/javascript/rhino/jstype/EnumType.html b/javadoc/com/google/javascript/rhino/jstype/EnumType.html
index f8f04d65..5bf4cd19 100644
--- a/javadoc/com/google/javascript/rhino/jstype/EnumType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/EnumType.html
@@ -403,7 +403,7 @@ An enum type representing a branded collection of elements. Each element
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/com/google/javascript/rhino/jstype/FunctionPrototypeType.html b/javadoc/com/google/javascript/rhino/jstype/FunctionPrototypeType.html
index 5fbde59a..5b18b6f8 100644
--- a/javadoc/com/google/javascript/rhino/jstype/FunctionPrototypeType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/FunctionPrototypeType.html
@@ -166,6 +166,14 @@ Represents the prototype of a <A HREF="../../../../../com/google/javascript/rhin
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt;</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionPrototypeType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></B>()</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the interfaces implemented by the ctor associated with this type.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionPrototypeType.html#getImplicitPrototype()">getImplicitPrototype</A></B>()</CODE>
 
@@ -464,6 +472,24 @@ public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.h
 </DL>
 <HR>
 
+<A NAME="getCtorImplementedInterfaces()"><!-- --></A><H3>
+getCtorImplementedInterfaces</H3>
+<PRE>
+public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt; <B>getCtorImplementedInterfaces</B>()</PRE>
+<DL>
+<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">ObjectType</A></CODE></B></DD>
+<DD>Gets the interfaces implemented by the ctor associated with this type.
+ Intended to be overridden by subclasses.
+<P>
+<DD><DL>
+<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="getPropertiesCount()"><!-- --></A><H3>
 getPropertiesCount</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/rhino/jstype/FunctionType.html b/javadoc/com/google/javascript/rhino/jstype/FunctionType.html
index 382ae0a8..16b1ab7e 100644
--- a/javadoc/com/google/javascript/rhino/jstype/FunctionType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/FunctionType.html
@@ -676,7 +676,7 @@ This derived type provides extended information about a function, including
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#testForEquality(com.google.javascript.rhino.jstype.JSType)">testForEquality</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#testForEquality(com.google.javascript.rhino.jstype.JSType)">testForEquality</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/com/google/javascript/rhino/jstype/InstanceObjectType.html b/javadoc/com/google/javascript/rhino/jstype/InstanceObjectType.html
index 32d72ccd..940b520f 100644
--- a/javadoc/com/google/javascript/rhino/jstype/InstanceObjectType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/InstanceObjectType.html
@@ -176,6 +176,14 @@ An object type that is an instance of some function constructor.
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt;</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/InstanceObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></B>()</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the interfaces implemented by the ctor associated with this type.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/InstanceObjectType.html#getImplicitPrototype()">getImplicitPrototype</A></B>()</CODE>
 
@@ -710,6 +718,24 @@ public int <B>hashCode</B>()</PRE>
 </DL>
 <HR>
 
+<A NAME="getCtorImplementedInterfaces()"><!-- --></A><H3>
+getCtorImplementedInterfaces</H3>
+<PRE>
+public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt; <B>getCtorImplementedInterfaces</B>()</PRE>
+<DL>
+<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">ObjectType</A></CODE></B></DD>
+<DD>Gets the interfaces implemented by the ctor associated with this type.
+ Intended to be overridden by subclasses.
+<P>
+<DD><DL>
+<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="getPropertiesCount()"><!-- --></A><H3>
 getPropertiesCount</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/rhino/jstype/NamedType.html b/javadoc/com/google/javascript/rhino/jstype/NamedType.html
index 7c1036db..967dca5d 100644
--- a/javadoc/com/google/javascript/rhino/jstype/NamedType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/NamedType.html
@@ -256,6 +256,14 @@ A <code>NamedType</code> is a named reference to some other type.  This provides
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt;</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/NamedType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></B>()</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the interfaces implemented by the ctor associated with this type.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/NamedType.html#getImplicitPrototype()">getImplicitPrototype</A></B>()</CODE>
 
@@ -1142,6 +1150,24 @@ public boolean <B>isSubtype</B>(<A HREF="../../../../../com/google/javascript/rh
 </DL>
 <HR>
 
+<A NAME="getCtorImplementedInterfaces()"><!-- --></A><H3>
+getCtorImplementedInterfaces</H3>
+<PRE>
+public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt; <B>getCtorImplementedInterfaces</B>()</PRE>
+<DL>
+<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">ObjectType</A></CODE></B></DD>
+<DD>Gets the interfaces implemented by the ctor associated with this type.
+ Intended to be overridden by subclasses.
+<P>
+<DD><DL>
+<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="canAssignTo(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
 canAssignTo</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html b/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html
index 3392c115..3472aacf 100644
--- a/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html
@@ -448,7 +448,7 @@ The bottom Object type, representing the subclass of all objects.
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/com/google/javascript/rhino/jstype/NoType.html b/javadoc/com/google/javascript/rhino/jstype/NoType.html
index f9eaa33d..2f39fe39 100644
--- a/javadoc/com/google/javascript/rhino/jstype/NoType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/NoType.html
@@ -357,7 +357,7 @@ Bottom type, representing the subclass of any value or object.
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/com/google/javascript/rhino/jstype/ObjectType.html b/javadoc/com/google/javascript/rhino/jstype/ObjectType.html
index 6c06a4f2..708cf512 100644
--- a/javadoc/com/google/javascript/rhino/jstype/ObjectType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/ObjectType.html
@@ -212,6 +212,14 @@ Object type.
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt;</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></B>()</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the interfaces implemented by the ctor associated with this type.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>abstract &nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getImplicitPrototype()">getImplicitPrototype</A></B>()</CODE>
 
@@ -940,6 +948,20 @@ public static <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectT
 </DL>
 </DD>
 </DL>
+<HR>
+
+<A NAME="getCtorImplementedInterfaces()"><!-- --></A><H3>
+getCtorImplementedInterfaces</H3>
+<PRE>
+public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt; <B>getCtorImplementedInterfaces</B>()</PRE>
+<DL>
+<DD>Gets the interfaces implemented by the ctor associated with this type.
+ Intended to be overridden by subclasses.
+<P>
+<DD><DL>
+</DL>
+</DD>
+</DL>
 <!-- ========= END OF CLASS DATA ========= -->
 <HR>
 
diff --git a/javadoc/com/google/javascript/rhino/jstype/RecordType.html b/javadoc/com/google/javascript/rhino/jstype/RecordType.html
index bd128804..4cdb24bf 100644
--- a/javadoc/com/google/javascript/rhino/jstype/RecordType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/RecordType.html
@@ -390,7 +390,7 @@ A record (structural) type.
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#testForEquality(com.google.javascript.rhino.jstype.JSType)">testForEquality</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#visit(com.google.javascript.rhino.jstype.Visitor)">visit</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPossibleToBooleanOutcomes()">getPossibleToBooleanOutcomes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isUnknownType()">isUnknownType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#testForEquality(com.google.javascript.rhino.jstype.JSType)">testForEquality</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#visit(com.google.javascript.rhino.jstype.Visitor)">visit</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/com/google/javascript/rhino/jstype/TemplateType.html b/javadoc/com/google/javascript/rhino/jstype/TemplateType.html
index e21082a5..5138e141 100644
--- a/javadoc/com/google/javascript/rhino/jstype/TemplateType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/TemplateType.html
@@ -190,6 +190,14 @@ Class TemplateType</H2>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt;</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/TemplateType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></B>()</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the interfaces implemented by the ctor associated with this type.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/TemplateType.html#getImplicitPrototype()">getImplicitPrototype</A></B>()</CODE>
 
@@ -921,6 +929,24 @@ public boolean <B>isSubtype</B>(<A HREF="../../../../../com/google/javascript/rh
 </DL>
 <HR>
 
+<A NAME="getCtorImplementedInterfaces()"><!-- --></A><H3>
+getCtorImplementedInterfaces</H3>
+<PRE>
+public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html?is-external=true" title="class or interface in java.lang">Iterable</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&gt; <B>getCtorImplementedInterfaces</B>()</PRE>
+<DL>
+<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">ObjectType</A></CODE></B></DD>
+<DD>Gets the interfaces implemented by the ctor associated with this type.
+ Intended to be overridden by subclasses.
+<P>
+<DD><DL>
+<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="canAssignTo(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
 canAssignTo</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/rhino/jstype/UnknownType.html b/javadoc/com/google/javascript/rhino/jstype/UnknownType.html
index 3d473757..fc68b796 100644
--- a/javadoc/com/google/javascript/rhino/jstype/UnknownType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/UnknownType.html
@@ -353,7 +353,7 @@ The <code>Unknown</code> type.
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyJSDocInfo(java.lang.String)">getOwnPropertyJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyNames()">getOwnPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasReferenceName()">hasReferenceName</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isNativeObjectType()">isNativeObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isPropertyInExterns(java.lang.String)">isPropertyInExterns</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo, boolean)">setPropertyJSDocInfo</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#cast(com.google.javascript.rhino.jstype.JSType)">cast</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineDeclaredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)">defineInferredProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#findPropertyType(java.lang.String)">findPropertyType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()">getCtorImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getIndexType()">getIndexType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getJSDocInfo()">getJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyJSDocInfo(java.lang.String)">getOwnPropertyJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getOwnPropertyNames()">getOwnPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getParameterType()">getParameterType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#getPropertyNames()">getPropertyNames</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasReferenceName()">hasReferenceName</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isNativeObjectType()">isNativeObjectType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isObject()">isObject</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#isPropertyInExterns(java.lang.String)">isPropertyInExterns</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#setPropertyJSDocInfo(java.lang.String, com.google.javascript.rhino.JSDocInfo, boolean)">setPropertyJSDocInfo</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.JSType"><!-- --></A>
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index c4ffe05e..32ac5883 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -2100,6 +2100,15 @@ Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/js
 <DT><A HREF="./com/google/javascript/jscomp/NodeTraversal.html#getControlFlowGraph()"><B>getControlFlowGraph()</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/NodeTraversal.html" title="class in com.google.javascript.jscomp">NodeTraversal</A>
 <DD>Gets the control flow graph for the current JS scope.
+<DT><A HREF="./com/google/javascript/rhino/jstype/FunctionPrototypeType.html#getCtorImplementedInterfaces()"><B>getCtorImplementedInterfaces()</B></A> - 
+Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/FunctionPrototypeType.html" title="class in com.google.javascript.rhino.jstype">FunctionPrototypeType</A>
+<DD>&nbsp;
+<DT><A HREF="./com/google/javascript/rhino/jstype/InstanceObjectType.html#getCtorImplementedInterfaces()"><B>getCtorImplementedInterfaces()</B></A> - 
+Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/InstanceObjectType.html" title="class in com.google.javascript.rhino.jstype">InstanceObjectType</A>
+<DD>&nbsp;
+<DT><A HREF="./com/google/javascript/rhino/jstype/ObjectType.html#getCtorImplementedInterfaces()"><B>getCtorImplementedInterfaces()</B></A> - 
+Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>
+<DD>Gets the interfaces implemented by the ctor associated with this type.
 <DT><A HREF="./com/google/javascript/rhino/Context.html#getCurrentContext()"><B>getCurrentContext()</B></A> - 
 Static method in class com.google.javascript.rhino.<A HREF="./com/google/javascript/rhino/Context.html" title="class in com.google.javascript.rhino">Context</A>
 <DD>Get the current Context.
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index da608635..05fb8a1a 100755
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/AbstractCompilerRunner.java b/src/com/google/javascript/jscomp/AbstractCompilerRunner.java
index e8444946..0583c5e5 100644
--- a/src/com/google/javascript/jscomp/AbstractCompilerRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCompilerRunner.java
@@ -18,7 +18,7 @@ package com.google.javascript.jscomp;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Charsets;
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
@@ -1070,7 +1070,7 @@ public abstract class AbstractCompilerRunner<A extends Compiler,
 
       int i = 1;
       for (List<String> loop : loopedPassesInBestRun) {
-        out.println("\nLoop " + i + ":\n" + Join.join("\n", loop));
+        out.println("\nLoop " + i + ":\n" + Joiner.on("\n").join(loop));
         i++;
       }
     }
diff --git a/src/com/google/javascript/jscomp/AmbiguateProperties.java b/src/com/google/javascript/jscomp/AmbiguateProperties.java
index c3d05c61..14fe1c32 100644
--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java
+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
@@ -207,7 +207,6 @@ class AmbiguateProperties implements CompilerPass {
     for (Property p : propertyMap.values()) {
       if (!p.skipAmbiguating) {
         ++numRenamedPropertyNames;
-        computeRelatedTypes(p.type);
         propsByFreq.add(p);
       } else {
         ++numSkippedPropertyNames;
@@ -248,6 +247,17 @@ class AmbiguateProperties implements CompilerPass {
                 + numSkippedPropertyNames + " properties.");
   }
 
+  private BitSet getRelatedTypesOnNonUnion(JSType type) {
+    // All of the types we encounter should have been added to the
+    // relatedBitsets via computeRelatedTypes.
+    if (relatedBitsets.containsKey(type)) {
+      return relatedBitsets.get(type);
+    } else {
+      throw new RuntimeException("Related types should have been computed for"
+                                 + " type: " + type + " but have not been.");
+    }
+  }
+
   /** Add supertypes of the type to its JSTypeBitSet of related types. */
   private void computeRelatedTypes(JSType type) {
     if (type instanceof UnionType) {
@@ -342,7 +352,7 @@ class AmbiguateProperties implements CompilerPass {
       if (typesRelatedToSet.intersects(prop.typesSet)) {
         return false;
       }
-      return !getRelated(prop.type).intersects(typesInSet);
+      return !prop.relatedTypesSet.intersects(typesInSet);
     }
 
     /**
@@ -352,7 +362,7 @@ class AmbiguateProperties implements CompilerPass {
      */
     public void addNode(Property prop) {
       typesInSet.or(prop.typesSet);
-      typesRelatedToSet.or(getRelated(prop.type));
+      typesRelatedToSet.or(prop.relatedTypesSet);
     }
 
     /**
@@ -363,28 +373,21 @@ class AmbiguateProperties implements CompilerPass {
       JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());
       if (type instanceof UnionType) {
         for (JSType alt : ((UnionType) type).getAlternates()) {
-          getRelatedTypesOnNonUnion(alt, relatedTypes);
+          intersectRelatedTypesOnNonUnion(alt, relatedTypes);
         }
       } else {
-        getRelatedTypesOnNonUnion(type, relatedTypes);
+        intersectRelatedTypesOnNonUnion(type, relatedTypes);
       }
       return relatedTypes;
     }
 
     /**
-     * Finds all types related to the provided type and returns a BitSet with
-     * their bits to true.  Expects a non-union type.
+     * Finds all types related to the provided type and intersects them with
+     * the given BitSet. Expects a non-union type.
      */
-    private void getRelatedTypesOnNonUnion(
+    private void intersectRelatedTypesOnNonUnion(
         JSType type, JSTypeBitSet relatedTypes) {
-      // All of the types we encounter should have been added to the
-      // relatedBitsets via computeRelatedTypes.
-      if (relatedBitsets.containsKey(type)) {
-        relatedTypes.or(relatedBitsets.get(type));
-      } else {
-        throw new RuntimeException("Related types should have been computed for"
-                                   + "type: " + type + " but have not been.");
-      }
+      relatedTypes.or(getRelatedTypesOnNonUnion(type));
     }
   }
 
@@ -546,11 +549,11 @@ class AmbiguateProperties implements CompilerPass {
   /** Encapsulates the information needed for renaming a property. */
   private class Property {
     final String oldName;
-    JSType type;
     String newName;
     int numOccurrences;
     boolean skipAmbiguating;
     JSTypeBitSet typesSet = new JSTypeBitSet(intForType.size());
+    JSTypeBitSet relatedTypesSet = new JSTypeBitSet(intForType.size());
 
     Property(String name) {
       this.oldName = name;
@@ -587,29 +590,18 @@ class AmbiguateProperties implements CompilerPass {
         return;
       }
 
-      if (type == null) {
-        type = newType;
-      } else {
-        // TODO(nicksantos): This line doesn't make sense. It only works if
-        // we assume that the type hierarchy is a tree (and thus has a
-        // single root). It doesn't work with an arbitrary lattice.
-        //
-        // Consider a class Chimay that extends Beer and implements Expensive.
-        // supremum(Chimay, Expensive) == Expensive
-        // according to the lattice's supremum op (getLeastSupertype).
-        //
-        // And since related types are computed from this result, this
-        // means that we will treat Beer as unrelated to Chimay, which is
-        // clearly not correct.
-        type = type.getLeastSupertype(newType);
+      int typeInt = getIntForType(newType);
+      if (!typesSet.get(typeInt)) {
+        computeRelatedTypes(newType);
+        typesSet.set(typeInt);
+        relatedTypesSet.or(getRelatedTypesOnNonUnion(newType));
       }
-
-      typesSet.set(getIntForType(newType));
     }
   }
 
   // A BitSet that stores type info. Adds pretty-print routines.
   private class JSTypeBitSet extends BitSet {
+    private static final long serialVersionUID = 1L;
 
     private JSTypeBitSet(int size) {
       super(size);
@@ -631,7 +623,7 @@ class AmbiguateProperties implements CompilerPass {
         types.add(intForType.inverse().get(current).toString());
         from = current + 1;
       }
-      return Join.join(" && ", types);
+      return Joiner.on(" && ").join(types);
     }
   }
 }
diff --git a/src/com/google/javascript/jscomp/CoalesceVariableNames.java b/src/com/google/javascript/jscomp/CoalesceVariableNames.java
index abb36674..8888a173 100644
--- a/src/com/google/javascript/jscomp/CoalesceVariableNames.java
+++ b/src/com/google/javascript/jscomp/CoalesceVariableNames.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback;
@@ -26,12 +26,12 @@ import com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
 import com.google.javascript.jscomp.Scope.Var;
+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
 import com.google.javascript.jscomp.graph.GraphColoring;
+import com.google.javascript.jscomp.graph.GraphColoring.GreedyGraphColoring;
 import com.google.javascript.jscomp.graph.GraphNode;
 import com.google.javascript.jscomp.graph.LinkedUndirectedGraph;
 import com.google.javascript.jscomp.graph.UndiGraph;
-import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
-import com.google.javascript.jscomp.graph.GraphColoring.GreedyGraphColoring;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 
@@ -173,7 +173,7 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
         return;
       }
       
-      pseudoName = Join.join("_", allMergedNames);
+      pseudoName = Joiner.on("_").join(allMergedNames);
       
       while (t.getScope().isDeclared(pseudoName, true)) {
         pseudoName += "$";
diff --git a/src/com/google/javascript/jscomp/ConcreteType.java b/src/com/google/javascript/jscomp/ConcreteType.java
index cea168f1..81d8f417 100644
--- a/src/com/google/javascript/jscomp/ConcreteType.java
+++ b/src/com/google/javascript/jscomp/ConcreteType.java
@@ -15,11 +15,10 @@
  */
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-
 import com.google.javascript.jscomp.DataFlowAnalysis.LatticeElement;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
@@ -631,7 +630,7 @@ abstract class ConcreteType implements LatticeElement {
       }
       Collections.sort(names);
 
-      return "(" + Join.join(",", names) + ")";
+      return "(" + Joiner.on(",").join(names) + ")";
     }
   }
 
diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index d5a6b13a..3620dab7 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
@@ -201,12 +201,12 @@ final class NameAnalyzer implements CompilerPass {
 
       if (refersTo.size() > 0) {
         out.append("\n - REFERS TO: ");
-        out.append(Join.join(", ", refersTo));
+        out.append(Joiner.on(", ").join(refersTo));
       }
 
       if (referencedBy.size() > 0) {
         out.append("\n - REFERENCED BY: ");
-        out.append(Join.join(", ", referencedBy));
+        out.append(Joiner.on(", ").join(referencedBy));
       }
       return out.toString();
     }
diff --git a/src/com/google/javascript/jscomp/ReplaceCssNames.java b/src/com/google/javascript/jscomp/ReplaceCssNames.java
index 8603411e..1ecbf07c 100644
--- a/src/com/google/javascript/jscomp/ReplaceCssNames.java
+++ b/src/com/google/javascript/jscomp/ReplaceCssNames.java
@@ -17,14 +17,14 @@
 package com.google.javascript.jscomp;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Join;
-import javax.annotation.Nullable;
+import com.google.common.base.Joiner;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 
 import java.util.Map;
 
+import javax.annotation.Nullable;
 
 /**
  * ReplaceCssNames replaces occurrences of goog.getCssName('foo') with a shorter
@@ -195,7 +195,7 @@ class ReplaceCssNames implements CompilerPass {
           }
         }
         if (symbolMap != null) {
-          n.setString(Join.join("-", parts));
+          n.setString(Joiner.on("-").join(parts));
         }
       }
     }
diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index 8606b203..9d2f7dda 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -505,19 +505,20 @@ final class TypedScopeCreator implements ScopeCreator {
                 lvalueNode.getFirstChild().getQualifiedName());
             if (var != null) {
               ObjectType ownerType = ObjectType.cast(var.getType());
+              FunctionType propType = null;
               if (ownerType != null) {
-                String propName = lvalueNode.getLastChild().getString();
-                JSType propType = ownerType.getPropertyType(propName);
-                if (propType instanceof FunctionType) {
-                  functionType =
-                      new FunctionTypeBuilder(
-                          name, compiler, errorRoot, sourceName, scope)
-                      .setSourceNode(fnRoot)
-                      .inferFromOverriddenFunction(
-                          (FunctionType) propType, parametersNode)
-                      .inferThisType(info, owner)
-                      .buildAndRegister();
-                }
+                propType = findOverriddenFunction(
+                    ownerType, lvalueNode.getLastChild().getString());
+              }
+
+              if (propType != null) {
+                functionType =
+                    new FunctionTypeBuilder(
+                        name, compiler, errorRoot, sourceName, scope)
+                    .setSourceNode(fnRoot)
+                    .inferFromOverriddenFunction(propType, parametersNode)
+                    .inferThisType(info, owner)
+                    .buildAndRegister();
               }
             }
           }
@@ -546,6 +547,31 @@ final class TypedScopeCreator implements ScopeCreator {
       return functionType;
     }
 
+    /**
+     * Find the function that's being overridden on this type, if any.
+     */
+    private FunctionType findOverriddenFunction(
+        ObjectType ownerType, String propName) {
+      // First, check to see if the property is implemented
+      // on a superclass.
+      JSType propType = ownerType.getPropertyType(propName);
+      if (propType instanceof FunctionType) {
+        return (FunctionType) propType;
+      } else {
+        // If it's not, then check to see if it's implemented
+        // on an implemented interface.
+        for (ObjectType iface :
+                 ownerType.getCtorImplementedInterfaces()) {
+          propType = iface.getPropertyType(propName);
+          if (propType instanceof FunctionType) {
+            return (FunctionType) propType;
+          }
+        }
+      }
+
+      return null;
+    }
+
     /**
      * Gets an enum type. If the definition is correct, the object literal used
      * to define the enum is traversed to gather the elements name, and this
diff --git a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
index cc33a73b..7f40a08b 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
@@ -89,7 +89,7 @@ public class FunctionPrototypeType extends PrototypeObjectType {
   }
 
   @Override
-  Iterable<ObjectType> getCtorImplementedInterfaces() {
+  public Iterable<ObjectType> getCtorImplementedInterfaces() {
     return getOwnerFunction().getImplementedInterfaces();
   }
 }
diff --git a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
index 99381d17..ace75281 100644
--- a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
@@ -173,7 +173,7 @@ public final class InstanceObjectType extends PrototypeObjectType {
   }
 
   @Override
-  Iterable<ObjectType> getCtorImplementedInterfaces() {
+  public Iterable<ObjectType> getCtorImplementedInterfaces() {
     return getConstructor().getImplementedInterfaces();
   }
 }
diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
index 55f93a7b..d6f65507 100644
--- a/src/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
@@ -444,7 +444,7 @@ public abstract class ObjectType extends JSType {
    * Gets the interfaces implemented by the ctor associated with this type.
    * Intended to be overridden by subclasses.
    */
-  Iterable<ObjectType> getCtorImplementedInterfaces() {
+  public Iterable<ObjectType> getCtorImplementedInterfaces() {
     return ImmutableSet.of();
   }
 }
diff --git a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
index 58ee7f29..40877dc0 100644
--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
@@ -151,7 +151,7 @@ class ProxyObjectType extends ObjectType {
   }
 
   @Override
-  Iterable<ObjectType> getCtorImplementedInterfaces() {
+  public Iterable<ObjectType> getCtorImplementedInterfaces() {
     return referencedType.getCtorImplementedInterfaces();
   }
 
diff --git a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
index d6563d09..540cd782 100644
--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
@@ -404,4 +404,30 @@ public class AmbiguatePropertiesTest extends CompilerTestCase {
         + "(new Bar).b;";
     test(js, output);
   }
+
+  public void testImplementsAndExtends() {
+    String js = ""
+        + "/** @interface */ function Foo() {}\n"
+        + "/**\n"
+        + " * @constructor\n"
+        + " */\n"
+        + "function Bar(){}\n"
+        + "Bar.prototype.y = function() { return 3; };\n"
+        + "/**\n"
+        + " * @constructor\n"
+        + " * @extends {Bar}\n"
+        + " * @implements {Foo}\n"
+        + " */\n"
+        + "function SubBar(){ }\n"
+        + "/** @param {Foo} x */ function f(x) { x.z = 3; }\n"
+        + "/** @param {SubBar} x */ function g(x) { x.z = 3; }";
+    String output = ""
+        + "function Foo(){}\n"
+        + "function Bar(){}\n"
+        + "Bar.prototype.b = function() { return 3; };\n"
+        + "function SubBar(){}\n"
+        + "function f(x) { x.a = 3; }\n"
+        + "function g(x) { x.a = 3; }";
+    test(js, output);
+  }
 }
diff --git a/test/com/google/javascript/jscomp/CompilerRunnerTest.java b/test/com/google/javascript/jscomp/CompilerRunnerTest.java
index 599bcc21..66735304 100644
--- a/test/com/google/javascript/jscomp/CompilerRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CompilerRunnerTest.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
 import com.google.common.flags.Flags;
 import com.google.javascript.rhino.Node;
@@ -208,8 +208,8 @@ public class CompilerRunnerTest extends TestCase {
   private void test(String[] original, String[] compiled) {
     Compiler compiler = compile(original);
     assertEquals("Expected no warnings or errors\n" +
-        "Errors: \n" + Join.join("\n", compiler.getErrors()) +
-        "Warnings: \n" + Join.join("\n", compiler.getWarnings()),
+        "Errors: \n" + Joiner.on("\n").join(compiler.getErrors()) +
+        "Warnings: \n" + Joiner.on("\n").join(compiler.getWarnings()),
         0, compiler.getErrors().length + compiler.getWarnings().length);
 
     Node root = compiler.getRoot().getLastChild();
diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index fba1ad54..871ae51b 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CodeChangeHandler.RecentChange;
 import com.google.javascript.rhino.Node;
@@ -611,7 +611,7 @@ public abstract class CompilerTestCase extends TestCase  {
 
     Node root = compiler.parseInputs();
     assertTrue("Unexpected parse error(s): " +
-        Join.join("\n", compiler.getErrors()), root != null);
+        Joiner.on("\n").join(compiler.getErrors()), root != null);
 
     Node externsRoot = root.getFirstChild();
     Node mainRoot = root.getLastChild();
@@ -673,7 +673,7 @@ public abstract class CompilerTestCase extends TestCase  {
 
     if (error == null) {
       assertEquals(
-          "Unexpected error(s): " + Join.join("\n", compiler.getErrors()),
+          "Unexpected error(s): " + Joiner.on("\n").join(compiler.getErrors()),
           0, compiler.getErrorCount());
 
       // Verify the symbol table.
@@ -693,13 +693,13 @@ public abstract class CompilerTestCase extends TestCase  {
         assertEquals(expectedSymbolTableError, stErrors[0].getType());
       } else {
         assertEquals("Unexpected symbol table error(s): " +
-            Join.join("\n", stErrors),
+            Joiner.on("\n").join(stErrors),
             0, stErrors.length);
       }
 
       if (warning == null) {
         assertEquals(
-            "Unexpected warning(s): " + Join.join("\n", aggregateWarnings),
+            "Unexpected warning(s): " + Joiner.on("\n").join(aggregateWarnings),
             0, aggregateWarningCount);
       } else {
         assertEquals("There should be one warning, repeated " + numRepetitions +
@@ -746,7 +746,8 @@ public abstract class CompilerTestCase extends TestCase  {
             "\nResult: " + compiler.toSource(mainRoot) +
             "\n" + explanation, explanation);
       } else if (expected != null) {
-        assertEquals(Join.join("", expected), compiler.toSource(mainRoot));
+        assertEquals(
+            Joiner.on("").join(expected), compiler.toSource(mainRoot));
       }
 
       // Verify normalization is not invalidated.
@@ -799,7 +800,7 @@ public abstract class CompilerTestCase extends TestCase  {
     compiler.init(externsInputs, inputs, getOptions());
     Node root = compiler.parseInputs();
     assertTrue("Unexpected parse error(s): " +
-        Join.join("\n", compiler.getErrors()), root != null);
+        Joiner.on("\n").join(compiler.getErrors()), root != null);
     Node externsRoot = root.getFirstChild();
     Node mainRoot = externsRoot.getNext();
     // Only run the normalize pass, if asked.
diff --git a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
index ce3d95e2..c4d2bcb8 100644
--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CheckLevel;
@@ -58,14 +58,14 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
    * Combine source strings using '\n' as the separator.
    */
   private static String newlineJoin(String ... parts) {
-    return Join.join("\n", parts);
+    return Joiner.on("\n").join(parts);
   }
 
   /**
    * Combine source strings using ';' as the separator.
    */
   private static String semicolonJoin(String ... parts) {
-    return Join.join(";", parts);
+    return Joiner.on(";").join(parts);
   }
 
   /**
@@ -592,7 +592,7 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
         if (nameNode != null) {
           JSType type = node.getJSType();
           typeInformation.add(
-              Join.join("",
+              Joiner.on("").join(
                         Token.name(node.getType()),
                         " ",
                         nameNode.getQualifiedName(),
diff --git a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
index 00258fea..cd34115e 100644
--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
@@ -15,7 +15,7 @@
  */
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
@@ -30,7 +30,6 @@ import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
 
-
 /**
  * Unit test for the Compiler DisambiguateProprties pass.
  *
@@ -941,7 +940,7 @@ public class DisambiguatePropertiesTest extends CompilerTestCase {
 
     Node root = compiler.parseInputs();
     assertTrue("Unexpected parse error(s): " +
-        Join.join("\n", compiler.getErrors()), root != null);
+        Joiner.on("\n").join(compiler.getErrors()), root != null);
 
     Node externsRoot = root.getFirstChild();
     Node mainRoot = externsRoot.getNext();
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index ffc23d82..4607a4a7 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.base.Pair;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.CheckLevel;
@@ -30,7 +30,6 @@ import com.google.javascript.rhino.jstype.ObjectType;
 
 import java.util.Arrays;
 
-
 /**
  * Tests {@link TypeCheck}.
  *
@@ -3904,6 +3903,17 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: boolean");
   }
 
+  public void testIssue86() throws Exception {
+    testTypes(
+        "/** @interface */ function I() {}" +
+        "/** @return {number} */ I.prototype.get = function(){};" +
+        "/** @constructor \n * @implements {I} */ function F() {}" +
+        "/** @override */ F.prototype.get = function() { return true; };",
+        "inconsistent return type\n" +
+        "found   : boolean\n" +
+        "required: number");
+  }
+
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
@@ -6594,7 +6604,8 @@ public class TypeCheckTest extends CompilerTypeTestCase {
     externAndJsRoot.setIsSyntheticBlock(true);
 
     assertEquals("parsing error: " +
-        Join.join(", ", compiler.getErrors()), 0, compiler.getErrorCount());
+        Joiner.on(", ").join(compiler.getErrors()),
+        0, compiler.getErrorCount());
 
     // For processing goog.addDependency for forward typedefs.
     new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)
@@ -6614,7 +6625,8 @@ public class TypeCheckTest extends CompilerTypeTestCase {
 
     if (description == null) {
       assertEquals(
-          "unexpected warning(s) : " + Join.join(", ", compiler.getWarnings()),
+          "unexpected warning(s) : " +
+          Joiner.on(", ").join(compiler.getWarnings()),
           0, compiler.getWarningCount());
     } else {
       assertEquals(1, compiler.getWarningCount());
@@ -6639,7 +6651,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
           new JSError[errors.length - 1]);
     }
     if (errors.length > 0) {
-      fail("unexpected error(s):\n" + Join.join("\n", errors));
+      fail("unexpected error(s):\n" + Joiner.on("\n").join(errors));
     }
 
     JSError[] warnings = compiler.getWarnings();
@@ -6650,7 +6662,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
           new JSError[warnings.length - 1]);
     }
     if (warnings.length > 0) {
-      fail("unexpected warnings(s):\n" + Join.join("\n", warnings));
+      fail("unexpected warnings(s):\n" + Joiner.on("\n").join(warnings));
     }
   }
 
@@ -6681,7 +6693,8 @@ public class TypeCheckTest extends CompilerTypeTestCase {
     externAndJsRoot.setIsSyntheticBlock(true);
 
     assertEquals("parsing error: " +
-        Join.join(", ", compiler.getErrors()), 0, compiler.getErrorCount());
+        Joiner.on(", ").join(compiler.getErrors()),
+        0, compiler.getErrorCount());
 
     Scope s = makeTypeCheck().processForTesting(externsNode, n);
     return new Pair<Node, Scope>(n, s);
diff --git a/test/com/google/javascript/jscomp/TypeInferenceTest.java b/test/com/google/javascript/jscomp/TypeInferenceTest.java
index 38fdf96d..fd17e5a8 100644
--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java
+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java
@@ -29,16 +29,16 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
-import com.google.common.base.Join;
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState;
-import com.google.javascript.rhino.jstype.JSType;
+import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.jstype.EnumType;
 import com.google.javascript.rhino.jstype.FunctionType;
+import com.google.javascript.rhino.jstype.JSType;
 import com.google.javascript.rhino.jstype.JSTypeNative;
 import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.StaticSlot;
-import com.google.javascript.rhino.Node;
 
 import junit.framework.TestCase;
 
@@ -76,7 +76,8 @@ public class TypeInferenceTest extends TestCase {
     // Parse the body of the function.
     Node n = compiler.parseTestCode("function() {" + js + "}");
     assertEquals("parsing error: " +
-        Join.join(", ", compiler.getErrors()), 0, compiler.getErrorCount());
+        Joiner.on(", ").join(compiler.getErrors()),
+        0, compiler.getErrorCount());
     n = n.getFirstChild();
     // Create the scope with the assumptions.
     Scope assumedScope =
