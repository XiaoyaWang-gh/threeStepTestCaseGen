diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 3d4951fa..8bee886d 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -117,8 +117,9 @@ class Normalize implements CompilerPass {
 
   @Override
   public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root,
-        new NormalizeStatements(compiler, assertOnChange));
+    new NodeTraversal(
+        compiler, new NormalizeStatements(compiler, assertOnChange))
+        .traverseRoots(externs, root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
@@ -348,7 +349,7 @@ class Normalize implements CompilerPass {
      */
     private void annotateConstantsByConvention(Node n, Node parent) {
       Preconditions.checkState(
-          n.getType() == Token.NAME 
+          n.getType() == Token.NAME
           || n.getType() == Token.STRING
           || n.getType() == Token.GET
           || n.getType() == Token.SET);
diff --git a/src/com/google/javascript/jscomp/VarCheck.java b/src/com/google/javascript/jscomp/VarCheck.java
index c8196b12..f8ebfa33 100644
--- a/src/com/google/javascript/jscomp/VarCheck.java
+++ b/src/com/google/javascript/jscomp/VarCheck.java
@@ -218,6 +218,7 @@ class VarCheck extends AbstractPostOrderCallback implements CompilerPass {
     getSynthesizedExternsRoot().addChildToBack(
         new Node(Token.VAR, nameNode));
     varsToDeclareInExterns.remove(varName);
+    compiler.reportCodeChange();
   }
 
   /**
diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index d0cf9fc1..b4124163 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -87,6 +87,11 @@ public abstract class CompilerTestCase extends TestCase  {
    */
   private boolean acceptES5 = true;
 
+  /**
+   * Whether externs changes should be allowed for this pass.
+   */
+  private boolean allowExternsChanges = false;
+
   /**
    * Constructs a test.
    *
@@ -190,6 +195,13 @@ public abstract class CompilerTestCase extends TestCase  {
     this.acceptES5 = acceptES5;
   }
 
+  /**
+   * Whether to allow externs changes.
+   */
+  protected void allowExternsChanges(boolean allowExternsChanges) {
+    this.allowExternsChanges = allowExternsChanges;
+  }
+
   /**
    * Perform type checking before running the test pass. This will check
    * for type errors and annotate nodes with type information.
@@ -616,7 +628,8 @@ public abstract class CompilerTestCase extends TestCase  {
    * @param error Expected error, or null if no error is expected
    * @param warning Expected warning, or null if no warning is expected
    */
-  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {
+  public void testSame(
+      String[] js, DiagnosticType error, DiagnosticType warning) {
     test(js, js, error, warning);
   }
 
@@ -803,7 +816,20 @@ public abstract class CompilerTestCase extends TestCase  {
         normalizeActualCode(compiler, externsRootClone, mainRootClone);
       }
 
-      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {
+      boolean codeChange = !mainRootClone.checkTreeEqualsSilent(mainRoot);
+      boolean externsChange = !externsRootClone
+          .checkTreeEqualsSilent(externsRoot);
+
+      // Generally, externs should not be change by the compiler passes.
+      if (externsChange && !allowExternsChanges) {
+        String explanation = externsRootClone.checkTreeEquals(externsRoot);
+        fail("Unexpected changes to externs" +
+            "\nExpected: " + compiler.toSource(externsRootClone) +
+            "\nResult: " + compiler.toSource(externsRoot) +
+            "\n" + explanation);
+      }
+
+      if (!codeChange && !externsChange) {
         assertFalse(
             "compiler.reportCodeChange() was called " +
             "even though nothing changed",
diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
index fe21010b..adbfc8d9 100644
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -381,6 +381,11 @@ public class NormalizeTest extends CompilerTestCase {
          "}");
   }
 
+  public void testIssue() {
+    super.allowExternsChanges(true);
+    test("var a,b,c; var a,b", "a(), b()", "a(), b()", null, null);
+  }
+
   public void testNormalizeSyntheticCode() {
     Compiler compiler = new Compiler();
     compiler.init(
@@ -428,7 +433,7 @@ public class NormalizeTest extends CompilerTestCase {
 
   public void testGetterPropertyIsConstant() throws Exception {
     testSame("var a = { get CONST() {return 3} }; " +
-    		 "var b = a.CONST;");
+             "var b = a.CONST;");
     Node n = getLastCompiler().getRoot();
 
     Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);
diff --git a/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java b/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java
index 6e481c09..a5d110c9 100644
--- a/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java
+++ b/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java
@@ -31,6 +31,11 @@ public class ObjectPropertyStringPreprocessTest extends CompilerTestCase {
     return 1;
   }
 
+  @Override
+  protected void setUp() {
+    super.allowExternsChanges(true);
+  }
+
   public void testDeclaration() {
     test("goog.testing.ObjectPropertyString = function() {}",
          "JSCompiler_ObjectPropertyString = function() {}");
diff --git a/test/com/google/javascript/jscomp/VarCheckTest.java b/test/com/google/javascript/jscomp/VarCheckTest.java
index d62d33d1..438c3497 100644
--- a/test/com/google/javascript/jscomp/VarCheckTest.java
+++ b/test/com/google/javascript/jscomp/VarCheckTest.java
@@ -39,6 +39,7 @@ public class VarCheckTest extends CompilerTestCase {
   @Override
   protected void setUp() throws Exception {
     super.setUp();
+    super.allowExternsChanges(true);
     strictModuleDepErrorLevel = CheckLevel.OFF;
     externValidationErrorLevel = null;
     sanityCheck = false;
