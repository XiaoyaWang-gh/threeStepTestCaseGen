diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
index 2c836832..3394fa62 100644
--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -181,7 +181,8 @@ final class FunctionTypeBuilder {
       // create interfaces JSType, ObjectType, FunctionType etc and have
       // separate implementation instead of the class hierarchy, so that
       // union types can also be object types, etc.
-      if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {
+      if (!type.restrictByNotNullOrUndefined().isSubtype(
+              typeRegistry.getNativeType(OBJECT_TYPE))) {
         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());
         return false;
       }
diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index cf2d3e86..de1d1c23 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -867,8 +867,19 @@ public class FunctionType extends PrototypeObjectType {
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
+    //
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
+    //
+    // TODO(nicksantos): In ES3, the runtime coerces "null" to the global
+    // activation object. In ES5, it leaves it as null. Just punt on this
+    // issue for now by coercing out null. This is complicated by the
+    // fact that when most people write @this {Foo}, they really don't
+    // mean "nullable Foo". For certain tags (like @extends) we de-nullify
+    // the name for them.
     JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (maybeTypeOfThis != null) {
+      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
+    }
     if (maybeTypeOfThis instanceof ObjectType) {
       typeOfThis = (ObjectType) maybeTypeOfThis;
     }
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index cc8ecaf6..6b2baea8 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2624,9 +2624,9 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   public void testBackwardsTypedefUse3() throws Exception {
     testTypes(
         "/** @this {MyTypedef} */ function f() {}" +
-        "/** @typedef {(Date|Array)} */ var MyTypedef;",
+        "/** @typedef {(Date|string)} */ var MyTypedef;",
         "@this type of a function must be an object\n" +
-        "Actual type: (Array|Date|null)");
+        "Actual type: (Date|null|string)");
   }
 
   public void testBackwardsTypedefUse4() throws Exception {
@@ -2664,6 +2664,27 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "/** @typedef {Object} */ goog.MyTypedef;");
   }
 
+  public void testBackwardsTypedefUse8() throws Exception {
+    // Tehnically, this isn't quite right, because the JS runtime
+    // will coerce null -> the global object. But we'll punt on that for now.
+    testTypes(
+        "/** @param {!Array} x */ function g(x) {}" +
+        "/** @this {goog.MyTypedef} */ function f() { g(this); }" +
+        "var goog = {};" +
+        "/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;");
+  }
+
+  public void testBackwardsTypedefUse9() throws Exception {
+    testTypes(
+        "/** @param {!Array} x */ function g(x) {}" +
+        "/** @this {goog.MyTypedef} */ function f() { g(this); }" +
+        "var goog = {};" +
+        "/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;",
+        "actual parameter 1 of g does not match formal parameter\n" +
+        "found   : Error\n" +
+        "required: Array");
+  }
+
   public void testBackwardsConstructor1() throws Exception {
     testTypes(
         "function f() { (new Foo(true)); }" +
