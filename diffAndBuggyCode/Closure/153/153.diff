diff --git a/externs/ie_event.js b/externs/ie_event.js
index 0149f95b..3a0d4f80 100644
--- a/externs/ie_event.js
+++ b/externs/ie_event.js
@@ -13,137 +13,61 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
- 
 /**
  * @fileoverview Definitions for all the extensions over the
  *  W3C's event specification by IE in JScript. This file depends on
- *  w3c_event.js.
+ *  w3c_event.js. The whole file has NOT been fully type annotated.
  *
- * @see http://msdn.microsoft.com/en-us/library/ms535863.aspx
  * @externs
  */
 
-/** @type {string} */
 Event.prototype.Abstract;
-
-/** @type {boolean} */
 Event.prototype.altKey;
-
-/** @type {boolean} */
 Event.prototype.altLeft;
-
-/** @type {string} */
 Event.prototype.Banner;
-
-/** @type {number} */
 Event.prototype.button;
-
-/** @type {boolean} */
 Event.prototype.cancelBubble;
-
-/** @type {number} */
 Event.prototype.clientX;
-
-/** @type {number} */
 Event.prototype.clientY;
-
 /**
- * @see http://msdn.microsoft.com/en-us/library/ms535220.aspx
- * @type {(ClipboardData|undefined)}
+ * @see http://msdn.microsoft.com/en-us/library/ms535220(VS.85).aspx
+ * @type {ClipboardData|undefined}
  */
 Event.prototype.clipboardData;
-
-/** @type {boolean} */
 Event.prototype.contentOverflow;
-
-/** @type {boolean} */
 Event.prototype.ctrlKey;
-
-/** @type {boolean} */
 Event.prototype.ctrlLeft;
-
-/** @type {string} */
 Event.prototype.data;
-
-/** @type {string} */
 Event.prototype.dataFld;
-
 Event.prototype.domain;
-
-/** @type {Element} */
 Event.prototype.fromElement;
-
-/** @type {number} */
 Event.prototype.keyCode;
-
-/** @type {string} */
 Event.prototype.MoreInfo;
-
-/** @type {string} */
 Event.prototype.nextPage;
-
-/** @type {number} */
 Event.prototype.offsetX;
-
-/** @type {number} */
 Event.prototype.offsetY;
-
-/** @type {string} */
 Event.prototype.propertyName;
-
-/** @type {string} */
 Event.prototype.qualifier;
-
-/** @type {number} */
 Event.prototype.reason;
-
-/** @type {Object.<*,*>} */
 Event.prototype.recordset;
-
-/** @type {boolean} */
 Event.prototype.repeat;
-
-/** @type {(boolean|string|undefined)} */
+/**
+ * @type {boolean|string|undefined}
+ */
 Event.prototype.returnValue;
-
-/** @type {string} */
 Event.prototype.saveType;
-
 Event.prototype.scheme;
-
-/** @type {number} */
 Event.prototype.screenX;
-
-/** @type {number} */
 Event.prototype.screenY;
-
-/** @type {boolean} */
 Event.prototype.shiftKey;
-
-/** @type {boolean} */
 Event.prototype.shiftLeft;
-
-/** @type {Window} */
 Event.prototype.source;
-
-/** @type {Element} */
 Event.prototype.srcElement;
-
 Event.prototype.srcFilter;
-
-/** @type {string} */
 Event.prototype.srcUrn;
-
-/** @type {Element} */
 Event.prototype.toElement;
-
+Event.prototype.type;
 Event.prototype.userName;
-
-/** @type {number} */
 Event.prototype.wheelDelta;
-
-/** @type {number} */
 Event.prototype.x;
-
-/** @type {number} */
-Event.prototype.y;
\ No newline at end of file
+Event.prototype.y;
diff --git a/src/com/google/javascript/jscomp/AliasExternals.java b/src/com/google/javascript/jscomp/AliasExternals.java
index f6069c65..195a0ccc 100644
--- a/src/com/google/javascript/jscomp/AliasExternals.java
+++ b/src/com/google/javascript/jscomp/AliasExternals.java
@@ -109,12 +109,9 @@ class AliasExternals implements CompilerPass {
   private final Map<Node, Node> replacementMap =
     new IdentityHashMap<Node, Node>();
 
-  /** Map of all globals that we may aliasing */
+  /** Map of all globals that we may alias */
   private final Map<String, Symbol> globals = Maps.newHashMap();
 
-  /** Holds all of the globals that can be aliased to GLOBAL_ */
-  private final List<Node> globalUses = Lists.newArrayList();
-
   /** Reference to JS Compiler */
   private final AbstractCompiler compiler;
 
@@ -590,11 +587,10 @@ class AliasExternals implements CompilerPass {
     }
 
     // Change the references to the globals
-    for (Node globalUse : globalUses) {
-      replaceGlobalUse(globalUse);
-    }
-
     for (Symbol global : globals.values()) {
+      for (Node globalUse : global.uses) {
+        replaceGlobalUse(globalUse);
+      }
       if (global.aliasAccessor) {
         addGlobalAliasNode(global,
                            getAddingRoot(global.deepestModuleAccess));
@@ -659,6 +655,13 @@ class AliasExternals implements CompilerPass {
 
         Symbol global = globals.get(name);
         if (global != null) {
+          // If a variable is declared in both externs and normal source,
+          // don't alias it.
+          if (n.getParent().getType() == Token.VAR ||
+              n.getParent().getType() == Token.FUNCTION) {
+            globals.remove(name);
+          }
+
           boolean isFirst = parent.getFirstChild() == n;
           // If a global is being assigned to or otherwise modified, then we
           // don't want to alias it.
@@ -674,7 +677,7 @@ class AliasExternals implements CompilerPass {
             global.recordAccessor(t);
           }
 
-          globalUses.add(n);
+          global.uses.add(n);
         }
       }
     }
@@ -748,6 +751,8 @@ class AliasExternals implements CompilerPass {
     JSModule deepestModuleAccess = null;
     JSModule deepestModuleMutate = null;
 
+    List<Node> uses = Lists.newArrayList();
+
     private Symbol(String name, boolean isConstant) {
       this.name = name;
       this.isConstant = isConstant;
diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 4217f393..c14ac8f1 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -18,6 +18,7 @@ package com.google.javascript.jscomp;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.MakeDeclaredNamesUnique.BoilerplateRenamer;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.jscomp.NodeTraversal.Callback;
@@ -27,6 +28,7 @@ import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 
 import java.util.Map;
+import java.util.Set;
 
 /**
  * The goal with this pass is to simplify the other passes,
@@ -626,16 +628,31 @@ class Normalize implements CompilerPass {
   private final class DuplicateDeclarationHandler implements
       SyntacticScopeCreator.RedeclarationHandler {
 
+    private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();
+
     /**
      * Remove duplicate VAR declarations encountered discovered during
      * scope creation.
      */
     @Override
     public void onRedeclaration(
-        Scope s, String name, Node n, Node parent, Node gramps,
-        Node nodeWithLineNumber) {
+        Scope s, String name, Node n, CompilerInput input) {
       Preconditions.checkState(n.getType() == Token.NAME);
+      Node parent = n.getParent();
       Var v = s.getVar(name);
+
+      if (v != null && s.isGlobal()) {
+        // We allow variables to be duplicate declared if one
+        // declaration appears in source and the other in externs.
+        // This deals with issues where a browser built-in is declared
+        // in one browser but not in another.
+        if (v.isExtern() && !input.isExtern()) {
+          if (hasOkDuplicateDeclaration.add(v)) {
+            return;
+          }
+        }
+      }
+
       // If name is "arguments", Var maybe null.
       if (v != null && v.getParentNode().getType() == Token.CATCH) {
         // Redeclaration of a catch expression variable is hard to model
@@ -657,7 +674,7 @@ class Normalize implements CompilerPass {
             name);
         compiler.report(
             JSError.make(
-                NodeUtil.getSourceName(nodeWithLineNumber), nodeWithLineNumber,
+                input.getName(), n,
                 CATCH_BLOCK_VAR_ERROR, name));
       } else if (v != null && parent.getType() == Token.FUNCTION) {
         if (v.getParentNode().getType() == Token.VAR) {
@@ -669,7 +686,7 @@ class Normalize implements CompilerPass {
       } else if (parent.getType() == Token.VAR) {
         Preconditions.checkState(parent.hasOneChild());
 
-        replaceVarWithAssignment(n, parent, gramps);
+        replaceVarWithAssignment(n, parent, parent.getParent());
       }
     }
 
diff --git a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java
index 6dfc2885..eb6e1eab 100644
--- a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java
+++ b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java
@@ -20,7 +20,6 @@ import com.google.common.base.Preconditions;
 import com.google.javascript.rhino.JSDocInfo;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
-import com.google.javascript.rhino.jstype.JSType;
 
 
 /**
@@ -92,7 +91,7 @@ class SyntacticScopeCreator implements ScopeCreator {
       // been declared in the outer scope.
       String fnName = fnNameNode.getString();
       if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {
-        declareVar(fnName, fnNameNode, n, null, null, n);
+        declareVar(fnNameNode);
       }
 
       // Args: Declare function variables
@@ -100,7 +99,7 @@ class SyntacticScopeCreator implements ScopeCreator {
       for (Node a = args.getFirstChild(); a != null;
            a = a.getNext()) {
         Preconditions.checkState(a.getType() == Token.NAME);
-        declareVar(a.getString(), a, args, n, null, n);
+        declareVar(a);
       }
 
       // Body
@@ -122,10 +121,7 @@ class SyntacticScopeCreator implements ScopeCreator {
         for (Node child = n.getFirstChild();
              child != null;) {
           Node next = child.getNext();
-          Preconditions.checkState(child.getType() == Token.NAME);
-
-          String name = child.getString();
-          declareVar(name, child, n, parent, null, n);
+          declareVar(child);
           child = next;
         }
         return;
@@ -140,7 +136,7 @@ class SyntacticScopeCreator implements ScopeCreator {
           // This is invalid, but allow it so the checks can catch it.
           return;
         }
-        declareVar(fnName, n.getFirstChild(), n, parent, null, n);
+        declareVar(n.getFirstChild());
         return;   // should not examine function's children
 
       case Token.CATCH:
@@ -152,7 +148,7 @@ class SyntacticScopeCreator implements ScopeCreator {
         final Node var = n.getFirstChild();
         final Node block = var.getNext();
 
-        declareVar(var.getString(), var, n, parent, null, n);
+        declareVar(var);
         scanVars(block, n);
         return;  // only one child to scan
 
@@ -178,8 +174,7 @@ class SyntacticScopeCreator implements ScopeCreator {
    */
   interface RedeclarationHandler {
     void onRedeclaration(
-        Scope s, String name,
-        Node n, Node parent, Node gramps, Node nodeWithLineNumber);
+        Scope s, String name, Node n, CompilerInput input);
   }
 
   /**
@@ -187,8 +182,9 @@ class SyntacticScopeCreator implements ScopeCreator {
    */
   private class DefaultRedeclarationHandler implements RedeclarationHandler {
     public void onRedeclaration(
-        Scope s, String name,
-        Node n, Node parent, Node gramps, Node nodeWithLineNumber) {
+        Scope s, String name, Node n, CompilerInput input) {
+      Node parent = n.getParent();
+
       // Don't allow multiple variables to be declared at the top level scope
       if (scope.isGlobal()) {
         Scope.Var origVar = scope.getVar(name);
@@ -209,7 +205,7 @@ class SyntacticScopeCreator implements ScopeCreator {
 
         if (!allowDupe) {
           compiler.report(
-              JSError.make(sourceName, nodeWithLineNumber,
+              JSError.make(sourceName, n,
                            VAR_MULTIPLY_DECLARED_ERROR,
                            name,
                            (origVar.input != null
@@ -220,7 +216,7 @@ class SyntacticScopeCreator implements ScopeCreator {
         // Disallow shadowing "arguments" as we can't handle with our current
         // scope modeling.
         compiler.report(
-            JSError.make(sourceName, nodeWithLineNumber,
+            JSError.make(sourceName, n,
                 VAR_ARGUMENTS_SHADOWED_ERROR));
       }
     }
@@ -229,23 +225,20 @@ class SyntacticScopeCreator implements ScopeCreator {
   /**
    * Declares a variable.
    *
-   * @param name The variable name
-   * @param n The node corresponding to the variable name (usually a NAME node)
-   * @param parent The parent node of {@code n}
-   * @param gramps The parent node of {@code parent}
+   * @param n The node corresponding to the variable name.
    * @param declaredType The variable's type, according to JSDoc
-   * @param nodeWithLineNumber The node to use to access the line number of
-   *     the variable declaration, if needed
    */
-  private void declareVar(String name, Node n, Node parent,
-                          Node gramps, JSType declaredType,
-                          Node nodeWithLineNumber) {
+  private void declareVar(Node n) {
+    Preconditions.checkState(n.getType() == Token.NAME);
+
+    CompilerInput input = compiler.getInput(sourceName);
+    String name = n.getString();
     if (scope.isDeclared(name, false)
         || (scope.isLocal() && name.equals(ARGUMENTS))) {
       redeclarationHandler.onRedeclaration(
-          scope, name, n, parent, gramps, nodeWithLineNumber);
+          scope, name, n, input);
     } else {
-      scope.declare(name, n, declaredType, compiler.getInput(sourceName));
+      scope.declare(name, n, null, input);
     }
   }
 }
diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
index 8486c20d..27b39b2f 100644
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -93,7 +93,7 @@ public class NormalizeTest extends CompilerTestCase {
 
   public void testDuplicateVarInExterns() {
     test("var extern;",
-         "/** @suppress {duplicate} */ var extern = 3;", "extern = 3;",
+         "/** @suppress {duplicate} */ var extern = 3;", "var extern = 3;",
          null, null);
   }
 
@@ -255,8 +255,12 @@ public class NormalizeTest extends CompilerTestCase {
     test("try { } catch(e) {e; try { } catch(e) {e;}};",
          "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
 
-    // Verify global redefinition of extern definition is removed.
-    test("/** @suppress {duplicate} */\nvar window;", "");
+    // Verify the 1st global redefinition of extern definition is not removed.
+    test("/** @suppress {duplicate} */\nvar window;", "var window;");
+
+    // Verify the 2nd global redefinition of extern definition is removed.
+    test("/** @suppress {duplicate} */\nvar window;" +
+         "/** @suppress {duplicate} */\nvar window;", "var window;");
 
     // Verify local masking extern made unique.
     test("function f() {var window}",
