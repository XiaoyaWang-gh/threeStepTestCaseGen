diff --git a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java
index 3e0fb1ec..3fee1a9e 100644
--- a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java
+++ b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java
@@ -140,12 +140,30 @@ class FunctionToBlockMutator {
    * @param fnNode A mutable instance of the function to be inlined.
    */
   private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {
+    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();
+    // Make variable names unique to this instance.
     NodeTraversal.traverse(
         compiler, fnNode, new MakeDeclaredNamesUnique(
             new InlineRenamer(
-                compiler.getUniqueNameIdSupplier(),
+                idSupplier,
                 "inline_",
                 isCallInLoop)));
+    // Make label names unique to this instance.
+    new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)
+        .process(null, fnNode);
+  }
+
+  static class LabelNameSupplier implements Supplier<String> {
+    final Supplier<String> idSupplier;
+
+    LabelNameSupplier(Supplier<String> idSupplier) {
+      this.idSupplier = idSupplier;
+    }
+
+    @Override
+    public String get() {
+        return "JSCompiler_inline_label_" + idSupplier.get();
+    }
   }
 
   /**
diff --git a/src/com/google/javascript/jscomp/RenameLabels.java b/src/com/google/javascript/jscomp/RenameLabels.java
index 01ad5362..28e52ee4 100644
--- a/src/com/google/javascript/jscomp/RenameLabels.java
+++ b/src/com/google/javascript/jscomp/RenameLabels.java
@@ -17,6 +17,7 @@
 package com.google.javascript.jscomp;
 
 import com.google.common.base.Preconditions;
+import com.google.common.base.Supplier;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
 import com.google.javascript.rhino.Node;
@@ -69,9 +70,31 @@ import java.util.Map;
  */
 final class RenameLabels implements CompilerPass {
   private final AbstractCompiler compiler;
+  private final Supplier<String> nameSupplier;
+  private final boolean removeUnused;
 
   RenameLabels(AbstractCompiler compiler) {
+    this(compiler, new DefaultNameSupplier(), true);
+  }
+
+  RenameLabels(
+      AbstractCompiler compiler,
+      Supplier<String> supplier,
+      boolean removeUnused) {
     this.compiler = compiler;
+    this.nameSupplier = supplier;
+    this.removeUnused = removeUnused;
+  }
+
+  static class DefaultNameSupplier implements Supplier<String> {
+    // NameGenerator is used to create safe label names.
+    final NameGenerator nameGenerator =
+        new NameGenerator(new HashSet<String>(), "", null);
+
+    @Override
+    public String get() {
+      return nameGenerator.generateNextName();
+    }
   }
 
   /**
@@ -88,10 +111,6 @@ final class RenameLabels implements CompilerPass {
     // inner scope, so a new namespace is created each time a scope is entered.
     final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();
 
-    // NameGenerator is used to create safe label names.
-    final NameGenerator nameGenerator =
-        new NameGenerator(new HashSet<String>(), "", null);
-
     // The list of generated names. Typically, the first name will be "a",
     // the second "b", etc.
     final ArrayList<String> names = new ArrayList<String>();
@@ -129,7 +148,7 @@ final class RenameLabels implements CompilerPass {
 
         // Create a new name, if needed, for this depth.
         if (names.size() < currentDepth) {
-          names.add(nameGenerator.generateNextName());
+          names.add(nameSupplier.get());
         }
 
         String newName = getNameForId(currentDepth);
@@ -193,7 +212,7 @@ final class RenameLabels implements CompilerPass {
       String name = nameNode.getString();
       LabelInfo li = getLabelInfo(name);
       // This is a label...
-      if (li.referenced) {
+      if (li.referenced || !removeUnused) {
         String newName = getNameForId(li.id);
         if (!name.equals(newName)) {
           // ... and it is used, give it the short name.
diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
index d9a413f3..2811bc05 100644
--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
@@ -383,6 +383,13 @@ public class InlineFunctionsTest extends CompilerTestCase {
         "foo();");
   }
 
+  public void testInlineFunctions31() {
+    // Don't introduce a duplicate label in the same scope
+    test("function foo(){ lab:{4;} }" +
+        "lab:{foo();}",
+        "lab:{{JSCompiler_inline_label_0:{4}}}");
+  }
+
   public void testMixedModeInlining1() {
     // Base line tests, direct inlining
     test("function foo(){return 1}" +
diff --git a/test/com/google/javascript/jscomp/RenameLabelsTest.java b/test/com/google/javascript/jscomp/RenameLabelsTest.java
index ccfa8e21..55281135 100644
--- a/test/com/google/javascript/jscomp/RenameLabelsTest.java
+++ b/test/com/google/javascript/jscomp/RenameLabelsTest.java
@@ -85,4 +85,8 @@ public class RenameLabelsTest extends CompilerTestCase {
          "a(); while (1) break;");
   }
 
+  public void testRenameReused() {
+    test("foo:{break foo}; foo:{break foo}", "a:{break a};a:{break a}");
+  }
+
 }
