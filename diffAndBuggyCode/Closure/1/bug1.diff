diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
index a0520d2c..4c84735a 100644
--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -367,7 +367,18 @@ class RemoveUnusedVars
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // TODO(johnlenz): Update type registry for function signature changes.
+    // Notice that removing unreferenced function args breaks
+    // Function.prototype.length. In advanced mode, we don't really care
+    // about this: we consider "length" the equivalent of reflecting on
+    // the function's lexical source.
+    //
+    // Rather than create a new option for this, we assume that if the user
+    // is removing globals, then it's OK to remove unused function args.
+    //
+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+    if (!removeGlobals) {
+      return;
+    }
 
     Node function = fnScope.getRootNode();
 
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 03437250..3b729294 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -151,6 +151,16 @@ public class CommandLineRunnerTest extends TestCase {
     test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
   }
 
+  public void testSimpleModeLeavesUnusedParams() {
+    args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
+    testSame("window.f = function(a) {};");
+  }
+
+  public void testAdvancedModeRemovesUnusedParams() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("window.f = function(a) {};", "window.a = function() {};");
+  }
+
   public void testCheckGlobalThisOffByDefault() {
     testSame("function f() { this.a = 3; }");
   }
@@ -464,7 +474,7 @@ public class CommandLineRunnerTest extends TestCase {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     args.add("--debug=false");
     test("function foo(a) {}",
-         "function foo() {}");
+         "function foo(a) {}");
   }
 
   public void testDebugFlag2() {
@@ -747,7 +757,7 @@ public class CommandLineRunnerTest extends TestCase {
           "goog.provide('Scotch'); var x = 3;"
          },
          new String[] {
-           "var beer = {}; function f() {}",
+           "var beer = {}; function f(a) {}",
            ""
          });
 
@@ -756,7 +766,7 @@ public class CommandLineRunnerTest extends TestCase {
           "goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}"
          },
          new String[] {
-           "var beer = {}; function f() {}",
+           "var beer = {}; function f(a) {}",
            ""
          },
          RhinoErrorReporter.TYPE_PARSE_ERROR);
diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index 5a86db17..47604bc8 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -2356,7 +2356,7 @@ public class IntegrationTest extends IntegrationTestCase {
     String result = "" +
         "function some_function() {\n" +
         "  var a, b;\n" +
-        "  any_expression && (b = external_ref, a = function() {\n" +
+        "  any_expression && (b = external_ref, a = function(a) {\n" +
         "    return b()\n" +
         "  });\n" +
         "  return{method1:function() {\n" +
diff --git a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java
index aa922570..02d13de2 100644
--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java
+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java
@@ -244,20 +244,20 @@ public class RemoveUnusedVarsTest extends CompilerTestCase {
   public void testRemoveGlobal1() {
     removeGlobal = false;
     testSame("var x=1");
-    test("var y=function(x){var z;}", "var y=function(){}");
+    test("var y=function(x){var z;}", "var y=function(x){}");
   }
 
   public void testRemoveGlobal2() {
     removeGlobal = false;
     testSame("var x=1");
-    test("function y(x){var z;}", "function y(){}");
+    test("function y(x){var z;}", "function y(x){}");
   }
 
   public void testRemoveGlobal3() {
     removeGlobal = false;
     testSame("var x=1");
     test("function x(){function y(x){var z;}y()}",
-         "function x(){function y(){}y()}");
+         "function x(){function y(x){}y()}");
   }
 
   public void testRemoveGlobal4() {
@@ -286,7 +286,7 @@ public class RemoveUnusedVarsTest extends CompilerTestCase {
          "function b(){" +
          "  a();" +
          "}",
-         "function a(){(function(){b()})(1)}" +
+         "function a(){(function(x){b()})(1)}" +
          "function b(){a()}");
   }
 
