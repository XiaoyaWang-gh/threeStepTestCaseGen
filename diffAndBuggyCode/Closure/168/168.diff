diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
index 817f7d53..ee00bb40 100644
--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -24,9 +24,12 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicate;
+import com.google.common.collect.HashMultiset;
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMultiset;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Multiset;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.rhino.IR;
@@ -779,6 +782,9 @@ final class FunctionTypeBuilder {
 
     /** Gets a list of variables whose properties are escaped. */
     Set<String> getEscapedQualifiedNames();
+
+    /** Gets the number of times each variable has been assigned. */
+    Multiset<String> getAssignedNameCounts();
   }
 
   static class UnknownFunctionContents implements FunctionContents {
@@ -818,6 +824,11 @@ final class FunctionTypeBuilder {
     public Set<String> getEscapedQualifiedNames() {
       return ImmutableSet.of();
     }
+
+    @Override
+    public Multiset<String> getAssignedNameCounts() {
+      return ImmutableMultiset.of();
+    }
   }
 
   static class AstFunctionContents implements FunctionContents {
@@ -825,6 +836,7 @@ final class FunctionTypeBuilder {
     private boolean hasNonEmptyReturns = false;
     private Set<String> escapedVarNames;
     private Set<String> escapedQualifiedNames;
+    private final Multiset<String> assignedVarNames = HashMultiset.create();
 
     AstFunctionContents(Node n) {
       this.n = n;
@@ -880,5 +892,14 @@ final class FunctionTypeBuilder {
       }
       escapedQualifiedNames.add(name);
     }
+
+    @Override
+    public Multiset<String> getAssignedNameCounts() {
+      return assignedVarNames;
+    }
+
+    void recordAssignedName(String name) {
+      assignedVarNames.add(name);
+    }
   }
 }
diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 06ea1ddf..8d784363 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -1911,6 +1911,15 @@ public final class NodeUtil {
     return n.isFunction() && !isStatement(n);
   }
 
+  /**
+   * Returns whether this is a bleeding function (an anonymous named function
+   * that bleeds into the inner scope).
+   */
+  static boolean isBleedingFunctionName(Node n) {
+    return n.isName() && !n.getString().isEmpty() &&
+        isFunctionExpression(n.getParent());
+  }
+
   /**
    * Determines if a node is a function expression that has an empty body.
    *
diff --git a/src/com/google/javascript/jscomp/Scope.java b/src/com/google/javascript/jscomp/Scope.java
index f2202da0..355315fa 100644
--- a/src/com/google/javascript/jscomp/Scope.java
+++ b/src/com/google/javascript/jscomp/Scope.java
@@ -120,8 +120,12 @@ public class Scope
     /** The enclosing scope */
     final Scope scope;
 
+    /** @see isMarkedEscaped */
     private boolean markedEscaped = false;
 
+    /** @see isMarkedAssignedExactlyOnce */
+    private boolean markedAssignedExactlyOnce = false;
+
     /**
      * Creates a variable.
      *
@@ -185,7 +189,7 @@ public class Scope
 
     /**
      * Whether this is a bleeding function (an anonymous named function
-     * that bleeds into the inner scope.
+     * that bleeds into the inner scope).
      */
     public boolean isBleedingFunction() {
       return NodeUtil.isFunctionExpression(getParentNode());
@@ -333,7 +337,12 @@ public class Scope
       return "Scope.Var " + name + "{" + type + "}";
     }
 
-    /** Record that this is escaped by an inner scope. */
+    /**
+     * Record that this is escaped by an inner scope.
+     *
+     * In other words, it's assigned in an inner scope so that it's much harder
+     * to make assertions about its value at a given point.
+     */
     void markEscaped() {
       markedEscaped = true;
     }
@@ -345,6 +354,24 @@ public class Scope
     boolean isMarkedEscaped() {
       return markedEscaped;
     }
+
+    /**
+     * Record that this is assigned exactly once..
+     *
+     * In other words, it's assigned in an inner scope so that it's much harder
+     * to make assertions about its value at a given point.
+     */
+    void markAssignedExactlyOnce() {
+      markedAssignedExactlyOnce = true;
+    }
+
+    /**
+     * Whether this is assigned exactly once.
+     * Notice that not all scope creators record this information.
+     */
+    boolean isMarkedAssignedExactlyOnce() {
+      return markedAssignedExactlyOnce;
+    }
   }
 
   /**
@@ -524,12 +551,12 @@ public class Scope
   }
 
   @Override
-  public StaticSlot<JSType> getSlot(String name) {
+  public Var getSlot(String name) {
     return getVar(name);
   }
 
   @Override
-  public StaticSlot<JSType> getOwnSlot(String name) {
+  public Var getOwnSlot(String name) {
     return vars.get(name);
   }
 
diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 0d8f993a..b68c93d5 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -609,19 +609,33 @@ class TypeInference
         // There are two situations where we don't want to use type information
         // from the scope, even if we have it.
 
-        // 1) The var is escaped in a weird way, e.g.,
+        // 1) The var is escaped and assigned in an inner scope, e.g.,
         // function f() { var x = 3; function g() { x = null } (x); }
         boolean isInferred = var.isTypeInferred();
         boolean unflowable = isInferred &&
             isUnflowable(syntacticScope.getVar(varName));
 
         // 2) We're reading type information from another scope for an
-        // inferred variable.
-        // var t = null; function f() { (t); }
-        boolean nonLocalInferredSlot =
-            isInferred &&
-            syntacticScope.getParent() != null &&
-            var == syntacticScope.getParent().getSlot(varName);
+        // inferred variable. That variable is assigned more than once,
+        // and we can't know which type we're getting.
+        //
+        // var t = null; function f() { (t); } doStuff(); t = {};
+        //
+        // Notice that this heuristic isn't perfect. For example, you might
+        // have:
+        //
+        // function f() { (t); } f(); var t = 3;
+        //
+        // In this case, we would infer the first reference to t as
+        // type {number}, even though it's undefined.
+        boolean nonLocalInferredSlot = false;
+        if (isInferred && syntacticScope.isLocal()) {
+          Var maybeOuterVar = syntacticScope.getParent().getVar(varName);
+          if (var == maybeOuterVar &&
+              !maybeOuterVar.isMarkedAssignedExactlyOnce()) {
+            nonLocalInferredSlot = true;
+          }
+        }
 
         if (!unflowable && !nonLocalInferredSlot) {
           type = var.getType();
diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index a10a0c3e..36f83466 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -51,6 +51,7 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Multiset;
 import com.google.javascript.jscomp.CodingConvention.DelegateRelationship;
 import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;
 import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;
@@ -1871,6 +1872,15 @@ final class TypedScopeCreator implements ScopeCreator {
           Preconditions.checkState(v.getScope() == scope);
           v.markEscaped();
         }
+
+        for (Multiset.Entry<String> entry :
+                 contents.getAssignedNameCounts().entrySet()) {
+          Var v = scope.getVar(entry.getElement());
+          Preconditions.checkState(v.getScope() == scope);
+          if (entry.getCount() == 1) {
+            v.markAssignedExactlyOnce();
+          }
+        }
       }
     }
 
@@ -1983,20 +1993,31 @@ final class TypedScopeCreator implements ScopeCreator {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
-      if (t.getScopeDepth() <= 2) {
-        // We only need to worry about escaped variables at depth 3.
-        // An variable escaped at depth 2 is, by definition, a global variable.
+      if (t.getScopeDepth() <= 1) {
+        // The first-order function analyzer looks at two types of variables:
+        //
+        // 1) Local variables that are assigned in inner scopes ("escaped vars")
+        //
+        // 2) Local variables that are assigned more than once.
+        //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n)) {
+      if (n.isName() && NodeUtil.isLValue(n) &&
+          // Be careful of bleeding functions, which create variables
+          // in the inner scope, not the scope where the name appears.
+          !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
+          if (ownerScope.isLocal()) {
+            data.get(ownerScope.getRootNode()).recordAssignedName(name);
+          }
+
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index f8250300..8f6be73b 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -5973,6 +5973,22 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "Property name2 never defined on rec");
   }
 
+  public void testIssue726() throws Exception {
+    testTypes(
+        "/** @constructor */ function Foo() {}" +
+        "/** @param {number} x */ Foo.prototype.bar = function(x) {};" +
+        "/** @return {!Function} */ " +
+        "Foo.prototype.getDeferredBar = function() { " +
+        "  var self = this;" +
+        "  return function() {" +
+        "    self.bar(true);" +
+        "  };" +
+        "};",
+        "actual parameter 1 of Foo.prototype.bar does not match formal parameter\n" +
+        "found   : boolean\n" +
+        "required: number");
+  }
+
   public void testIssue765() throws Exception {
     testTypes(
         "/** @constructor */" +
