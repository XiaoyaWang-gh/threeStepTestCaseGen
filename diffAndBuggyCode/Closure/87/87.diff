diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index 11f0af2e..6c4ee4a9 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -272,7 +272,7 @@ public class PeepholeSubstituteAlternateSyntax
     Node elseBranch = thenBranch.getNext();
 
     if (elseBranch == null) {
-      if (isExpressBlock(thenBranch)) {
+      if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (isPropertyAssignmentInExpression(expr)) {
           // Keep opportunities for CollapseProperties such as
@@ -353,8 +353,8 @@ public class PeepholeSubstituteAlternateSyntax
       return returnNode;
     }
 
-    boolean thenBranchIsExpressionBlock = isExpressBlock(thenBranch);
-    boolean elseBranchIsExpressionBlock = isExpressBlock(elseBranch);
+    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
+    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
 
     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
       Node thenOp = getBlockExpression(thenBranch).getFirstChild();
@@ -516,10 +516,33 @@ public class PeepholeSubstituteAlternateSyntax
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
-  private boolean isExpressBlock(Node n) {
+  private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
-        return NodeUtil.isExpressionNode(n.getFirstChild());
+        Node maybeExpr = n.getFirstChild();
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          // IE has a bug where event handlers behave differently when
+          // their return value is used vs. when their return value is in
+          // an EXPR_RESULT. It's pretty freaking weird. See:
+          // http://code.google.com/p/closure-compiler/issues/detail?id=291
+          // We try to detect this case, and not fold EXPR_RESULTs
+          // into other expressions.
+          if (maybeExpr.getFirstChild().getType() == Token.CALL) {
+            Node calledFn = maybeExpr.getFirstChild().getFirstChild();
+
+            // We only have to worry about methods with an implicit 'this'
+            // param, or this doesn't happen.
+            if (calledFn.getType() == Token.GETELEM) {
+              return false;
+            } else if (calledFn.getType() == Token.GETPROP &&
+                       calledFn.getLastChild().getString().startsWith("on")) {
+              return false;
+            }
+          }
+
+          return true;
+        }
+        return false;
       }
     }
 
@@ -530,7 +553,7 @@ public class PeepholeSubstituteAlternateSyntax
    * @return The expression node.
    */
   private Node getBlockExpression(Node n) {
-    Preconditions.checkState(isExpressBlock(n));
+    Preconditions.checkState(isFoldableExpressBlock(n));
     return n.getFirstChild();
   }
 
diff --git a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
index 1de263fe..47d3e5c3 100644
--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
@@ -562,4 +562,12 @@ public class PeepholeSubstituteAlternateSyntaxTest extends CompilerTestCase {
 
     foldSame("function f() { try{ return a } finally { a = 2 } return a; }");
   }
+
+  public void testIssue291() {
+    fold("if (true) { f.onchange(); }", "if (1) f.onchange();");
+    foldSame("if (f) { f.onchange(); }");
+    foldSame("if (f) { f.bar(); } else { f.onchange(); }");
+    fold("if (f) { f.bonchange(); }", "f && f.bonchange();");
+    foldSame("if (f) { f['x'](); }");
+  }
 }
