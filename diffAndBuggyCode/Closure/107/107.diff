diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java
index ee2dd58c..3aae2e77 100644
--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -856,8 +856,10 @@ public class CommandLineRunner extends
       // run-time.
       //
       // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it.
+      // so we might as well inline it. But shut off the i18n warnings,
+      // because the user didn't really ask for i18n.
       options.messageBundle = new EmptyMessageBundle();
+      options.setWarningLevel(JsMessageVisitor.MSG_CONVENTIONS, CheckLevel.OFF);
     }
 
     return options;
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index 9398f9ec..9d8e963a 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1027,7 +1027,7 @@ public class DefaultPassConfig extends PassConfig {
           /* warn about message dupes */
           true,
           /* allow messages with goog.getMsg */
-          JsMessage.Style.getFromParams(true, false),
+          JsMessage.Style.CLOSURE,
           /* if we can't find a translation, don't worry about it. */
           false);
     }
@@ -1042,7 +1042,7 @@ public class DefaultPassConfig extends PassConfig {
           /* warn about message dupes */
           true,
           /* allow messages with goog.getMsg */
-          JsMessage.Style.getFromParams(true, false));
+          JsMessage.Style.CLOSURE);
     }
   };
 
diff --git a/src/com/google/javascript/jscomp/JsMessageVisitor.java b/src/com/google/javascript/jscomp/JsMessageVisitor.java
index 157f133e..7837dcc7 100644
--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java
+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java
@@ -86,6 +86,20 @@ abstract class JsMessageVisitor extends AbstractPostOrderCallback
       DiagnosticType.error("JSC_MSG_FALLBACK_ARG_ERROR",
           "Could not find message entry for fallback argument {0}");
 
+  /**
+   * Warnings that only apply to people who use MSG_ to denote
+   * messages. Note that this doesn't include warnings about
+   * proper use of goog.getMsg
+   */
+  static final DiagnosticGroup MSG_CONVENTIONS = new DiagnosticGroup(
+      "messageConventions",
+      MESSAGE_HAS_NO_DESCRIPTION,
+      MESSAGE_HAS_NO_TEXT,
+      MESSAGE_TREE_MALFORMED,
+      MESSAGE_HAS_NO_VALUE,
+      MESSAGE_DUPLICATE_KEY,
+      MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX);
+
   private static final String PH_JS_PREFIX = "{$";
   private static final String PH_JS_SUFFIX = "}";
 
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 298933a2..5eb35233 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -390,6 +390,11 @@ public class CommandLineRunnerTest extends TestCase {
          "window.foo = 'foo';");
   }
 
+  public void testGetMsgWiringNoWarnings() throws Exception {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("/** @desc A bad foo. */ var MSG_FOO = 1;", "");
+  }
+
   public void testCssNameWiring() throws Exception {
     test("var goog = {}; goog.getCssName = function() {};" +
          "goog.setCssNameMapping = function() {};" +
