diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index 5f21761b..a4a41a8e 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -265,19 +265,20 @@ public class Compiler extends AbstractCompiler {
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
+    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
+
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
+        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
-    this.warningsGuard = new ComposeWarningsGuard(guards);
+    this.warningsGuard = composedGuards;
   }
 
   /**
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0440b39c..9d2f97a5 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1217,30 +1217,20 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
   }
 
   private Node tryFoldKnownMethods(Node subtree) {
-    // For now we only support string methods .join(),
+    // For now we only support .join(),
     // .indexOf(), .substring() and .substr()
-    // and numeric methods parseInt() and parseFloat().
 
     subtree = tryFoldArrayJoin(subtree);
 
     if (subtree.getType() == Token.CALL) {
-      Node callTarget = subtree.getFirstChild();
-      if (callTarget == null) {
-        return subtree;
-      }
-
-      if (NodeUtil.isGet(callTarget)) {
-        subtree = tryFoldKnownStringMethods(subtree);
-      } else {
-        subtree = tryFoldKnownNumericMethods(subtree);
-      }
+      subtree = tryFoldKnownStringMethods(subtree);
     }
 
     return subtree;
   }
 
   /**
-   * Try to evaluate known String methods
+   * Try to eveluate known String methods
    *    .indexOf(), .substr(), .substring()
    */
   private Node tryFoldKnownStringMethods(Node subtree) {
@@ -1260,8 +1250,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
     Node stringNode = callTarget.getFirstChild();
     Node functionName = stringNode.getNext();
 
-    if ((stringNode.getType() != Token.STRING) ||
-        (functionName.getType() != Token.STRING)) {
+    if ((stringNode.getType() != Token.STRING) || (
+        (functionName.getType() != Token.STRING))) {
       return subtree;
     }
 
@@ -1288,37 +1278,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
 
     return subtree;
   }
-  
-  /**
-   * Try to evaluate known Numeric methods
-   *    .parseInt(), parseFloat()
-   */
-  private Node tryFoldKnownNumericMethods(Node subtree) {
-    Preconditions.checkArgument(subtree.getType() == Token.CALL);
-    
-    if (isASTNormalized()) {
-      // check if this is a call on a string method
-      // then dispatch to specific folding method.
-      Node callTarget = subtree.getFirstChild();
-
-      if (!NodeUtil.isName(callTarget)) {
-        return subtree;
-      }
-
-      String functionNameString = callTarget.getString();
-      Node firstArgument = callTarget.getNext();
-      if ((firstArgument != null) &&
-          (firstArgument.getType() == Token.STRING ||
-           firstArgument.getType() == Token.NUMBER)) {
-        if (functionNameString.equals("parseInt") ||
-            functionNameString.equals("parseFloat")) {
-          subtree = tryFoldParseNumber(subtree, functionNameString,
-              firstArgument);
-        }
-      }
-    }
-    return subtree;
-  }
 
   /**
    * @return The lowered string Node.
@@ -1343,156 +1302,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
     reportCodeChange();
     return replacement;
   }
-  
-  /**
-   * @param input string representation of a number
-   * @return string with leading and trailing zeros removed
-   */
-  private String normalizeNumericString(String input) {
-    if (input == null || input.length() == 0) {
-      return input;
-    }
-    
-    int startIndex = 0, endIndex = input.length() - 1;
-    while (startIndex < input.length() && input.charAt(startIndex) == '0') {
-      startIndex++;
-    }
-    while (endIndex >= 0 && input.charAt(endIndex) == '0') {
-      endIndex--;
-    }
-    if (startIndex >= endIndex) {
-      return input;
-    }
-    
-    return input.substring(startIndex, endIndex + 1);
-  }
-  
-  /**
-   * Try to evaluate parseInt, parseFloat:
-   *     parseInt("1") -> 1
-   *     parseInt("1", 10) -> 1
-   *     parseFloat("1.11") -> 1.11
-   */
-  private Node tryFoldParseNumber(
-      Node n, String functionName, Node firstArg) {
-    Preconditions.checkArgument(n.getType() == Token.CALL);
-
-    boolean isParseInt = functionName.equals("parseInt");
-    Node secondArg = firstArg.getNext();
-    
-    // Second argument is only used as the radix for parseInt
-    int radix = 0;
-    if (secondArg != null) {
-      if (!isParseInt) {
-        return n;
-      }
-      
-      // Third-argument and non-numeric second arg are problematic. Discard.
-      if ((secondArg.getNext() != null) ||
-          (secondArg.getType() != Token.NUMBER)) {
-        return n;
-      } else {
-        double tmpRadix = secondArg.getDouble();
-        if (tmpRadix != (int)tmpRadix)
-          return n;
-        radix = (int)tmpRadix;
-        if (radix < 0 || radix == 1 || radix > 36) {
-          return n;
-        }
-      }
-    }
-    
-    // stringVal must be a valid string.
-    String stringVal = null;
-    Double checkVal;
-    if (firstArg.getType() == Token.NUMBER) {
-      checkVal = NodeUtil.getNumberValue(firstArg);
-      if (!(radix == 0 || radix == 10) && isParseInt) {
-        //Convert a numeric first argument to a different base
-        stringVal = String.valueOf(checkVal.intValue());
-      } else {
-        // If parseFloat is called with a numeric argument,
-        // replace it with just the number.
-        // If parseInt is called with a numeric first argument and the radix
-        // is 10 or omitted, just replace it with the number
-        Node numericNode;
-        if (isParseInt) {
-          numericNode = Node.newNumber(checkVal.intValue());
-        } else {
-          numericNode = Node.newNumber(checkVal);
-        }
-        n.getParent().replaceChild(n, numericNode);
-        reportCodeChange();
-        return numericNode;
-      }
-    } else {
-      stringVal = NodeUtil.getStringValue(firstArg);
-      if (stringVal == null) {
-        return n;
-      }
-      
-      //Check that the string is in a format we can recognize
-      checkVal = NodeUtil.getStringNumberValue(stringVal);
-      if (checkVal == null || checkVal == Double.NaN) {
-        return n;
-      }
-      
-      stringVal = NodeUtil.trimJsWhiteSpace(stringVal);
-    }
-
-    Node newNode;
-    if (isParseInt) {
-      if (radix == 0 || radix == 16) {
-        if (stringVal.length() > 1 &&
-            stringVal.substring(0, 2).equalsIgnoreCase("0x")) {
-          radix = 16;
-          stringVal = stringVal.substring(2);
-        } else if (radix == 0) {
-          // if a radix is not specified or is 0 and the most
-          // significant digit is "0", the string will parse
-          // with a radix of 8 on some browsers, so leave
-          // this case alone. This check does not apply in
-          // script mode ECMA5 or greater
-          if (!isEcmaScript5OrGreater() &&
-              stringVal.substring(0, 1).equals("0")) {
-            return n;
-          }
-
-          radix = 10;
-        }
-      }
-      int newVal = 0;
-      try {
-        newVal = Integer.parseInt(stringVal, radix);
-      } catch (NumberFormatException e) {
-        return n;
-      }
-
-      newNode = Node.newNumber(newVal);
-    } else {
-      String normalizedNewVal = "0";
-      try {
-        double newVal = Double.parseDouble(stringVal);
-        newNode = Node.newNumber(newVal);
-        normalizedNewVal = normalizeNumericString(String.valueOf(newVal));
-      }
-      catch(NumberFormatException e) {
-        return n;
-      }
-      // Make sure that the parsed number matches the original string
-      // This prevents rounding differences between the java implementation
-      // and native script.
-      if (!normalizeNumericString(stringVal).equals(normalizedNewVal)) {
-        return n;
-      }
-    }
-
-    n.getParent().replaceChild(n, newNode);
-
-    reportCodeChange();
-
-    return newNode;
-  }
 
   /**
    * Try to evaluate String.indexOf/lastIndexOf:
@@ -1906,4 +1715,4 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
     reportCodeChange();
     return n;
   }
-}
\ No newline at end of file
+}
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 98582c31..7fcbb1b3 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -224,6 +224,12 @@ public class CommandLineRunnerTest extends TestCase {
     testSame("x = 3;");
   }
 
+  public void testCheckSymbolsOverrideForQuiet() {
+    args.add("--warning_level=QUIET");
+    args.add("--jscomp_error=undefinedVars");
+    test("x = 3;", VarCheck.UNDEFINED_VAR_ERROR);
+  }
+
   public void testCheckUndefinedProperties1() {
     args.add("--warning_level=VERBOSE");
     args.add("--jscomp_error=missingProperties");
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index e39520ec..ad698ebf 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -1013,52 +1013,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     test("(![a])", "false");
     testSame("(![foo()])");
   }
-  
-  public void testFoldParseNumbers() {
-    enableNormalize();
-    enableEcmaScript5(true);
-    
-    fold("x = parseInt('123')", "x = 123");
-    fold("x = parseInt(' 123')", "x = 123");
-    fold("x = parseInt('123', 10)", "x = 123");
-    fold("x = parseInt('0xA')", "x = 10");
-    fold("x = parseInt('0xA', 16)", "x = 10");
-    fold("x = parseInt('07', 8)", "x = 7");
-    fold("x = parseInt('08')", "x = 8");
-    fold("x = parseFloat('1.23')", "x = 1.23");
-    fold("x = parseFloat('1.2300')", "x = 1.23");
-    fold("x = parseFloat(' 0.3333')", "x = 0.3333");
-    
-    //Mozilla Dev Center test cases
-    fold("x = parseInt(' 0xF', 16)", "x = 15");
-    fold("x = parseInt(' F', 16)", "x = 15");
-    fold("x = parseInt('17', 8)", "x = 15");
-    fold("x = parseInt('015', 10)", "x = 15");
-    fold("x = parseInt('1111', 2)", "x = 15");
-    fold("x = parseInt('12', 13)", "x = 15");
-    fold("x = parseInt(021, 8)", "x = 15");
-    fold("x = parseInt(15.99, 10)", "x = 15");
-    fold("x = parseFloat('3.14')", "x = 3.14");
-    fold("x = parseFloat(3.14)", "x = 3.14");
-    
-    //Valid calls - unable to fold
-    foldSame("x = parseInt('FXX123', 16)");
-    foldSame("x = parseInt('15*3', 10)");
-    foldSame("x = parseInt('15e2', 10)");
-    foldSame("x = parseInt('15px', 10)");
-    foldSame("x = parseInt('-0x08')");
-    foldSame("x = parseInt('1', -1)");
-    foldSame("x = parseFloat('3.14more non-digit characters')");
-    foldSame("x = parseFloat('314e-2')");
-    foldSame("x = parseFloat('0.0314E+2')");
-    foldSame("x = parseFloat('3.333333333333333333333333')");
-    
-    //Invalid calls
-    foldSame("x = parseInt('0xa', 10)");
-    
-    enableEcmaScript5(false);
-    foldSame("x = parseInt('08')");
-  }
 
   public void testFoldObjectLiteralRef() {
     // Leave extra side-effects in place
