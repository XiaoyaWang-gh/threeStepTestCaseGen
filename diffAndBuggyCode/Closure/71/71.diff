diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java
index 3bf9a849..09eaa264 100644
--- a/src/com/google/javascript/jscomp/CheckAccessControls.java
+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java
@@ -35,15 +35,11 @@ import com.google.common.collect.HashMultimap;
  * control restrictions indicated by JSDoc annotations, like
  * {@code @private} and {@code @deprecated}.
  *
- * There are two parts to this pass:
- * 1) JSDoc Inference: Attaching the appropriate JSDoc to
- *    all programmer-defined types and properties.
- * 2) Access Control Enforcement: Emitting warnings when the code does not
- *    obey the restrictions attached to JSTypes in step 1.
- *
  * Because access control restrictions are attached to type information,
- * it's important that TypeCheck runs before this pass, so that all types
- * are correctly resolved and propagated before this pass runs.
+ * it's important that TypedScopeCreator, TypeInference, and InferJSDocInfo
+ * all run before this pass. TypedScopeCreator creates and resolves types,
+ * TypeInference propagates those types across the AST, and InferJSDocInfo
+ * propagates JSDoc across the types.
  *
  * @author nicksantos@google.com (Nick Santos)
  */
@@ -417,7 +413,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
+      boolean isOverride = parent.getJSDocInfo() != null &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
diff --git a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java
index ac91c51f..9dd3a118 100644
--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java
+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java
@@ -405,7 +405,7 @@ public class CheckAccessControlsTest extends CompilerTestCase {
       "/** @constructor \n * @extends {Foo} */ " +
       "function SubFoo() {};" +
       "SubFoo.prototype.bar_ = function() {};"
-    }, null, PRIVATE_OVERRIDE);
+    }, null, BAD_PRIVATE_PROPERTY_ACCESS);
   }
 
   public void testNoPrivateAccessForProperties7() {
@@ -421,6 +421,14 @@ public class CheckAccessControlsTest extends CompilerTestCase {
     }, null, BAD_PRIVATE_PROPERTY_ACCESS);
   }
 
+  public void testNoPrivateAccessForProperties8() {
+    test(new String[] {
+      "/** @constructor */ function Foo() { /** @private */ this.bar_ = 3; }",
+      "/** @constructor \n * @extends {Foo} */ " +
+      "function SubFoo() { /** @private */ this.bar_ = 3; };"
+    }, null, PRIVATE_OVERRIDE);
+  }
+
   public void testProtectedAccessForProperties1() {
     testSame(new String[] {
       "/** @constructor */ function Foo() {}" +
