diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index 813a2eec..86521bdd 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -210,9 +210,15 @@ class PeepholeSubstituteAlternateSyntax
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to ''+(a) - which allows further optimizations
+      // Fold String(a) to '' + (a) on immutable literals,
+      // which allows further optimizations
+      //
+      // We can't do this in the general case, because String(a) has
+      // slightly different semantics than '' + (a). See
+      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && value.getNext() == null &&
+          NodeUtil.isImmutableValue(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
diff --git a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
index c8f8bf4e..d1a569d0 100644
--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
@@ -1028,6 +1028,8 @@ public class PeepholeSubstituteAlternateSyntaxTest extends CompilerTestCase {
   public void testSimpleFunctionCall() {
     test("var a = String(23)", "var a = '' + 23");
     test("var a = String('hello')", "var a = '' + 'hello'");
+    testSame("var a = String('hello', bar());");
+    testSame("var a = String({valueOf: function() { return 1; }});");
   }
 
   private static class StringCompareTestCase extends CompilerTestCase {
