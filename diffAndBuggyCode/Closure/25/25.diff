diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index bc248974..74728ee9 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1033,9 +1033,9 @@ class TypeInference
   }
 
   private FlowScope traverseNew(Node n, FlowScope scope) {
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
+    scope = traverseChildren(n, scope);
 
+    Node constructor = n.getFirstChild();
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
@@ -1052,14 +1052,11 @@ class TypeInference
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          backwardsInferenceFromCallSite(n, ct);
         }
       }
     }
     n.setJSType(type);
-
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
   }
 
diff --git a/test/com/google/javascript/jscomp/TypeInferenceTest.java b/test/com/google/javascript/jscomp/TypeInferenceTest.java
index a370ae2e..91119b5b 100644
--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java
+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java
@@ -44,6 +44,7 @@ import com.google.javascript.rhino.jstype.JSType;
 import com.google.javascript.rhino.jstype.JSTypeNative;
 import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.StaticSlot;
+import com.google.javascript.rhino.testing.Asserts;
 
 import junit.framework.TestCase;
 
@@ -128,7 +129,7 @@ public class TypeInferenceTest extends TestCase {
   }
 
   private void verify(String name, JSType type) {
-    assertEquals(type, getType(name));
+    Asserts.assertTypeEquals(type, getType(name));
   }
 
   private void verify(String name, JSTypeNative type) {
@@ -865,4 +866,27 @@ public class TypeInferenceTest extends TestCase {
             registry.getNativeType(BOOLEAN_TYPE),
             ImmutableList.<JSType>of() /* params */));
   }
+
+  public void testBackwardsInferenceCall() {
+    inFunction(
+        "/** @param {{foo: (number|undefined)}} x */" +
+        "function f(x) {}" +
+        "var y = {};" +
+        "f(y);");
+
+    assertEquals("{foo: (number|undefined)}", getType("y").toString());
+  }
+
+  public void testBackwardsInferenceNew() {
+    inFunction(
+        "/**\n" +
+        " * @constructor\n" +
+        " * @param {{foo: (number|undefined)}} x\n" +
+        " */" +
+        "function F(x) {}" +
+        "var y = {};" +
+        "new F(y);");
+
+    assertEquals("{foo: (number|undefined)}", getType("y").toString());
+  }
 }
