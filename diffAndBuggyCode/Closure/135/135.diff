diff --git a/javadoc/com/google/javascript/rhino/jstype/FunctionType.html b/javadoc/com/google/javascript/rhino/jstype/FunctionType.html
index a7c71269..0e3078d0 100644
--- a/javadoc/com/google/javascript/rhino/jstype/FunctionType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/FunctionType.html
@@ -466,7 +466,7 @@ This derived type provides extended information about a function, including
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;boolean</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>
+<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the property whose name is given is present directly on
@@ -1068,6 +1068,24 @@ public boolean <B>hasProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api
 </DL>
 <HR>
 
+<A NAME="hasOwnProperty(java.lang.String)"><!-- --></A><H3>
+hasOwnProperty</H3>
+<PRE>
+public boolean <B>hasOwnProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
+<DL>
+<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">ObjectType</A></CODE></B></DD>
+<DD>Checks whether the property whose name is given is present directly on
+ the object.  Returns false even if it is declared on a supertype.
+<P>
+<DD><DL>
+</DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="getPropertyType(java.lang.String)"><!-- --></A><H3>
 getPropertyType</H3>
 <PRE>
@@ -1430,24 +1448,6 @@ public int <B>getPropertiesCount</B>()</PRE>
 </DL>
 <HR>
 
-<A NAME="hasOwnProperty(java.lang.String)"><!-- --></A><H3>
-hasOwnProperty</H3>
-<PRE>
-public boolean <B>hasOwnProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</PRE>
-<DL>
-<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">ObjectType</A></CODE></B></DD>
-<DD>Checks whether the property whose name is given is present directly on
- the object.  Returns false even if it is declared on a supertype.
-<P>
-<DD><DL>
-<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
-</DD>
-<DD><DL>
-</DL>
-</DD>
-</DL>
-<HR>
-
 <A NAME="getOwnPropertyNames()"><!-- --></A><H3>
 getOwnPropertyNames</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html b/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html
index 639b43c2..21ecb2d5 100644
--- a/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/NoObjectType.html
@@ -290,15 +290,6 @@ The bottom Object type, representing the subclass of all objects.
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;boolean</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/NoObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>
-
-<BR>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the property whose name is given is present directly on
- the object.</TD>
-</TR>
-<TR BGCOLOR="white" CLASS="TableRowColor">
-<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;boolean</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/NoObjectType.html#hasProperty(java.lang.String)">hasProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>
 
 <BR>
@@ -458,7 +449,7 @@ The bottom Object type, representing the subclass of all objects.
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#canBeCalled()">canBeCalled</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getAllImplementedInterfaces()">getAllImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getImplementedInterfaces()">getImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMaxArguments()">getMaxArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMinArguments()">getMinArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParameters()">getParameters</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParametersNode()">getParametersNode</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getPrototype()">getPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSource()">getSource</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSubTypes()">getSubTypes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSuperClassConstructor()">getSuperClassConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTemplateTypeName()">getTemplateTypeName</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTopMostDefiningType(java.lang.String)">getTopMostDefiningType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTypeOfThis()">getTypeOfThis</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasEqualCallType(com.google.javascript.rhino.jstype.FunctionType)">hasEqualCallType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasInstanceType()">hasInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasUnknownSupertype()">hasUnknownSupertype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isConstructor()">isConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInstanceType()">isInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInterface()">isInterface</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isOrdinaryFunction()">isOrdinaryFunction</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setImplementedInterfaces(java.util.List)">setImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)">setPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)">setPrototypeBasedOn</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setSource(com.google.javascript.rhino.Node)">setSource</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#canBeCalled()">canBeCalled</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getAllImplementedInterfaces()">getAllImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getImplementedInterfaces()">getImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMaxArguments()">getMaxArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMinArguments()">getMinArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParameters()">getParameters</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParametersNode()">getParametersNode</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getPrototype()">getPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSource()">getSource</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSubTypes()">getSubTypes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSuperClassConstructor()">getSuperClassConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTemplateTypeName()">getTemplateTypeName</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTopMostDefiningType(java.lang.String)">getTopMostDefiningType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTypeOfThis()">getTypeOfThis</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasEqualCallType(com.google.javascript.rhino.jstype.FunctionType)">hasEqualCallType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasInstanceType()">hasInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasUnknownSupertype()">hasUnknownSupertype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isConstructor()">isConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInstanceType()">isInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInterface()">isInterface</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isOrdinaryFunction()">isOrdinaryFunction</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setImplementedInterfaces(java.util.List)">setImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)">setPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)">setPrototypeBasedOn</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setSource(com.google.javascript.rhino.Node)">setSource</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.ObjectType"><!-- --></A>
@@ -963,24 +954,6 @@ public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.h
 </DL>
 <HR>
 
-<A NAME="hasOwnProperty(java.lang.String)"><!-- --></A><H3>
-hasOwnProperty</H3>
-<PRE>
-public boolean <B>hasOwnProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</PRE>
-<DL>
-<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">ObjectType</A></CODE></B></DD>
-<DD>Checks whether the property whose name is given is present directly on
- the object.  Returns false even if it is declared on a supertype.
-<P>
-<DD><DL>
-<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
-</DD>
-<DD><DL>
-</DL>
-</DD>
-</DL>
-<HR>
-
 <A NAME="getOwnPropertyNames()"><!-- --></A><H3>
 getOwnPropertyNames</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/rhino/jstype/NoType.html b/javadoc/com/google/javascript/rhino/jstype/NoType.html
index a6dd1215..55eb08a3 100644
--- a/javadoc/com/google/javascript/rhino/jstype/NoType.html
+++ b/javadoc/com/google/javascript/rhino/jstype/NoType.html
@@ -218,15 +218,6 @@ Bottom type, representing the subclass of any value or object.
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;boolean</CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/NoType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</CODE>
-
-<BR>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the property whose name is given is present directly on
- the object.</TD>
-</TR>
-<TR BGCOLOR="white" CLASS="TableRowColor">
-<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
-<CODE>&nbsp;boolean</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/NoType.html#hasReferenceName()">hasReferenceName</A></B>()</CODE>
 
 <BR>
@@ -367,7 +358,7 @@ Bottom type, representing the subclass of any value or object.
 <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.rhino.jstype.<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></B></TH>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
-<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#canBeCalled()">canBeCalled</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getAllImplementedInterfaces()">getAllImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getImplementedInterfaces()">getImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMaxArguments()">getMaxArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMinArguments()">getMinArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParameters()">getParameters</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParametersNode()">getParametersNode</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getPrototype()">getPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSource()">getSource</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSubTypes()">getSubTypes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSuperClassConstructor()">getSuperClassConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTemplateTypeName()">getTemplateTypeName</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTopMostDefiningType(java.lang.String)">getTopMostDefiningType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTypeOfThis()">getTypeOfThis</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasEqualCallType(com.google.javascript.rhino.jstype.FunctionType)">hasEqualCallType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasInstanceType()">hasInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasUnknownSupertype()">hasUnknownSupertype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isConstructor()">isConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInstanceType()">isInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInterface()">isInterface</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isOrdinaryFunction()">isOrdinaryFunction</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setImplementedInterfaces(java.util.List)">setImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)">setPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)">setPrototypeBasedOn</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setSource(com.google.javascript.rhino.Node)">setSource</A></CODE></TD>
+<TD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#canBeCalled()">canBeCalled</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getAllImplementedInterfaces()">getAllImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getImplementedInterfaces()">getImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMaxArguments()">getMaxArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getMinArguments()">getMinArguments</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParameters()">getParameters</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getParametersNode()">getParametersNode</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getPrototype()">getPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSource()">getSource</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSubTypes()">getSubTypes</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getSuperClassConstructor()">getSuperClassConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTemplateTypeName()">getTemplateTypeName</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTopMostDefiningType(java.lang.String)">getTopMostDefiningType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#getTypeOfThis()">getTypeOfThis</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasCachedValues()">hasCachedValues</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasEqualCallType(com.google.javascript.rhino.jstype.FunctionType)">hasEqualCallType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasInstanceType()">hasInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#hasUnknownSupertype()">hasUnknownSupertype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isConstructor()">isConstructor</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInstanceType()">isInstanceType</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isInterface()">isInterface</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#isOrdinaryFunction()">isOrdinaryFunction</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setImplementedInterfaces(java.util.List)">setImplementedInterfaces</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)">setPrototype</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)">setPrototypeBasedOn</A>, <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html#setSource(com.google.javascript.rhino.Node)">setSource</A></CODE></TD>
 </TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.rhino.jstype.ObjectType"><!-- --></A>
@@ -657,24 +648,6 @@ public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-e
 </DL>
 <HR>
 
-<A NAME="hasOwnProperty(java.lang.String)"><!-- --></A><H3>
-hasOwnProperty</H3>
-<PRE>
-public boolean <B>hasOwnProperty</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;propertyName)</PRE>
-<DL>
-<DD><B>Description copied from class: <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">ObjectType</A></CODE></B></DD>
-<DD>Checks whether the property whose name is given is present directly on
- the object.  Returns false even if it is declared on a supertype.
-<P>
-<DD><DL>
-<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)">hasOwnProperty</A></CODE> in class <CODE><A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></DL>
-</DD>
-<DD><DL>
-</DL>
-</DD>
-</DL>
-<HR>
-
 <A NAME="getOwnPropertyNames()"><!-- --></A><H3>
 getOwnPropertyNames</H3>
 <PRE>
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index 62ada528..474978cd 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -3871,6 +3871,9 @@ Method in class com.google.javascript.jscomp.graph.<A HREF="./com/google/javascr
 Method in class com.google.javascript.rhino.<A HREF="./com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>
 <DD>Check for one child more efficiently than by iterating over all the
  children as is done with Node.getChildCount().
+<DT><A HREF="./com/google/javascript/rhino/jstype/FunctionType.html#hasOwnProperty(java.lang.String)"><B>hasOwnProperty(String)</B></A> - 
+Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>
+<DD>&nbsp;
 <DT><A HREF="./com/google/javascript/rhino/jstype/ObjectType.html#hasOwnProperty(java.lang.String)"><B>hasOwnProperty(String)</B></A> - 
 Method in class com.google.javascript.rhino.jstype.<A HREF="./com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>
 <DD>Checks whether the property whose name is given is present directly on
diff --git a/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java b/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java
index f0cfb77c..e7cfc6d9 100644
--- a/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java
+++ b/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java
@@ -358,7 +358,9 @@ class DevirtualizePrototypeMethods implements CompilerPass {
 
     for (Node child : node.children()) {
       if (NodeUtil.isThis(child)) {
-        node.replaceChild(child, Node.newString(Token.NAME, name));
+        Node newName = Node.newString(Token.NAME, name);
+        newName.setJSType(child.getJSType());
+        node.replaceChild(child, newName);
       } else {
         replaceReferencesToThis(child, name);
       }
diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java
index e6228e6a..9d9de035 100644
--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java
+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java
@@ -742,6 +742,11 @@ class DisambiguateProperties<T> implements CompilerPass {
         }
       }
 
+      // Ignore the prototype itself at all times.
+      if ("prototype".equals(field)) {
+        return null;
+      }
+
       // We look up the prototype chain to find the highest place (if any) that
       // this appears.  This will make references to overriden properties look
       // like references to the initial property, so they are renamed alike.
diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 1c41ca0c..08a22c55 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -601,14 +601,16 @@ class TypeInference
     String qName = getprop.getQualifiedName();
     if (qName != null) {
       Var var = syntacticScope.getVar(qName);
-      if (var != null &&
-          !var.isTypeInferred() &&
-          !objectType.hasOwnProperty(propName) &&
-          (!objectType.isInstanceType() ||
-           (var.isExtern() && !objectType.isNativeObjectType()))) {
-        objectType.defineDeclaredProperty(
-            propName, var.getType(), var.isExtern());
-        return true;
+      if (var != null && !var.isTypeInferred()) {
+        // Handle normal declarations that could not be addressed earlier.
+        if (propName.equals("prototype") ||
+        // Handle prototype declarations that could not be addressed earlier.
+            (!objectType.hasOwnProperty(propName) &&
+             (!objectType.isInstanceType() ||
+                 (var.isExtern() && !objectType.isNativeObjectType())))) {
+          return objectType.defineDeclaredProperty(
+              propName, var.getType(), var.isExtern());
+        }
       }
     }
     return false;
diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index af7cc0f0..b318d8a6 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -409,6 +409,11 @@ public class FunctionType extends PrototypeObjectType {
     return super.hasProperty(name) || "prototype".equals(name);
   }
 
+  @Override
+  public boolean hasOwnProperty(String name) {
+    return super.hasOwnProperty(name) || "prototype".equals(name);
+  }
+
   @Override
   public JSType getPropertyType(String name) {
     if ("prototype".equals(name)) {
@@ -468,6 +473,9 @@ public class FunctionType extends PrototypeObjectType {
     if ("prototype".equals(name)) {
       ObjectType objType = type.toObjectType();
       if (objType != null) {
+        if (objType.equals(prototype)) {
+          return true;
+        }
         return setPrototype(
             new FunctionPrototypeType(
                 registry, this, objType, isNativeObjectType()));
diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
index d6f65507..4901a08d 100644
--- a/src/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
@@ -258,6 +258,8 @@ public abstract class ObjectType extends JSType {
    *        file. TightenTypes assumes that any function passed to an externs
    *        property could be called, so setting this incorrectly could result
    *        in live code being removed.
+   * @return True if the property was registered successfully, false if this
+   *        conflicts with a previous property type declaration.
    */
   abstract boolean defineProperty(String propertyName, JSType type,
       boolean inferred, boolean inExterns);
diff --git a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
index c4d2bcb8..c1f74e2d 100644
--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
@@ -105,7 +105,9 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
 
     static final List<String> EXPECTED_TYPE_CHECKING_OFF = ImmutableList.of(
         "FUNCTION a = null",
+        "NAME JSCompiler_StaticMethods_foo$self = null",
         "FUNCTION JSCompiler_StaticMethods_foo = null",
+        "NAME JSCompiler_StaticMethods_bar$self = null",
         "FUNCTION JSCompiler_StaticMethods_bar = null",
         "FUNCTION JSCompiler_StaticMethods_baz = null",
         "NEW a = null",
@@ -115,7 +117,9 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
 
     static final List<String> EXPECTED_TYPE_CHECKING_ON = ImmutableList.of(
         "FUNCTION a = function (this:a): ?",
+        "NAME JSCompiler_StaticMethods_foo$self = a",
         "FUNCTION JSCompiler_StaticMethods_foo = function (a): number",
+        "NAME JSCompiler_StaticMethods_bar$self = a",
         "FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number",
         "FUNCTION JSCompiler_StaticMethods_baz = function (a): ?",
         "NEW a = a",
@@ -543,22 +547,22 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
 
   @Override
   protected CompilerPass getProcessor(Compiler compiler) {
-    return new FunctionTypeInformationGatherer(
+    return new TypeInformationGatherer(
         compiler, new DevirtualizePrototypeMethods(compiler), typeInformation);
   }
 
   /**
-   * Wrapper that gathers function and call type strings after the
-   * pass under test runs.  For use to test passes that modify JSType
+   * Wrapper that gathers function, call, and self variable type strings after
+   * the pass under test runs.  For use to test passes that modify JSType
    * annotations.
    */
-  private static class FunctionTypeInformationGatherer
+  private static class TypeInformationGatherer
       implements CompilerPass {
     private final Compiler compiler;
     private final CompilerPass passUnderTest;
     private final List<String> typeInformation;
 
-    FunctionTypeInformationGatherer(Compiler compiler,
+    TypeInformationGatherer(Compiler compiler,
                                     CompilerPass passUnderTest,
                                     List<String> typeInformation) {
       this.compiler = compiler;
@@ -599,6 +603,20 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
                         " = ",
                         (type != null) ? type.toString() : "null"));
         }
+
+        if (NodeUtil.isGetProp(node)) {
+          Node child = node.getFirstChild();
+          if (NodeUtil.isName(child) && child.getString().endsWith("$self")) {
+            JSType type = child.getJSType();
+            typeInformation.add(
+                Joiner.on("").join(
+                    Token.name(child.getType()),
+                    " ",
+                    child.getString(),
+                    " = ",
+                    (type != null) ? type.toString() : "null"));
+          }
+        }
       }
     }
   }
diff --git a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
index cd34115e..3c2f0eaf 100644
--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
@@ -904,7 +904,8 @@ public class DisambiguatePropertiesTest extends CompilerTestCase {
       String fieldTypes) {
     this.runTightenTypes = runTightenTypes;
     test(js, expected);
-    assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));
+    assertEquals(
+        fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));
   }
 
   @SuppressWarnings("unchecked")
@@ -919,7 +920,8 @@ public class DisambiguatePropertiesTest extends CompilerTestCase {
        String description) {
     this.runTightenTypes = runTightenTypes;
     test(externs, js, expected, null, warning, description);
-    assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));
+    assertEquals(
+        fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));
   }
 
   /**
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 94305d6e..f00c58ee 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2632,6 +2632,36 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: number");
   }
 
+  public void testGoodExtends9() throws Exception {
+    testTypes(
+        "/** @constructor */ function Super() {}" +
+        "Super.prototype.foo = function() {};" +
+        "/** @constructor \n * @extends {Super} */ function Sub() {}" +
+        "Sub.prototype = new Super();" +
+        "/** @override */ Sub.prototype.foo = function() {};");
+  }
+
+  public void testGoodExtends10() throws Exception {
+    testTypes(
+        "/** @constructor */ function Super() {}" +
+        "/** @constructor \n * @extends {Super} */ function Sub() {}" +
+        "Sub.prototype = new Super();" +
+        "/** @return {Super} */ function foo() { return new Sub(); }");
+  }
+
+  public void testGoodExtends11() throws Exception {
+    testTypes(
+        "/** @constructor */ function Super() {}" +
+        "/** @param {boolean} x */ Super.prototype.foo = function(x) {};" +
+        "/** @constructor \n * @extends {Super} */ function Sub() {}" +
+        "Sub.prototype = new Super();" +
+        "(new Sub()).foo(0);",
+        "actual parameter 1 of Super.prototype.foo " +
+        "does not match formal parameter\n" +
+        "found   : number\n" +
+        "required: boolean");
+  }
+
   public void testBadExtends1() throws Exception {
     testTypes("/** @constructor */function base() {}\n" +
         "/** @constructor\n * @extends {not_base} */function derived() {}\n",
