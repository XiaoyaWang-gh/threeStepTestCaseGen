diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
index 28198bc7..2c836832 100644
--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -18,6 +18,7 @@ package com.google.javascript.jscomp;
 
 import static com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE;
+import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
@@ -125,6 +126,12 @@ final class FunctionTypeBuilder {
       "JSC_TEMPLATE_TYPE_EXPECTED",
       "The template type must be a parameter type");
 
+  static final DiagnosticType THIS_TYPE_NON_OBJECT =
+      DiagnosticType.warning(
+          "JSC_THIS_TYPE_NON_OBJECT",
+          "@this type of a function must be an object\n" +
+          "Actual type: {0}");
+
   private class ExtendedTypeValidator implements Predicate<JSType> {
     @Override
     public boolean apply(JSType type) {
@@ -165,6 +172,23 @@ final class FunctionTypeBuilder {
     }
   };
 
+  private class ThisTypeValidator implements Predicate<JSType> {
+    @Override
+    public boolean apply(JSType type) {
+      // TODO(user): Doing an instanceof check here is too
+      // restrictive as (Date,Error) is, for instance, an object type
+      // even though its implementation is a UnionType. Would need to
+      // create interfaces JSType, ObjectType, FunctionType etc and have
+      // separate implementation instead of the class hierarchy, so that
+      // union types can also be object types, etc.
+      if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {
+        reportWarning(THIS_TYPE_NON_OBJECT, type.toString());
+        return false;
+      }
+      return true;
+    }
+  };
+
   /**
    * @param fnName The function name.
    * @param compiler The compiler.
@@ -388,13 +412,8 @@ final class FunctionTypeBuilder {
           info.getThisType().evaluate(scope, typeRegistry));
     }
     if (maybeThisType != null) {
-      // TODO(user): Doing an instanceof check here is too
-      // restrictive as (Date,Error) is, for instance, an object type
-      // even though its implementation is a UnionType. Would need to
-      // create interfaces JSType, ObjectType, FunctionType etc and have
-      // separate implementation instead of the class hierarchy, so that
-      // union types can also be object types, etc.
       thisType = maybeThisType;
+      thisType.setValidator(new ThisTypeValidator());
     } else if (owner != null &&
                (info == null || !info.hasType())) {
       // If the function is of the form:
diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index a28b476d..7b5af11d 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -248,7 +248,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       WRONG_ARGUMENT_COUNT,
       ILLEGAL_IMPLICIT_CAST,
       TypedScopeCreator.UNKNOWN_LENDS,
-      TypedScopeCreator.LENDS_ON_NON_OBJECT);
+      TypedScopeCreator.LENDS_ON_NON_OBJECT,
+      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);
 
   private final AbstractCompiler compiler;
   private final TypeValidator validator;
diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index 1e15ed2c..cf2d3e86 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -864,7 +864,14 @@ public class FunctionType extends PrototypeObjectType {
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+
+    // Warning about typeOfThis if it doesn't resolve to an ObjectType
+    // is handled further upstream.
+    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+    JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (maybeTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) maybeTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 64ea2cc0..07a7e38d 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2606,6 +2606,28 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "element BAR does not exist on this enum");
   }
 
+  public void testBackwardsTypedefUse1() throws Exception {
+    testTypes(
+        "/** @this {MyTypedef} */ function f() {}" +
+        "/** @typedef {string} */ var MyTypedef;",
+        "@this type of a function must be an object\n" +
+        "Actual type: string");
+  }
+
+  public void testBackwardsTypedefUse2() throws Exception {
+    testTypes(
+        "/** @this {MyTypedef} */ function f() {}" +
+        "/** @typedef {!(Date|Array)} */ var MyTypedef;");
+  }
+
+  public void testBackwardsTypedefUse3() throws Exception {
+    testTypes(
+        "/** @this {MyTypedef} */ function f() {}" +
+        "/** @typedef {(Date|Array)} */ var MyTypedef;",
+        "@this type of a function must be an object\n" +
+        "Actual type: (Array|Date|null)");
+  }
+
   public void testBackwardsConstructor1() throws Exception {
     testTypes(
         "function f() { (new Foo(true)); }" +
