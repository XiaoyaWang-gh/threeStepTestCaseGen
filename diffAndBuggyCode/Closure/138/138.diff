diff --git a/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java
index afe77083..2c1765cf 100644
--- a/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java
@@ -169,7 +169,8 @@ abstract class ChainableReverseAbstractInterpreter
         break;
 
       default:
-        throw new IllegalArgumentException("Node cannot be refined.");
+        throw new IllegalArgumentException("Node cannot be refined. \n" +
+            node.toStringTree());
     }
   }
 
@@ -484,20 +485,14 @@ abstract class ChainableReverseAbstractInterpreter
 
     @Override
     protected JSType caseTopType(JSType topType) {
+      JSType result = topType;
       if (resultEqualsValue) {
-        if (value.equals("number")) {
-          return getNativeType(NUMBER_TYPE);
-        } else if (value.equals("boolean")) {
-          return getNativeType(BOOLEAN_TYPE);
-        } else if (value.equals("string")) {
-          return getNativeType(STRING_TYPE);
-        } else if (value.equals("undefined")) {
-          return getNativeType(VOID_TYPE);
-        } else if (value.equals("function")) {
-          return getNativeType(U2U_CONSTRUCTOR_TYPE);
+        JSType typeByName = getNativeTypeForTypeOf(value);
+        if (typeByName != null) {
+          result = typeByName;
         }
       }
-      return topType;
+      return result;
     }
 
     public JSType caseNoObjectType() {
@@ -554,7 +549,7 @@ abstract class ChainableReverseAbstractInterpreter
 
   /**
    * Returns a version of {@code type} that is restricted by some knowledge
-   * about the result of the {@code typeof} operation..
+   * about the result of the {@code typeof} operation.
    * <p>
    * The behavior of the {@code typeof} operator can be summarized by the
    * following table:
@@ -581,12 +576,44 @@ abstract class ChainableReverseAbstractInterpreter
    */
   JSType getRestrictedByTypeOfResult(JSType type, String value,
                                      boolean resultEqualsValue) {
-    return type == null ? null :
-        type.visit(new RestrictByOneTypeOfResultVisitor(
-            value, resultEqualsValue));
+    if (type == null) {
+      if (resultEqualsValue) {
+        JSType result = getNativeTypeForTypeOf(value);
+        return result == null ? getNativeType(UNKNOWN_TYPE) : result;
+      } else {
+        return null;
+      }
+    }
+    return type.visit(
+        new RestrictByOneTypeOfResultVisitor(value, resultEqualsValue));
   }
 
   JSType getNativeType(JSTypeNative typeId) {
     return typeRegistry.getNativeType(typeId);
   }
+
+  /**
+   * If we definitely know what a type is based on the typeof result,
+   * return it.  Otherwise, return null.
+   *
+   * The typeof operation in JS is poorly defined, and this function works
+   * for both the native typeof and goog.typeOf. It should not be made public,
+   * because its semantics are informally defined, and would be wrong in
+   * the general case.
+   */
+  private JSType getNativeTypeForTypeOf(String value) {
+    if (value.equals("number")) {
+      return getNativeType(NUMBER_TYPE);
+    } else if (value.equals("boolean")) {
+      return getNativeType(BOOLEAN_TYPE);
+    } else if (value.equals("string")) {
+      return getNativeType(STRING_TYPE);
+    } else if (value.equals("undefined")) {
+      return getNativeType(VOID_TYPE);
+    } else if (value.equals("function")) {
+      return getNativeType(U2U_CONSTRUCTOR_TYPE);
+    } else {
+      return null;
+    }
+  }
 }
diff --git a/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java
index 5faedb60..7bfbae52 100644
--- a/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java
@@ -23,6 +23,7 @@ import static com.google.javascript.rhino.Token.STRING;
 import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE;
+import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;
 
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableMap;
@@ -173,39 +174,46 @@ class ClosureReverseAbstractInterpreter
       })
       .put("isArray", new Function<TypeRestriction, JSType>() {
         public JSType apply(TypeRestriction p) {
+          if (p.type == null) {
+            return p.outcome ? getNativeType(ARRAY_TYPE) : null;
+          }
+
           Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :
               restrictToNotArrayVisitor;
-          return p.type == null ? null : p.type.visit(visitor);
+          return p.type.visit(visitor);
         }
       })
       .put("isObject", new Function<TypeRestriction, JSType>() {
         public JSType apply(TypeRestriction p) {
+          if (p.type == null) {
+            return p.outcome ? getNativeType(OBJECT_TYPE) : null;
+          }
+
           Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :
               restrictToNotObjectVisitor;
-          return p.type == null ? null : p.type.visit(visitor);
+          return p.type.visit(visitor);
         }
       })
       .build();
   }
 
+  @Override
   public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,
       FlowScope blindScope, boolean outcome) {
     if (condition.getType() == CALL && condition.getChildCount() == 2) {
       Node callee = condition.getFirstChild();
       Node param = condition.getLastChild();
-      if (callee.getType() == GETPROP) {
+      if (callee.getType() == GETPROP && param.isQualifiedName()) {
         JSType paramType =  getTypeIfRefinable(param, blindScope);
-        if (paramType != null) {
-          Node left = callee.getFirstChild();
-          Node right = callee.getLastChild();
-          if (left.getType() == NAME && "goog".equals(left.getString()) &&
-              right.getType() == STRING) {
-            Function<TypeRestriction, JSType> restricter =
-                restricters.get(right.getString());
-            if (restricter != null) {
-              return restrictParameter(param, paramType, blindScope, restricter,
-                  outcome);
-            }
+        Node left = callee.getFirstChild();
+        Node right = callee.getLastChild();
+        if (left.getType() == NAME && "goog".equals(left.getString()) &&
+            right.getType() == STRING) {
+          Function<TypeRestriction, JSType> restricter =
+              restricters.get(right.getString());
+          if (restricter != null) {
+            return restrictParameter(param, paramType, blindScope, restricter,
+                outcome);
           }
         }
       }
diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index fbcc8bb4..749eb6d3 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -625,15 +625,33 @@ class TypeInference
     if (value != null) {
       scope = traverse(value, scope);
       updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,
-         getJSType(value));
+          getJSType(value));
       return scope;
     } else {
       StaticSlot<JSType> var = scope.getSlot(varName);
-      if (var != null &&
-          !(var.isTypeInferred() && unflowableVarNames.contains(varName))) {
-        type = var.getType();
-        if (type == null) {
-          type = getNativeType(UNKNOWN_TYPE);
+      if (var != null) {
+        // There are two situations where we don't want to use type information
+        // from the scope, even if we have it.
+
+        // 1) The var is escaped in a weird way, e.g.,
+        // function f() { var x = 3; function g() { x = null } (x); }
+        boolean isInferred = var.isTypeInferred();
+        boolean unflowable =
+            isInferred && unflowableVarNames.contains(varName);
+
+        // 2) We're reading type information from another scope for an
+        // inferred variable.
+        // var t = null; function f() { (t); }
+        boolean nonLocalInferredSlot =
+            isInferred &&
+            syntacticScope.getParent() != null &&
+            var == syntacticScope.getParent().getSlot(varName);
+
+        if (!unflowable && !nonLocalInferredSlot) {
+          type = var.getType();
+          if (type == null) {
+            type = getNativeType(UNKNOWN_TYPE);
+          }
         }
       }
     }
diff --git a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
index 19f2c62b..36e8d505 100644
--- a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
+++ b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
@@ -121,6 +121,27 @@ public class ClosureReverseAbstractInterpreterTest extends
         OBJECT_TYPE);
   }
 
+  public void testGoogIsArrayOnNull() throws Exception {
+    testClosureFunction("goog.isArray",
+        null,
+        ARRAY_TYPE,
+        null);
+  }
+
+  public void testGoogIsFunctionOnNull() throws Exception {
+    testClosureFunction("goog.isFunction",
+        null,
+        U2U_CONSTRUCTOR_TYPE,
+        null);
+  }
+
+  public void testGoogIsObjectOnNull() throws Exception {
+    testClosureFunction("goog.isObject",
+        null,
+        OBJECT_TYPE,
+        null);
+  }
+
   private void testClosureFunction(String function, JSType type,
       JSType trueType, JSType falseType) {
     // function(a) where a : type
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 1f96aef4..b0803b15 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -597,6 +597,24 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "function f(x) { return goog.isObject(x) ? x : []; }", null);
   }
 
+  public void testTypeOfReduction14() throws Exception {
+    // Don't do type inference on GETELEMs.
+    testClosureTypes(
+        CLOSURE_DEFS +
+        "function f(arguments) { " +
+        "  return goog.isString(arguments[0]) ? arguments[0] : 0;" +
+        "}", null);
+  }
+
+  public void testTypeOfReduction15() throws Exception {
+    // Don't do type inference on GETELEMs.
+    testClosureTypes(
+        CLOSURE_DEFS +
+        "function f(arguments) { " +
+        "  return typeof arguments[0] == 'string' ? arguments[0] : 0;" +
+        "}", null);
+  }
+
   public void testQualifiedNameReduction1() throws Exception {
     testTypes("var x = {}; /** @type {string?} */ x.a = 'a';\n" +
         "/** @return {string} */ var f = function() {\n" +
@@ -3473,7 +3491,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
     testTypes(
         "/** @constructor */ var Foo = function() {};" +
         "/** @type {number} */ Foo.prototype.bar = 3;" +
-        "var FooAlias = Foo;" +
+        "/** @constructor */ var FooAlias = Foo;" +
         "/** @return {string} */ function foo() { " +
         "  return (new FooAlias()).bar; }",
         "inconsistent return type\n" +
@@ -4124,6 +4142,27 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: number");
   }
 
+  public void testIssue124() throws Exception {
+    testTypes(
+        "var t = null;" +
+        "function test() {" +
+        "  if (t != null) { t = null; }" +
+        "  t = 1;" +
+        "}");
+  }
+
+  public void testIssue124b() throws Exception {
+    testTypes(
+        "var t = null;" +
+        "function test() {" +
+        "  if (t != null) { t = null; }" +
+        "  t = undefined;" +
+        "}",
+        "condition always evaluates to false\n" +
+        "left : (null|undefined)\n" +
+        "right: null");
+  }
+
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
