diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java
index 52248611..01293c98 100644
--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java
+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java
@@ -488,9 +488,13 @@ class DisambiguateProperties<T> implements CompilerPass {
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      Node child = n.getFirstChild();
-      while (child != null) {
+      for (Node child = n.getFirstChild();
+          child != null;
+          child = child.getNext()) {
         // Maybe STRING, GET, SET
+        if (child.isQuotedString()) {
+          continue;
+        }
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
@@ -508,7 +512,6 @@ class DisambiguateProperties<T> implements CompilerPass {
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
-        child = child.getNext();
       }
     }
 
diff --git a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
index e72ac65e..c2d4b77f 100644
--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
@@ -117,6 +117,18 @@ public class DisambiguatePropertiesTest extends CompilerTestCase {
     testSets(true, js, js, expected);
   }
 
+  public void testOneType4() {
+    String js = ""
+        + "/** @constructor */ function Foo() {}\n"
+        + "Foo.prototype = {'a': 0};\n"
+        + "/** @type Foo */\n"
+        + "var F = new Foo;\n"
+        + "F['a'] = 0;";
+    String expected = "{}";
+    testSets(false, js, js, expected);
+    testSets(true, js, js, expected);
+  }
+
   public void testPrototypeAndInstance() {
     String js = ""
         + "/** @constructor */ function Foo() {}\n"
@@ -220,6 +232,33 @@ public class DisambiguatePropertiesTest extends CompilerTestCase {
     testSets(true, js, output, "{a=[[Bar.prototype], [Foo.prototype]]}");
   }
 
+  public void testTwoTypes4() {
+    String js = ""
+        + "/** @constructor */ function Foo() {}\n"
+        + "Foo.prototype = {a: 0};"
+        + "/** @type Foo */\n"
+        + "var F = new Foo;\n"
+        + "F.a = 0;"
+        + "/** @constructor */ function Bar() {}\n"
+        + "Bar.prototype = {'a': 0};"
+        + "/** @type Bar */\n"
+        + "var B = new Bar;\n"
+        + "B['a'] = 0;";
+
+    String output = ""
+        + "function Foo(){}"
+        + "Foo.prototype = {a: 0};"
+        + "var F=new Foo;"
+        + "F.a=0;"
+        + "function Bar(){}"
+        + "Bar.prototype = {'a': 0};"
+        + "var B=new Bar;"
+        + "B['a']=0";
+
+    testSets(false, js, output, "{a=[[Foo.prototype]]}");
+    testSets(true, js, output, "{a=[[Foo.prototype]]}");
+  }
+
   public void testTwoFields() {
     String js = ""
         + "/** @constructor */ function Foo() {}\n"
