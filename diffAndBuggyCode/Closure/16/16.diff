diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java
index 426069fc..e2f05387 100644
--- a/src/com/google/javascript/jscomp/ScopedAliases.java
+++ b/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -16,6 +16,7 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -165,18 +166,24 @@ class ScopedAliases implements HotSwapCompilerPass {
   }
 
   private class AliasedTypeNode implements AliasUsage {
-    private final Node aliasReference;
-
-    private final String correctedType;
+    private final Node typeReference;
+    private final Node aliasDefinition;
+    private final String aliasName;
 
-    AliasedTypeNode(Node aliasReference, String correctedType) {
-      this.aliasReference = aliasReference;
-      this.correctedType = correctedType;
+    AliasedTypeNode(Node typeReference, Node aliasDefinition,
+        String aliasName) {
+      this.typeReference = typeReference;
+      this.aliasDefinition = aliasDefinition;
+      this.aliasName = aliasName;
     }
 
     @Override
     public void applyAlias() {
-      aliasReference.setString(correctedType);
+      String typeName = typeReference.getString();
+      String aliasExpanded =
+          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
+      Preconditions.checkState(typeName.startsWith(aliasName));
+      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));
     }
   }
 
@@ -464,8 +471,7 @@ class ScopedAliases implements HotSwapCompilerPass {
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
           Node aliasedNode = aliasVar.getInitialValue();
-          aliasUsages.add(new AliasedTypeNode(typeNode,
-              aliasedNode.getQualifiedName() + name.substring(endIndex)));
+          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));
         }
       }
 
diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index 8ae9fd9b..5306ccea 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -1861,6 +1861,30 @@ public class IntegrationTest extends IntegrationTestCase {
         "");
   }
 
+  public void testIssue772() throws Exception {
+    CompilerOptions options = createCompilerOptions();
+    options.closurePass = true;
+    options.checkTypes = true;
+    test(
+        options,
+        "/** @const */ var a = {};" +
+        "/** @const */ a.b = {};" +
+        "/** @const */ a.b.c = {};" +
+        "goog.scope(function() {" +
+        "  var b = a.b;" +
+        "  var c = b.c;" +
+        "  /** @typedef {string} */" +
+        "  c.MyType;" +
+        "  /** @param {c.MyType} x The variable. */" +
+        "  c.myFunc = function(x) {};" +
+        "});",
+        "/** @const */ var a = {};" +
+        "/** @const */ a.b = {};" +
+        "/** @const */ a.b.c = {};" +
+        "a.b.c.MyType;" +
+        "a.b.c.myFunc = function(x) {};");
+  }
+
   public void testCodingConvention() {
     Compiler compiler = new Compiler();
     compiler.initOptions(new CompilerOptions());
diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
index ac09a045..fda89aa6 100644
--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
@@ -403,6 +403,14 @@ public class ScopedAliasesTest extends CompilerTestCase {
         + "/** @param draggable */ types.expected;");
   }
 
+  public void testIssue772() {
+    testTypes(
+        "var b = a.b;" +
+        "var c = b.c;",
+        "/** @param {c.MyType} x */ types.actual;" +
+        "/** @param {a.b.c.MyType} x */ types.expected;");
+  }
+
   // TODO(robbyw): What if it's recursive?  var goog = goog.dom;
 
   // FAILURE CASES
