diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 7abdbae0..43a296f0 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -105,6 +105,9 @@ public final class NodeUtil {
         // ignoring side-effects
         return TernaryValue.TRUE;
 
+      case Token.VOID:
+        return TernaryValue.FALSE;
+
       default:
         return getPureBooleanValue(n);
     }
@@ -129,9 +132,14 @@ public final class NodeUtil {
 
       case Token.NULL:
       case Token.FALSE:
-      case Token.VOID:
         return TernaryValue.FALSE;
 
+      case Token.VOID:
+        if (!mayHaveSideEffects(n.getFirstChild())) {
+          return TernaryValue.FALSE;
+        }
+        break;
+
       case Token.NAME:
         String name = n.getString();
         if ("undefined".equals(name)
@@ -153,6 +161,7 @@ public final class NodeUtil {
         if (!mayHaveSideEffects(n)) {
           return TernaryValue.TRUE;
         }
+        break;
     }
 
     return TernaryValue.UNKNOWN;
diff --git a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java
index a9c12507..d8be2fd8 100644
--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java
+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java
@@ -134,7 +134,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
    * @return the replacement node, if changed, or the original if not
    */
   private Node tryFoldExpr(Node subtree) {
-    Node result = trySimpilifyUnusedResult(subtree.getFirstChild());
+    Node result = trySimplifyUnusedResult(subtree.getFirstChild());
     if (result == null) {
       Node parent = subtree.getParent();
       // If the EXPR_RESULT no longer has any children, remove it as well.
@@ -155,8 +155,8 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
    * @param n The root of the expression to simplify.
    * @return The replacement node, or null if the node was is not useful.
    */
-  private Node trySimpilifyUnusedResult(Node n) {
-    return trySimpilifyUnusedResult(n, true);
+  private Node trySimplifyUnusedResult(Node n) {
+    return trySimplifyUnusedResult(n, true);
   }
 
   /**
@@ -166,14 +166,14 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
    *     it is not useful, otherwise it replaced with an EMPTY node.
    * @return The replacement node, or null if the node was is not useful.
    */
-  private Node trySimpilifyUnusedResult(Node n, boolean removeUnused) {
+  private Node trySimplifyUnusedResult(Node n, boolean removeUnused) {
     Node result = n;
 
     // Simplify the results of conditional expressions
     switch (n.getType()) {
       case Token.HOOK:
-        Node trueNode = trySimpilifyUnusedResult(n.getFirstChild().getNext());
-        Node falseNode = trySimpilifyUnusedResult(n.getLastChild());
+        Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
+        Node falseNode = trySimplifyUnusedResult(n.getLastChild());
         // If one or more of the conditional children were removed,
         // transform the HOOK to an equivalent operation:
         //    x() ? foo() : 1 --> x() && foo()
@@ -187,7 +187,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
           n.setType(Token.AND);
           Preconditions.checkState(n.getChildCount() == 2);
         } else if (trueNode == null && falseNode == null) {
-          result = trySimpilifyUnusedResult(n.getFirstChild());
+          result = trySimplifyUnusedResult(n.getFirstChild());
         } else {
           // The structure didn't change.
           result = n;
@@ -198,13 +198,13 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
         // Try to remove the second operand from a AND or OR operations:
         //    x() || f --> x()
         //    x() && f --> x()
-        Node conditionalResultNode = trySimpilifyUnusedResult(
+        Node conditionalResultNode = trySimplifyUnusedResult(
             n.getLastChild());
         if (conditionalResultNode == null) {
           Preconditions.checkState(n.hasOneChild());
           // The conditionally executed code was removed, so
           // replace the AND/OR with its LHS or remove it if it isn't useful.
-          result = trySimpilifyUnusedResult(n.getFirstChild());
+          result = trySimplifyUnusedResult(n.getFirstChild());
         }
         break;
       case Token.FUNCTION:
@@ -217,8 +217,8 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
         // get split into individual EXPR_RESULT statement, if possible), so
         // we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
         // nodes.
-        Node left = trySimpilifyUnusedResult(n.getFirstChild());
-        Node right = trySimpilifyUnusedResult(n.getLastChild());
+        Node left = trySimplifyUnusedResult(n.getFirstChild());
+        Node right = trySimplifyUnusedResult(n.getLastChild());
         if (left == null && right == null) {
           result = null;
         } else if (left == null) {
@@ -237,7 +237,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
           Node resultList = null;
           for (Node next, c = n.getFirstChild(); c != null; c = next) {
             next = c.getNext();
-            c = trySimpilifyUnusedResult(c);
+            c = trySimplifyUnusedResult(c);
             if (c != null) {
               c.detachFromParent();
               if (resultList == null)  {
@@ -443,7 +443,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
     Node left = n.getFirstChild();
     Node right = left.getNext();
 
-    left = trySimpilifyUnusedResult(left);
+    left = trySimplifyUnusedResult(left);
     if (left == null || !mayHaveSideEffects(left)) {
       // Fold it!
       n.removeChild(right);
@@ -780,11 +780,11 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
     Node increment = cond.getNext();
 
     if (init.getType() != Token.EMPTY && init.getType() != Token.VAR) {
-      init = trySimpilifyUnusedResult(init, false);
+      init = trySimplifyUnusedResult(init, false);
     }
 
     if (increment.getType() != Token.EMPTY) {
-      increment = trySimpilifyUnusedResult(increment, false);
+      increment = trySimplifyUnusedResult(increment, false);
     }
 
     // There is an initializer skip it
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 9a5c9b76..b0bcbacc 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -360,6 +360,12 @@ public class CommandLineRunnerTest extends TestCase {
          "}");
   }
 
+  public void testIssue504() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("void function() { alert('hi'); }();",
+         "alert('hi');", CheckSideEffects.USELESS_CODE_ERROR);
+  }
+
   public void testDebugFlag1() {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     args.add("--debug=false");
@@ -865,6 +871,10 @@ public class CommandLineRunnerTest extends TestCase {
     test(new String[] { original }, warning);
   }
 
+  private void test(String original, String expected, DiagnosticType warning) {
+    test(new String[] { original }, new String[] { expected }, warning);
+  }
+
   /**
    * Asserts that when compiling, there is an error or warning.
    */
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index 238013e4..67571d6b 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -89,114 +89,114 @@ public class NodeUtilTest extends TestCase {
   }
 
   public void testGetBooleanValue() {
-    assertBooleanTrue("true");
-    assertBooleanTrue("10");
-    assertBooleanTrue("'0'");
-    assertBooleanTrue("/a/");
-    assertBooleanTrue("{}");
-    assertBooleanTrue("[]");
-    assertBooleanFalse("false");
-    assertBooleanFalse("null");
-    assertBooleanFalse("0");
-    assertBooleanFalse("''");
-    assertBooleanFalse("undefined");
-    assertBooleanFalse("void 0");
-    assertBooleanFalse("void foo()");
-    assertBooleanUnknown("b");
-    assertBooleanUnknown("-'0.0'");
+    assertPureBooleanTrue("true");
+    assertPureBooleanTrue("10");
+    assertPureBooleanTrue("'0'");
+    assertPureBooleanTrue("/a/");
+    assertPureBooleanTrue("{}");
+    assertPureBooleanTrue("[]");
+    assertPureBooleanFalse("false");
+    assertPureBooleanFalse("null");
+    assertPureBooleanFalse("0");
+    assertPureBooleanFalse("''");
+    assertPureBooleanFalse("undefined");
+    assertPureBooleanFalse("void 0");
+    assertPureBooleanUnknown("void foo()");
+    assertPureBooleanUnknown("b");
+    assertPureBooleanUnknown("-'0.0'");
 
     // Known but getBooleanValue return false for expressions with side-effects
-    assertBooleanUnknown("{a:foo()}");
-    assertBooleanUnknown("[foo()]");
+    assertPureBooleanUnknown("{a:foo()}");
+    assertPureBooleanUnknown("[foo()]");
   }
 
-  private void assertBooleanTrue(String val) {
+  private void assertPureBooleanTrue(String val) {
     assertEquals(TernaryValue.TRUE, NodeUtil.getPureBooleanValue(getNode(val)));
   }
 
-  private void assertBooleanFalse(String val) {
+  private void assertPureBooleanFalse(String val) {
     assertEquals(
         TernaryValue.FALSE, NodeUtil.getPureBooleanValue(getNode(val)));
   }
 
-  private void assertBooleanUnknown(String val) {
+  private void assertPureBooleanUnknown(String val) {
     assertEquals(
         TernaryValue.UNKNOWN, NodeUtil.getPureBooleanValue(getNode(val)));
   }
 
   public void testGetExpressionBooleanValue() {
-    assertExpressionBooleanTrue("a=true");
-    assertExpressionBooleanFalse("a=false");
+    assertImpureBooleanTrue("a=true");
+    assertImpureBooleanFalse("a=false");
 
-    assertExpressionBooleanTrue("a=(false,true)");
-    assertExpressionBooleanFalse("a=(true,false)");
+    assertImpureBooleanTrue("a=(false,true)");
+    assertImpureBooleanFalse("a=(true,false)");
 
-    assertExpressionBooleanTrue("a=(false || true)");
-    assertExpressionBooleanFalse("a=(true && false)");
+    assertImpureBooleanTrue("a=(false || true)");
+    assertImpureBooleanFalse("a=(true && false)");
 
-    assertExpressionBooleanTrue("a=!(true && false)");
+    assertImpureBooleanTrue("a=!(true && false)");
 
-    assertExpressionBooleanTrue("a,true");
-    assertExpressionBooleanFalse("a,false");
+    assertImpureBooleanTrue("a,true");
+    assertImpureBooleanFalse("a,false");
 
-    assertExpressionBooleanTrue("true||false");
-    assertExpressionBooleanFalse("false||false");
+    assertImpureBooleanTrue("true||false");
+    assertImpureBooleanFalse("false||false");
 
-    assertExpressionBooleanTrue("true&&true");
-    assertExpressionBooleanFalse("true&&false");
+    assertImpureBooleanTrue("true&&true");
+    assertImpureBooleanFalse("true&&false");
 
-    assertExpressionBooleanFalse("!true");
-    assertExpressionBooleanTrue("!false");
-    assertExpressionBooleanTrue("!''");
+    assertImpureBooleanFalse("!true");
+    assertImpureBooleanTrue("!false");
+    assertImpureBooleanTrue("!''");
 
     // Assignment ops other than ASSIGN are unknown.
-    assertExpressionBooleanUnknown("a *= 2");
+    assertImpureBooleanUnknown("a *= 2");
 
     // Complex expressions that contain anything other then "=", ",", or "!" are
     // unknown.
-    assertExpressionBooleanUnknown("2 + 2");
-
-    assertExpressionBooleanTrue("a=1");
-    assertExpressionBooleanTrue("a=/a/");
-    assertExpressionBooleanTrue("a={}");
-
-    assertExpressionBooleanTrue("true");
-    assertExpressionBooleanTrue("10");
-    assertExpressionBooleanTrue("'0'");
-    assertExpressionBooleanTrue("/a/");
-    assertExpressionBooleanTrue("{}");
-    assertExpressionBooleanTrue("[]");
-    assertExpressionBooleanFalse("false");
-    assertExpressionBooleanFalse("null");
-    assertExpressionBooleanFalse("0");
-    assertExpressionBooleanFalse("''");
-    assertExpressionBooleanFalse("undefined");
-    assertExpressionBooleanFalse("void 0");
-    assertExpressionBooleanFalse("void foo()");
-
-    assertExpressionBooleanTrue("a?true:true");
-    assertExpressionBooleanFalse("a?false:false");
-    assertExpressionBooleanUnknown("a?true:false");
-    assertExpressionBooleanUnknown("a?true:foo()");
-
-    assertExpressionBooleanUnknown("b");
-    assertExpressionBooleanUnknown("-'0.0'");
-
-    assertExpressionBooleanTrue("{a:foo()}");
-    assertExpressionBooleanTrue("[foo()]");
-  }
-
-  private void assertExpressionBooleanTrue(String val) {
+    assertImpureBooleanUnknown("2 + 2");
+
+    assertImpureBooleanTrue("a=1");
+    assertImpureBooleanTrue("a=/a/");
+    assertImpureBooleanTrue("a={}");
+
+    assertImpureBooleanTrue("true");
+    assertImpureBooleanTrue("10");
+    assertImpureBooleanTrue("'0'");
+    assertImpureBooleanTrue("/a/");
+    assertImpureBooleanTrue("{}");
+    assertImpureBooleanTrue("[]");
+    assertImpureBooleanFalse("false");
+    assertImpureBooleanFalse("null");
+    assertImpureBooleanFalse("0");
+    assertImpureBooleanFalse("''");
+    assertImpureBooleanFalse("undefined");
+    assertImpureBooleanFalse("void 0");
+    assertImpureBooleanFalse("void foo()");
+
+    assertImpureBooleanTrue("a?true:true");
+    assertImpureBooleanFalse("a?false:false");
+    assertImpureBooleanUnknown("a?true:false");
+    assertImpureBooleanUnknown("a?true:foo()");
+
+    assertImpureBooleanUnknown("b");
+    assertImpureBooleanUnknown("-'0.0'");
+
+    assertImpureBooleanTrue("{a:foo()}");
+    assertImpureBooleanTrue("[foo()]");
+  }
+
+  private void assertImpureBooleanTrue(String val) {
     assertEquals(TernaryValue.TRUE,
         NodeUtil.getImpureBooleanValue(getNode(val)));
   }
 
-  private void assertExpressionBooleanFalse(String val) {
+  private void assertImpureBooleanFalse(String val) {
     assertEquals(TernaryValue.FALSE,
         NodeUtil.getImpureBooleanValue(getNode(val)));
   }
 
-  private void assertExpressionBooleanUnknown(String val) {
+  private void assertImpureBooleanUnknown(String val) {
     assertEquals(TernaryValue.UNKNOWN,
         NodeUtil.getImpureBooleanValue(getNode(val)));
   }
