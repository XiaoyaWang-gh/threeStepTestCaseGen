diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
index 393ced60..c93a073c 100644
--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -693,7 +693,7 @@ class RemoveUnusedVars
    * y.foo = 3; // is a reference.
    * </code>
    *
-   * Interpreting assigments could mark a variable as referenced that
+   * Interpreting assignments could mark a variable as referenced that
    * wasn't referenced before, in order to keep it alive. Because we find
    * references by lazily traversing subtrees, marking a variable as
    * referenced could trigger new traversals of new subtrees, which could
@@ -729,6 +729,7 @@ class RemoveUnusedVars
             assignedToUnknownValue = true;
           }
 
+          boolean maybeEscaped = false;
           for (Assign assign : assignsByVar.get(var)) {
             if (assign.isPropertyAssign) {
               hasPropertyAssign = true;
@@ -736,9 +737,12 @@ class RemoveUnusedVars
                 assign.assignNode.getLastChild(), true)) {
               assignedToUnknownValue = true;
             }
+            if (assign.maybeAliased) {
+              maybeEscaped = true;
+            }
           }
 
-          if (assignedToUnknownValue && hasPropertyAssign) {
+          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {
             changes = markReferencedVar(var) || changes;
             maybeUnreferenced.remove(current);
             current--;
@@ -892,14 +896,18 @@ class RemoveUnusedVars
     // way.
     final boolean mayHaveSecondarySideEffects;
 
+    // If true, the value may have escaped and any modification is a use.
+    final boolean maybeAliased;
+
     Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {
       Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));
       this.assignNode = assignNode;
       this.nameNode = nameNode;
       this.isPropertyAssign = isPropertyAssign;
 
+      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);
       this.mayHaveSecondarySideEffects =
-          !assignNode.getParent().isExprResult() ||
+          maybeAliased ||
           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||
           NodeUtil.mayHaveSideEffects(assignNode.getLastChild());
     }
diff --git a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java
index 686b1d82..fdeca052 100644
--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java
+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java
@@ -735,4 +735,23 @@ public class RemoveUnusedVarsTest extends CompilerTestCase {
         "for (var i in x) { x[i].call(x); }" +
         "window['Foo'] = Foo;");
   }
+
+  public void testIssue618_1() {
+    this.removeGlobal = false;
+    testSame(
+        "function f() {\n" +
+        "  var a = [], b;\n" +
+        "  a.push(b = []);\n" +
+        "  b[0] = 1;\n" +
+        "  return a;\n" +
+        "}");
+  }
+
+  public void testIssue618_2() {
+    this.removeGlobal = false;
+    testSame(
+        "var b;\n" +
+        "a.push(b = []);\n" +
+        "b[0] = 1;\n");
+  }
 }
