diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index ef02b9c1..4acb363a 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -354,7 +354,7 @@ final class TypedScopeCreator implements ScopeCreator {
     declareNativeType(scope, name, typeRegistry.getNativeType(tId));
   }
 
-  private void declareNativeType(Scope scope, String name, JSType t) {
+  private static void declareNativeType(Scope scope, String name, JSType t) {
     scope.declare(name, null, t, null, false);
   }
 
@@ -1665,9 +1665,15 @@ final class TypedScopeCreator implements ScopeCreator {
         return true;
       }
 
-      // Prototype sets are always declared.
+      // Prototypes of constructors and interfaces are always declared.
       if (qName != null && qName.endsWith(".prototype")) {
-        return false;
+        String className = qName.substring(0, qName.lastIndexOf(".prototype"));
+        Var slot = scope.getSlot(className);
+        JSType classType = slot == null ? null : slot.getType();
+        if (classType != null
+            && (classType.isConstructor() || classType.isInterface())) {
+          return false;
+        }
       }
 
       boolean inferred = true;
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 28545ecf..65cb18f6 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -11989,6 +11989,37 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "Property x never defined on Foo.prototype", false);
   }
 
+  public void testIssue1024() throws Exception {
+     testTypes(
+        "/** @param {Object} a */\n" +
+        "function f(a) {\n" +
+        "  a.prototype = '__proto'\n" +
+        "}\n" +
+        "/** @param {Object} b\n" +
+        " *  @return {!Object}\n" +
+        " */\n" +
+        "function g(b) {\n" +
+        "  return b.prototype\n" +
+        "}\n");
+     /* TODO(blickly): Make this warning go away.
+      * This is old behavior, but it doesn't make sense to warn about since
+      * both assignments are inferred.
+      */
+     testTypes(
+        "/** @param {Object} a */\n" +
+        "function f(a) {\n" +
+        "  a.prototype = {foo:3};\n" +
+        "}\n" +
+        "/** @param {Object} b\n" +
+        " */\n" +
+        "function g(b) {\n" +
+        "  b.prototype = function(){};\n" +
+        "}\n",
+        "assignment to property prototype of Object\n" +
+        "found   : {foo: number}\n" +
+        "required: function (): undefined");
+  }
+
 
   private void testTypes(String js) throws Exception {
     testTypes(js, (String) null);
