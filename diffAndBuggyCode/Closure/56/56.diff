diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java
index fdc952ad..22414f63 100644
--- a/src/com/google/javascript/jscomp/SourceFile.java
+++ b/src/com/google/javascript/jscomp/SourceFile.java
@@ -235,8 +235,18 @@ public class SourceFile implements StaticSourceFile, Serializable {
     lastOffset = pos;
     lastLine = lineNumber;
 
-    return (js.indexOf('\n', pos) == -1) ? null :
-        js.substring(pos, js.indexOf('\n', pos));
+    if (js.indexOf('\n', pos) == -1) {
+      // If next new line cannot be found, there are two cases
+      // 1. pos already reaches the end of file, then null should be returned
+      // 2. otherwise, return the contents between pos and the end of file.
+      if (pos >= js.length()) {
+        return null;
+      } else {
+        return js.substring(pos, js.length());
+      }
+    } else {
+      return js.substring(pos, js.indexOf('\n', pos));
+    }
   }
 
   /**
diff --git a/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java b/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java
index e1efc223..2d988a3d 100644
--- a/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java
+++ b/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java
@@ -29,10 +29,12 @@ public class JSCompilerSourceExcerptProviderTest extends TestCase {
         "foo:first line\nfoo:second line\nfoo:third line\n");
     JSSourceFile bar = JSSourceFile.fromCode("bar",
         "bar:first line\nbar:second line\nbar:third line\nbar:fourth line\n");
+    JSSourceFile foo2 = JSSourceFile.fromCode("foo2",
+        "foo2:first line\nfoo2:second line\nfoo2:third line");
     Compiler compiler = new Compiler();
     CompilerOptions options = new CompilerOptions();
     compiler.init(
-        new JSSourceFile[] {}, new JSSourceFile[] {foo, bar}, options);
+        new JSSourceFile[] {}, new JSSourceFile[] {foo, bar, foo2}, options);
     this.provider = compiler;
   }
 
@@ -59,6 +61,13 @@ public class JSCompilerSourceExcerptProviderTest extends TestCase {
     assertEquals(null, provider.getSourceLine("bar", 5));
   }
 
+  public void testExceptNoNewLine() throws Exception {
+    assertEquals("foo2:first line", provider.getSourceLine("foo2", 1));
+    assertEquals("foo2:second line", provider.getSourceLine("foo2", 2));
+    assertEquals("foo2:third line", provider.getSourceLine("foo2", 3));
+    assertEquals(null, provider.getSourceLine("foo2", 4));
+  }
+
   public void testExcerptRegion() throws Exception {
     assertRegionWellFormed("foo", 1);
     assertRegionWellFormed("foo", 2);
diff --git a/test/com/google/javascript/jscomp/JsMessageExtractorTest.java b/test/com/google/javascript/jscomp/JsMessageExtractorTest.java
index 89a5d0c3..c88b37de 100644
--- a/test/com/google/javascript/jscomp/JsMessageExtractorTest.java
+++ b/test/com/google/javascript/jscomp/JsMessageExtractorTest.java
@@ -56,8 +56,10 @@ public class JsMessageExtractorTest extends TestCase {
       extractMessage("if (true) {}}");
       fail("Expected exception");
     } catch (RuntimeException e) {
-      assertEquals("JSCompiler errors\n" +
-          "testcode:1: ERROR - Parse error. syntax error\n", e.getMessage());
+      assertTrue(e.getMessage().contains("JSCompiler errors\n"));
+      assertTrue(e.getMessage().contains(
+          "testcode:1: ERROR - Parse error. syntax error\n"));
+      assertTrue(e.getMessage().contains("if (true) {}}\n"));
     }
   }
 
@@ -66,8 +68,10 @@ public class JsMessageExtractorTest extends TestCase {
       extractMessage("", "if (true) {}}");
       fail("Expected exception");
     } catch (RuntimeException e) {
-      assertEquals("JSCompiler errors\n" +
-          "testcode:2: ERROR - Parse error. syntax error\n", e.getMessage());
+      assertTrue(e.getMessage().contains("JSCompiler errors\n"));
+      assertTrue(e.getMessage().contains(
+          "testcode:2: ERROR - Parse error. syntax error\n"));
+      assertTrue(e.getMessage().contains("if (true) {}}\n"));
     }
   }
 
