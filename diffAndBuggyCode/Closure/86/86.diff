diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 5262f2d6..9049aae7 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2459,7 +2459,10 @@ public final class NodeUtil {
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        return true;
+        // TODO(nicksantos): This needs to be changed so that it
+        // returns true iff we're sure the value was never aliased from inside
+        // the constructor (similar to callHasLocalResult)
+        return false;
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index 36f5c6bc..2d6c9f18 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -1018,8 +1018,9 @@ public class NodeUtilTest extends TestCase {
     assertFalse(testLocalValue("this"));
     assertFalse(testLocalValue("arguments"));
 
-    // new objects are local
-    assertTrue(testLocalValue("new x()"));
+    // We can't know if new objects are local unless we know
+    // that they don't alias themselves.
+    assertFalse(testLocalValue("new x()"));
 
     // property references are assume to be non-local
     assertFalse(testLocalValue("(new x()).y"));
diff --git a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
index 36dfdfc9..33218422 100644
--- a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
+++ b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java
@@ -36,8 +36,11 @@ public class PureFunctionIdentifierTest extends CompilerTestCase {
 
   boolean regExpHaveSideEffects = true;
 
+  private static final boolean BROKEN_NEW = true;
+
   private static String kExterns =
       CompilerTypeTestCase.DEFAULT_EXTERNS +
+      "var window; window.setTimeout;" +
       "/**@nosideeffects*/ function externSENone(){}\n" +
 
       "/**@modifies{this}*/ function externSEThis(){}\n" +
@@ -184,6 +187,38 @@ public class PureFunctionIdentifierTest extends CompilerTestCase {
     boolean regExpHaveSideEffects = true;
   }
 
+  public void testIssue303() throws Exception {
+    checkMarkedCalls(
+        "/** @constructor */ function F() {" +
+        "  var self = this;" +
+        "  window.setTimeout(function() {" +
+        "    window.location = self.location;" +
+        "  }, 0);" +
+        "}" +
+        "F.prototype.setLocation = function(x) {" +
+        "  this.location = x;" +
+        "};" +
+        "(new F()).setLocation('http://www.google.com/');",
+        ImmutableList.<String>of());
+  }
+
+  public void testIssue303b() throws Exception {
+    checkMarkedCalls(
+        "/** @constructor */ function F() {" +
+        "  var self = this;" +
+        "  window.setTimeout(function() {" +
+        "    window.location = self.location;" +
+        "  }, 0);" +
+        "}" +
+        "F.prototype.setLocation = function(x) {" +
+        "  this.location = x;" +
+        "};" +
+        "function x() {" +
+        "  (new F()).setLocation('http://www.google.com/');" +
+        "} window['x'] = x;",
+        ImmutableList.<String>of());
+  }
+
   public void testAnnotationInExterns_new1() throws Exception {
     checkMarkedCalls("externSENone()",
         ImmutableList.<String>of("externSENone"));
@@ -202,9 +237,13 @@ public class PureFunctionIdentifierTest extends CompilerTestCase {
   public void testAnnotationInExterns_new4() throws Exception {
     // The entire expression containing "externObjSEThisMethod" is considered
     // side-effect free in this context.
+
     checkMarkedCalls("new externObjSEThis().externObjSEThisMethod('')",
-        ImmutableList.<String>of(
-            "externObjSEThis", "NEW STRING externObjSEThisMethod"));
+        BROKEN_NEW ?
+            ImmutableList.<String>of(
+               "externObjSEThis") :
+            ImmutableList.<String>of(
+               "externObjSEThis", "NEW STRING externObjSEThisMethod"));
   }
 
   public void testAnnotationInExterns_new5() throws Exception {
@@ -223,8 +262,11 @@ public class PureFunctionIdentifierTest extends CompilerTestCase {
         "  new externObjSEThis().externObjSEThisMethod('') " +
         "};" +
         "f();",
-        ImmutableList.<String>of(
-            "externObjSEThis", "NEW STRING externObjSEThisMethod", "f"));
+        BROKEN_NEW ?
+            ImmutableList.<String>of(
+                "externObjSEThis") :
+           ImmutableList.<String>of(
+               "externObjSEThis", "NEW STRING externObjSEThisMethod", "f"));
   }
 
   public void testAnnotationInExterns_new7() throws Exception {
@@ -732,7 +774,9 @@ public class PureFunctionIdentifierTest extends CompilerTestCase {
                      "  var a = new A; a.foo = 1; return a;" +
                      "}" +
                      "f()",
-                     ImmutableList.<String>of("A", "f"));
+                     BROKEN_NEW ?
+                         ImmutableList.<String>of("A") :
+                         ImmutableList.<String>of("A", "f"));
   }
 
   public void testLocalizedSideEffects9() throws Exception {
@@ -743,7 +787,9 @@ public class PureFunctionIdentifierTest extends CompilerTestCase {
                      "  var a = new A; a.foo = 1; return a;" +
                      "}" +
                      "f()",
-                     ImmutableList.<String>of("A", "f"));
+                     BROKEN_NEW ?
+                         ImmutableList.<String>of("A") :
+                         ImmutableList.<String>of("A", "f"));
   }
 
   public void testLocalizedSideEffects10() throws Exception {
