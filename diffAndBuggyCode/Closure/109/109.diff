diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index e642d758..c115e109 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1900,6 +1900,18 @@ public final class JsDocInfoParser {
     }
   }
 
+  /**
+   * ContextTypeExpression := BasicTypeExpression | '?'
+   * For expressions on the right hand side of a this: or new:
+   */
+  private Node parseContextTypeExpression(JsDocToken token) {
+    if (token == JsDocToken.QMARK) {
+      return newNode(Token.QMARK);
+    } else {
+      return parseBasicTypeExpression(token);
+    }
+  }
+
   /**
    * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName
    *     | FunctionType | UnionType | RecordType | ArrayType
@@ -2003,7 +2015,7 @@ public final class JsDocInfoParser {
             skipEOLs();
             Node contextType = wrapNode(
                 isThis ? Token.THIS : Token.NEW,
-                parseTypeName(next()));
+                parseContextTypeExpression(next()));
             if (contextType == null) {
               return null;
             }
diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
index ad564757..84e538b4 100644
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -581,6 +581,20 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
     assertFalse(type.isNominalConstructor());
   }
 
+  public void testStructuralConstructor2() throws Exception {
+    JSType type = testParseType(
+        "function (new:?)",
+        // toString skips unknowns, but isConstructor reveals the truth.
+        "function (): ?");
+    assertTrue(type.isConstructor());
+    assertFalse(type.isNominalConstructor());
+  }
+
+  public void testStructuralConstructor3() throws Exception {
+    resolve(parse("@type {function (new:*)} */").getType(),
+        "constructed type must be an object type");
+  }
+
   public void testNominalConstructor() throws Exception {
     ObjectType type = testParseType("Array", "(Array|null)").dereference();
     assertTrue(type.getConstructor().isNominalConstructor());
