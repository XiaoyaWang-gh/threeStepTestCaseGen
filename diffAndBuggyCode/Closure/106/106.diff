diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 46d7efa3..ccc9d678 100755
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java
index 58f1370b..47ea27a1 100644
--- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -900,6 +900,15 @@ class GlobalNamespace {
       if (type == Type.OTHER || globalSets != 1 || localSets != 0) {
         return false;
       }
+
+      // Don't try to collapse if the one global set is a twin reference.
+      // We could theoretically handle this case in CollapseProperties, but
+      // it's probably not worth the effort.
+      Preconditions.checkNotNull(declaration);
+      if (declaration.getTwin() != null) {
+        return false;
+      }
+
       if (isClassOrEnum) {
         return true;
       }
diff --git a/src/com/google/javascript/rhino/JSDocInfoBuilder.java b/src/com/google/javascript/rhino/JSDocInfoBuilder.java
index d7983173..bdfc2e80 100644
--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java
+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java
@@ -186,9 +186,7 @@ final public class JSDocInfoBuilder {
    * @return {@code true} if the description was recorded.
    */
   public boolean recordBlockDescription(String description) {
-    if (parseDocumentation) {
-      populated = true;
-    }
+    populated = true;
     return currentInfo.documentBlock(description);
   }
 
diff --git a/test/com/google/javascript/jscomp/CheckSideEffectsTest.java b/test/com/google/javascript/jscomp/CheckSideEffectsTest.java
index 76dc7260..b3d11692 100644
--- a/test/com/google/javascript/jscomp/CheckSideEffectsTest.java
+++ b/test/com/google/javascript/jscomp/CheckSideEffectsTest.java
@@ -81,4 +81,9 @@ public class CheckSideEffectsTest extends CompilerTestCase {
     test("function A() { this.foo; }", e);
     test("function A() { /** @type Number */ this.foo; }", ok);
   }
+
+  public void testJSDocComments() {
+    test("function A() { /** This is a jsdoc comment */ this.foo; }", ok);
+    test("function A() { /* This is a normal comment */ this.foo; }", e);
+  }
 }
diff --git a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
index b5c2960b..cac15c28 100644
--- a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
@@ -1096,4 +1096,19 @@ public class CollapsePropertiesTest extends CompilerTestCase {
          "var a$b = CreateClass({c: function() {}});" +
          "var a$d = CreateClass({c: a$b.prototype.c});");
   }
+
+  public void testCrashInCommaOperator() {
+    test("var a = {}; a.b = function() {},a.b();",
+         "var a$b; a$b=function() {},a$b();");
+  }
+
+  public void testCrashInNestedAssign() {
+    test("var a = {}; if (a.b = function() {}) a.b();",
+         "var a$b; if (a$b=function() {}) { a$b(); }");
+  }
+
+  public void testTwinReferenceCancelsChildCollapsing() {
+    test("var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }",
+         "var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }");
+  }
 }
