diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index ed88c98d..fa7d47d2 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -610,7 +610,13 @@ public abstract class ChainableReverseAbstractInterpreter
     public JSType caseObjectType(ObjectType type) {
       if (value.equals("function")) {
         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
+        if (resultEqualsValue) {
+          // Objects are restricted to "Function", subtypes are left
+          return ctorType.getGreatestSubtype(type);
+        } else {
+          // Only filter out subtypes of "function"
+          return type.isSubtype(ctorType) ? null : type;
+        }
       }
       return matchesExpectation("object") ? type : null;
     }
diff --git a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
index 7a5eedbf..704c969f 100644
--- a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
+++ b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
@@ -117,6 +117,20 @@ public class ClosureReverseAbstractInterpreterTest extends
         NULL_TYPE);
   }
 
+  public void testGoogIsFunction2() throws Exception {
+    testClosureFunction("goog.isFunction",
+        OBJECT_NUMBER_STRING_BOOLEAN,
+        U2U_CONSTRUCTOR_TYPE,
+        OBJECT_NUMBER_STRING_BOOLEAN);
+  }
+
+  public void testGoogIsFunction3() throws Exception {
+    testClosureFunction("goog.isFunction",
+        createUnionType(U2U_CONSTRUCTOR_TYPE,NUMBER_STRING_BOOLEAN),
+        U2U_CONSTRUCTOR_TYPE,
+        NUMBER_STRING_BOOLEAN);
+  }
+
   public void testGoogIsArray() throws Exception {
     testClosureFunction("goog.isArray",
         OBJECT_TYPE,
diff --git a/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
index 632f5a89..ea687a57 100644
--- a/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
+++ b/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
@@ -459,6 +459,35 @@ public class SemanticReverseAbstractInterpreterTest
             new TypedName("a", ALL_TYPE)));
   }
 
+  @SuppressWarnings("unchecked")
+  public void testTypeof3() {
+    FlowScope blind = newScope();
+    testBinop(blind,
+        Token.EQ,
+        new Node(Token.TYPEOF, createVar(
+            blind, "a", OBJECT_NUMBER_STRING_BOOLEAN)),
+        Node.newString("function"),
+        Sets.newHashSet(
+            new TypedName("a", U2U_CONSTRUCTOR_TYPE)),
+        Sets.newHashSet(
+            new TypedName("a", OBJECT_NUMBER_STRING_BOOLEAN)));
+  }
+
+  @SuppressWarnings("unchecked")
+  public void testTypeof4() {
+    FlowScope blind = newScope();
+    testBinop(blind,
+        Token.EQ,
+        new Node(Token.TYPEOF, createVar(
+            blind, "a", createUnionType(
+                U2U_CONSTRUCTOR_TYPE,NUMBER_STRING_BOOLEAN))),
+        Node.newString("function"),
+        Sets.newHashSet(
+            new TypedName("a", U2U_CONSTRUCTOR_TYPE)),
+        Sets.newHashSet(
+            new TypedName("a", NUMBER_STRING_BOOLEAN)));
+  }
+
   @SuppressWarnings("unchecked")
   public void testInstanceOf() {
     FlowScope blind = newScope();
