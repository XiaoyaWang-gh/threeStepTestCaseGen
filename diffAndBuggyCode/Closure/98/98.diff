diff --git a/lib/protobuf_deploy.jar b/lib/protobuf_deploy.jar
index 6d3c117b..0ba2e33b 100755
Binary files a/lib/protobuf_deploy.jar and b/lib/protobuf_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java
index 0e3c9864..b29886e0 100644
--- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -214,7 +214,7 @@ class CollapseProperties implements CompilerPass {
           collector.getReferenceCollection(aliasVar);
       if (aliasRefs.isWellDefined()
           && aliasRefs.firstReferenceIsAssigningDeclaration()
-          && aliasRefs.isAssignedOnce()) {
+          && aliasRefs.isAssignedOnceInLifetime()) {
         // The alias is well-formed, so do the inlining now.
         int size = aliasRefs.references.size();
         Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index b9538c35..c14c8456 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -178,7 +178,7 @@ class InlineVariables implements CompilerPass {
           // another pass that handles unused variables much more elegantly.
           if (referenceInfo != null && referenceInfo.references.size() >= 2 &&
               referenceInfo.isWellDefined() &&
-              referenceInfo.isAssignedOnce()) {
+              referenceInfo.isAssignedOnceInLifetime()) {
             Reference init = referenceInfo.getInitializingReference();
             Node value = init.getAssignedValue();
             if (value != null && value.getType() == Token.NAME) {
@@ -270,7 +270,7 @@ class InlineVariables implements CompilerPass {
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!staleVars.contains(v) && referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnce()) {
+          referenceInfo.isAssignedOnceInLifetime()) {
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNameNode();
@@ -425,7 +425,7 @@ class InlineVariables implements CompilerPass {
         return false;
       }
 
-      if (!refInfo.isAssignedOnce()) {
+      if (!refInfo.isAssignedOnceInLifetime()) {
         return false;
       }
 
diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
index 1e4b0ae9..da4ed3e0 100644
--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -348,22 +348,46 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {
     }
 
     /**
-     * @return Whether the variable is only assigned a value once.
+     * @return Whether the variable is only assigned a value once for its
+     *     lifetime.
      */
-    boolean isAssignedOnce() {
-      boolean assigned = false;
+    boolean isAssignedOnceInLifetime() {
+      Reference ref = getOneAndOnlyAssignment();
+      if (ref == null) {
+        return false;
+      }
+
+      // Make sure this assignment is not in a loop.
+      for (BasicBlock block = ref.getBasicBlock();
+           block != null; block = block.getParent()) {
+        if (block.isFunction) {
+          break;
+        } else if (block.isLoop) {
+          return false;
+        }
+      }
+
+      return true;
+    }
+
+    /**
+     * @return The one and only assignment. Returns if there are 0 or 2+
+     *    assignments.
+     */
+    private Reference getOneAndOnlyAssignment() {
+      Reference assignment = null;
       int size = references.size();
       for (int i = 0; i < size; i++) {
         Reference ref = references.get(i);
         if (ref.isLvalue() || ref.isInitializingDeclaration()) {
-          if (!assigned) {
-            assigned = true;
+          if (assignment == null) {
+            assignment = ref;
           } else {
-            return false;
+            return null;
           }
         }
       }
-      return assigned;
+      return assignment;
     }
 
     /**
@@ -453,7 +477,7 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {
     }
 
    /**
-    * @return For an assignment, variable declaration, or function declaration 
+    * @return For an assignment, variable declaration, or function declaration
     * return the assigned value, otherwise null.
     */
     Node getAssignedValue() {
@@ -523,6 +547,16 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {
      */
     private final boolean isHoisted;
 
+    /**
+     * Whether this block denotes a function scope.
+     */
+    private final boolean isFunction;
+
+    /**
+     * Whether this block denotes a loop.
+     */
+    private final boolean isLoop;
+
     /**
      * Creates a new block.
      * @param parent The containing block.
@@ -533,6 +567,17 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {
 
       // only named functions may be hoisted.
       this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);
+
+      this.isFunction = root.getType() == Token.FUNCTION;
+
+      if (root.getParent() != null) {
+        int pType = root.getParent().getType();
+        this.isLoop = pType == Token.DO ||
+            pType == Token.WHILE ||
+            pType == Token.FOR;
+      } else {
+        this.isLoop = false;
+      }
     }
 
     BasicBlock getParent() {
diff --git a/test/com/google/javascript/jscomp/InlineVariablesTest.java b/test/com/google/javascript/jscomp/InlineVariablesTest.java
index f4742731..7c2d91e9 100644
--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java
@@ -593,6 +593,38 @@ public class InlineVariablesTest extends CompilerTestCase {
          "var x; x = this.foo(); this.bar(); function f() { this.baz(x); }");
   }
 
+  public void testInlineAliasesInLoop() {
+    test(
+        "function f() { " +
+        "  var x = extern();" +
+        "  for (var i = 0; i < 5; i++) {" +
+        "    (function() {" +
+        "       var y = x; window.setTimeout(function() { extern(y); }, 0);" +
+        "     })();" +
+        "  }" +
+        "}",
+        "function f() { " +
+        "  var x = extern();" +
+        "  for (var i = 0; i < 5; i++) {" +
+        "    (function() {" +
+        "       window.setTimeout(function() { extern(x); }, 0);" +
+        "     })();" +
+        "  }" +
+        "}");
+  }
+
+  public void testNoInlineAliasesInLoop() {
+    testSame(
+        "function f() { " +
+        "  for (var i = 0; i < 5; i++) {" +
+        "    var x = extern();" +
+        "    (function() {" +
+        "       var y = x; window.setTimeout(function() { extern(y); }, 0);" +
+        "     })();" +
+        "  }" +
+        "}");
+  }
+
   public void testNoInlineAliases1() {
     testSame(
         "var x = this.foo(); this.bar(); var y = x; x = 3; this.baz(y);");
