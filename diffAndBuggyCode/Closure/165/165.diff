diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
index 8477243b..edce9bfd 100644
--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -691,7 +691,15 @@ public class JSTypeRegistry implements Serializable {
     if (typesIndexedByProperty.containsKey(propertyName)) {
       for (JSType alt :
                typesIndexedByProperty.get(propertyName).getAlternates()) {
-        if (!alt.getGreatestSubtype(type).isEmptyType()) {
+        JSType greatestSubtype = alt.getGreatestSubtype(type);
+        if (!greatestSubtype.isEmptyType()) {
+          // We've found a type with this property. Now we just have to make
+          // sure it's not a type used for internal bookkeeping.
+          RecordType maybeRecordType = greatestSubtype.toMaybeRecordType();
+          if (maybeRecordType != null && maybeRecordType.isSynthetic()) {
+            continue;
+          }
+
           return true;
         }
       }
diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
index ec605949..37bd4870 100644
--- a/src/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
@@ -262,7 +262,7 @@ public abstract class ObjectType extends JSType implements StaticScope<JSType> {
   public abstract ObjectType getImplicitPrototype();
 
   /**
-   * Defines a property whose type is synthesized (i.e. not inferred).
+   * Defines a property whose type is explicitly declared by the programmer.
    * @param propertyName the property's name
    * @param type the type
    * @param propertyNode the node corresponding to the declaration of property
@@ -282,6 +282,16 @@ public abstract class ObjectType extends JSType implements StaticScope<JSType> {
     return result;
   }
 
+  /**
+   * Defines a property whose type is on a synthesized object. These objects
+   * don't actually exist in the user's program. They're just used for
+   * bookkeeping in the type system.
+   */
+  public final boolean defineSynthesizedProperty(String propertyName,
+      JSType type, Node propertyNode) {
+    return defineProperty(propertyName, type, false, propertyNode);
+  }
+
   /**
    * Defines a property whose type is inferred.
    * @param propertyName the property's name
diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java
index b418dbdd..8ff279cb 100755
--- a/src/com/google/javascript/rhino/jstype/RecordType.java
+++ b/src/com/google/javascript/rhino/jstype/RecordType.java
@@ -65,19 +65,30 @@ class RecordType extends PrototypeObjectType {
   private static final long serialVersionUID = 1L;
 
   private final SortedMap<String, JSType> properties = Maps.newTreeMap();
+  private final boolean declared;
   private boolean isFrozen = false;
 
+  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
+    this(registry, properties, true);
+  }
+
   /**
    * Creates a record type.
    *
    * @param registry The type registry under which this type lives.
    * @param properties A map of all the properties of this record type.
+   * @param declared Whether this is a declared or synthesized type.
+   *     A synthesized record type is just used for bookkeeping
+   *     in the type system. A declared record type was actually used in the
+   *     user's program.
    * @throws IllegalStateException if the {@code RecordProperty} associated
    *         with a property is null.
    */
-  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
+  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties,
+      boolean declared) {
     super(registry, null, null);
     setPrettyPrint(true);
+    this.declared = declared;
 
     for (String property : properties.keySet()) {
       RecordProperty prop = properties.get(property);
@@ -85,13 +96,24 @@ class RecordType extends PrototypeObjectType {
         throw new IllegalStateException(
             "RecordProperty associated with a property should not be null!");
       }
-      defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode());
+      if (declared) {
+        defineDeclaredProperty(
+            property, prop.getType(), prop.getPropertyNode());
+      } else {
+        defineSynthesizedProperty(
+            property, prop.getType(), prop.getPropertyNode());
+      }
     }
 
     // Freeze the record type.
     isFrozen = true;
   }
 
+  /** @return Is this synthesized for internal bookkeeping? */
+  boolean isSynthetic() {
+    return !declared;
+  }
+
   @Override
   public boolean isEquivalentTo(JSType other) {
     if (!other.isRecordType()) {
@@ -141,6 +163,7 @@ class RecordType extends PrototypeObjectType {
     if (that.isRecordType()) {
       RecordType thatRecord = that.toMaybeRecordType();
       RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+      builder.setSynthesized(true);
 
       // The greatest subtype consists of those *unique* properties of both
       // record types. If any property conflicts, then the NO_TYPE type
diff --git a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
index 9c538f5a..60d1e103 100755
--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
@@ -51,6 +51,7 @@ import java.util.HashMap;
  */
 public class RecordTypeBuilder {
   private boolean isEmpty = true;
+  private boolean isDeclared = true;
   private final JSTypeRegistry registry;
   private final HashMap<String, RecordProperty> properties = Maps.newHashMap();
 
@@ -58,6 +59,11 @@ public class RecordTypeBuilder {
     this.registry = registry;
   }
 
+  /** See the comments on RecordType about synthetic types. */
+  void setSynthesized(boolean synthesized) {
+    isDeclared = !synthesized;
+  }
+
   /**
    * Adds a property with the given name and type to the record type.
    * @param name the name of the new property
@@ -86,7 +92,8 @@ public class RecordTypeBuilder {
        return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
     }
 
-    return registry.createRecordType(Collections.unmodifiableMap(properties));
+    return new RecordType(
+        registry, Collections.unmodifiableMap(properties), isDeclared);
   }
 
   static class RecordProperty {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 4ca0c917..b13e031f 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -5848,6 +5848,16 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "callee();");
   }
 
+  public void testIssue725() throws Exception {
+    testTypes(
+        "/** @typedef {{name: string}} */ var RecordType1;" +
+        "/** @typedef {{name2: string}} */ var RecordType2;" +
+        "/** @param {RecordType1} rec */ function f(rec) {" +
+        "  alert(rec.name2);" +
+        "}",
+        "Property name2 never defined on rec");
+  }
+
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
