diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java
index ab2d2c7c..f86625f7 100644
--- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -169,7 +169,7 @@ class CollapseProperties implements CompilerPass {
         continue;
       }
 
-      if (name.globalSets == 1 && name.localSets == 0 &&
+      if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
diff --git a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
index 77e5e95c..bda75f7b 100644
--- a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
@@ -27,8 +27,11 @@ import com.google.javascript.rhino.Node;
 public class CollapsePropertiesTest extends CompilerTestCase {
 
   private static String EXTERNS =
-      "var window; function alert(s) {} function parseInt(s) {}" +
-      "/** @constructor */ function String() {}";
+      "var window;\n" +
+      "function alert(s) {}\n" +
+      "function parseInt(s) {}\n" +
+      "/** @constructor */ function String() {};\n" +
+      "var arguments";
 
   private boolean collapsePropertiesOnExternTypes = false;
 
@@ -1093,6 +1096,17 @@ public class CollapsePropertiesTest extends CompilerTestCase {
          "}", null, null);
   }
 
+  public void testIssue931() {
+    collapsePropertiesOnExternTypes = true;
+    testSame(
+      "function f() {\n" +
+      "  return function () {\n" +
+      "    var args = arguments;\n" +
+      "    setTimeout(function() { alert(args); }, 0);\n" +
+      "  }\n" +
+      "};\n");
+  }
+
   public void testDoNotCollapsePropertyOnExternType() {
     collapsePropertiesOnExternTypes = false;
     test("String.myFunc = function() {}; String.myFunc()",
