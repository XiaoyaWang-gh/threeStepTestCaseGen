diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
index f9987784..b5a3c1b2 100644
--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java
+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
@@ -192,8 +192,11 @@ public class ClosureCodingConvention extends DefaultCodingConvention {
       Node callee = node.getFirstChild();
       if (callee != null && callee.getType() == Token.GETPROP) {
         String qualifiedName = callee.getQualifiedName();
-        if ((functionName).equals(qualifiedName)) {
-          className = callee.getNext().getString();
+        if (functionName.equals(qualifiedName)) {
+          Node target = callee.getNext();
+          if (target != null && target.getType() == Token.STRING) {
+            className = target.getString();
+          }
         }
       }
     }
diff --git a/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java b/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java
index 9704d8e0..e7f60f75 100644
--- a/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java
+++ b/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java
@@ -191,6 +191,13 @@ public class ClosureCodingConventionTest extends TestCase {
     assertFunctionBind("Function.prototype.bind.call(obj, p1)");
   }
 
+  public void testRequire() {
+    assertRequire("goog.require('foo')");
+    assertNotRequire("goog.require(foo)");
+    assertNotRequire("goog.require()");
+    assertNotRequire("foo()");
+  }
+
   private void assertFunctionBind(String code) {
     Node n = parseTestCode(code);
     assertNotNull(conv.describeFunctionBind(n.getFirstChild()));
@@ -201,6 +208,16 @@ public class ClosureCodingConventionTest extends TestCase {
     assertNull(conv.describeFunctionBind(n.getFirstChild()));
   }
 
+  private void assertRequire(String code) {
+    Node n = parseTestCode(code);
+    assertNotNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));
+  }
+
+  private void assertNotRequire(String code) {
+    Node n = parseTestCode(code);
+    assertNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));
+  }
+
   private void assertNotObjectLiteralCast(String code) {
     Node n = parseTestCode(code);
     assertNull(conv.getObjectLiteralCast(null, n.getFirstChild()));
