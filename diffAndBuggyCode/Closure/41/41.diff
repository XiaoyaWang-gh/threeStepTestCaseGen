diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
index e2f0f437..e20d788d 100644
--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -271,7 +271,7 @@ final class FunctionTypeBuilder {
               oldParam.isVarArgs() ||
               oldParam.isOptionalArg();
 
-          // The subclass method might right its var_args as individual
+          // The subclass method might write its var_args as individual
           // arguments.
           if (currentParam.getNext() != null && newParam.isVarArgs()) {
             newParam.setVarArgs(false);
@@ -287,6 +287,12 @@ final class FunctionTypeBuilder {
               codingConvention.isVarArgsParameter(currentParam));
         }
       }
+
+      // Clone any remaining params that aren't in the function literal.
+      while (oldParams.hasNext()) {
+        paramBuilder.newParameterFromNode(oldParams.next());
+      }
+
       parametersNode = paramBuilder.build();
     }
     return this;
@@ -437,6 +443,7 @@ final class FunctionTypeBuilder {
         Sets.<String>newHashSet() :
         Sets.newHashSet(info.getParameterNames());
     boolean foundTemplateType = false;
+    boolean isVarArgs = false;
     for (Node arg : argsParent.children()) {
       String argumentName = arg.getString();
       allJsDocParams.remove(argumentName);
@@ -444,7 +451,8 @@ final class FunctionTypeBuilder {
       // type from JSDocInfo
       JSType parameterType = null;
       boolean isOptionalParam = isOptionalParameter(arg, info);
-      boolean isVarArgs = isVarArgsParameter(arg, info);
+      isVarArgs = isVarArgsParameter(arg, info);
+
       if (info != null && info.hasParameterType(argumentName)) {
         parameterType =
             info.getParameterType(argumentName).evaluate(scope, typeRegistry);
@@ -474,6 +482,14 @@ final class FunctionTypeBuilder {
       }
     }
 
+    // Copy over any old parameters that aren't in the param list.
+    if (!isVarArgs) {
+      while (oldParameterType != null && !isVarArgs) {
+        builder.newParameterFromNode(oldParameterType);
+        oldParameterType = oldParameterType.getNext();
+      }
+    }
+
     if (templateTypeName != null && !foundTemplateType) {
       reportError(TEMPLATE_TYPE_EXPECTED, fnName);
     }
diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index 4c481b46..152da7e9 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -1775,10 +1775,7 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ G.prototype.foo = function() { };" +
-        "(new G()).foo(1);",
-        "Function G.prototype.foo: called with 1 argument(s). " +
-        "Function requires at least 0 argument(s) " +
-        "and no more than 0 argument(s).");
+        "(new G()).foo(1);");
   }
 
   public void testMethodInference7() throws Exception {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 11613655..7544dde6 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2030,10 +2030,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ G.prototype.foo = function() { };" +
-        "(new G()).foo(1);",
-        "Function G.prototype.foo: called with 1 argument(s). " +
-        "Function requires at least 0 argument(s) " +
-        "and no more than 0 argument(s).");
+        "(new G()).foo(1);");
   }
 
   public void testMethodInference7() throws Exception {
@@ -5325,6 +5322,27 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "Property indexOf never defined on String.prototype.toLowerCase");
   }
 
+  public void testIssue368() throws Exception {
+    testTypes(
+        "/** @constructor */ function Foo(){}" +
+        "/**\n" +
+        " * @param {number} one\n" +
+        " * @param {string} two\n" +
+        " */\n" +
+        "Foo.prototype.add = function(one, two) {};" +
+        "/**\n" +
+        " * @constructor\n" +
+        " * @extends {Foo}\n" +
+        " */\n" +
+        "function Bar(){}" +
+        "/** @override */\n" +
+        "Bar.prototype.add = function(ignored) {};" +
+        "(new Bar()).add(1, 2);",
+        "actual parameter 2 of Bar.prototype.add does not match formal parameter\n" +
+        "found   : number\n" +
+        "required: string");
+  }
+
   public void testIssue380() throws Exception {
     testTypes(
         "/** @type { function(string): {innerHTML: string} } */" +
