diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index cec8b2df..8c5d125f 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -325,13 +325,34 @@ public final class NodeUtil {
       case Token.FALSE:
         return true;
 
-      // Single operators are valid if the child is valid.
+      // Binary operators are only valid if both children are valid.
+      case Token.ADD:
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+      case Token.DIV:
+      case Token.EQ:
+      case Token.GE:
+      case Token.GT:
+      case Token.LE:
+      case Token.LSH:
+      case Token.LT:
+      case Token.MOD:
+      case Token.MUL:
+      case Token.NE:
+      case Token.RSH:
+      case Token.SHEQ:
+      case Token.SHNE:
+      case Token.SUB:
+      case Token.URSH:
+        return isValidDefineValue(val.getFirstChild(), defines)
+            && isValidDefineValue(val.getLastChild(), defines);
+
+      // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
+      case Token.POS:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       // Names are valid if and only if they are defines themselves.
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index aa052ecb..61d4c31d 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -18,6 +18,7 @@ package com.google.javascript.jscomp;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.javascript.rhino.Node;
@@ -1066,4 +1067,35 @@ public class NodeUtilTest extends TestCase {
 
     return NodeUtil.evaluatesToLocalValue(value);
   }
+  
+  public void testValidDefine() {
+    assertTrue(testValidDefineValue("1"));
+    assertTrue(testValidDefineValue("-3"));
+    assertTrue(testValidDefineValue("true"));
+    assertTrue(testValidDefineValue("false"));
+    assertTrue(testValidDefineValue("'foo'"));
+    
+    assertFalse(testValidDefineValue("x"));
+    assertFalse(testValidDefineValue("null"));
+    assertFalse(testValidDefineValue("undefined"));
+    assertFalse(testValidDefineValue("NaN"));
+    
+    assertTrue(testValidDefineValue("!true"));
+    assertTrue(testValidDefineValue("-true"));
+    assertTrue(testValidDefineValue("1 & 8"));
+    assertTrue(testValidDefineValue("1 + 8"));
+    assertTrue(testValidDefineValue("'a' + 'b'"));
+
+    assertFalse(testValidDefineValue("1 & foo"));
+  }
+  
+  private boolean testValidDefineValue(String js) {
+    Node script = parse("var test = " + js +";");
+    Node var = script.getFirstChild();
+    Node name = var.getFirstChild();
+    Node value = name.getFirstChild();
+
+    ImmutableSet<String> defines = ImmutableSet.of();
+    return NodeUtil.isValidDefineValue(value, defines);   
+  }
 }
diff --git a/test/com/google/javascript/jscomp/ProcessDefinesTest.java b/test/com/google/javascript/jscomp/ProcessDefinesTest.java
index b4b38169..6ab1ae71 100644
--- a/test/com/google/javascript/jscomp/ProcessDefinesTest.java
+++ b/test/com/google/javascript/jscomp/ProcessDefinesTest.java
@@ -84,10 +84,15 @@ public class ProcessDefinesTest extends CompilerTestCase {
         null, ProcessDefines.INVALID_DEFINE_TYPE_ERROR);
   }
 
-  public void testDefineWithBadValue() {
+  public void testDefineWithBadValue1() {
     test("/** @define {boolean} */ var DEF = new Boolean(true);", null,
         ProcessDefines.INVALID_DEFINE_INIT_ERROR);
   }
+  
+  public void testDefineWithBadValue2() {
+    test("/** @define {string} */ var DEF = 'x' + y;", null,
+        ProcessDefines.INVALID_DEFINE_INIT_ERROR);
+  }  
 
   public void testDefineWithDependentValue() {
     test("/** @define {boolean} */ var BASE = false;\n" +
@@ -132,6 +137,32 @@ public class ProcessDefinesTest extends CompilerTestCase {
         "var DEF_OVERRIDE_TO_TRUE=true");
   }
 
+  public void testOverridingString0() {
+    test(
+        "/** @define {string} */ var DEF_OVERRIDE_STRING = 'x';",
+        "var DEF_OVERRIDE_STRING=\"x\"");
+  }
+  
+  public void testOverridingString1() {
+    test(
+        "/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';",
+        "var DEF_OVERRIDE_STRING=\"x\" + \"y\"");
+  }  
+  
+  public void testOverridingString2() {
+    overrides.put("DEF_OVERRIDE_STRING", Node.newString("foo"));
+    test(
+        "/** @define {string} */ var DEF_OVERRIDE_STRING = 'x';",
+        "var DEF_OVERRIDE_STRING=\"foo\"");
+  }  
+  
+  public void testOverridingString3() {
+    overrides.put("DEF_OVERRIDE_STRING", Node.newString("foo"));
+    test(
+        "/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';",
+        "var DEF_OVERRIDE_STRING=\"foo\"");
+  }
+  
   public void testMisspelledOverride() {
     overrides.put("DEF_BAD_OVERIDE", new Node(Token.TRUE));
     test("/** @define {boolean} */ var DEF_BAD_OVERRIDE = true",
