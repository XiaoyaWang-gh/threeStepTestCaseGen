diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index a7544505..d92b16cb 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -327,25 +327,30 @@ class InlineObjectLiterals implements CompilerPass {
                    NodeUtil.newUndefinedNode(null)));
       }
 
-      // All assignments evaluate to true, so make sure that the
-      // expr statement evaluates to true in case it matters.
-      nodes.add(new Node(Token.TRUE));
-
-      // Join these using COMMA.  A COMMA node must have 2 children, so we
-      // create a tree. In the tree the first child be the COMMA to match
-      // the parser, otherwise tree equality tests fail.
-      nodes = Lists.reverse(nodes);
-      Node replacement = new Node(Token.COMMA);
-      Node cur = replacement;
-      int i;
-      for (i = 0; i < nodes.size() - 2; i++) {
+      Node replacement;
+      if (nodes.isEmpty()) {
+        replacement = new Node(Token.TRUE);
+      } else {
+        // All assignments evaluate to true, so make sure that the
+        // expr statement evaluates to true in case it matters.
+        nodes.add(new Node(Token.TRUE));
+
+        // Join these using COMMA.  A COMMA node must have 2 children, so we
+        // create a tree. In the tree the first child be the COMMA to match
+        // the parser, otherwise tree equality tests fail.
+        nodes = Lists.reverse(nodes);
+        replacement = new Node(Token.COMMA);
+        Node cur = replacement;
+        int i;
+        for (i = 0; i < nodes.size() - 2; i++) {
+          cur.addChildToFront(nodes.get(i));
+          Node t = new Node(Token.COMMA);
+          cur.addChildToFront(t);
+          cur = t;
+        }
         cur.addChildToFront(nodes.get(i));
-        Node t = new Node(Token.COMMA);
-        cur.addChildToFront(t);
-        cur = t;
+        cur.addChildToFront(nodes.get(i + 1));
       }
-      cur.addChildToFront(nodes.get(i));
-      cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
diff --git a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
index 2d764291..2e15d4f4 100644
--- a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
+++ b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
@@ -356,6 +356,11 @@ public class InlineObjectLiteralsTest extends CompilerTestCase {
          "new JSCompiler_object_inline_b_0.c");
   }
 
+  public void testBug545() {
+    testLocal("var a = {}", "");
+    testLocal("var a; a = {}", "true");
+  }
+
   private final String LOCAL_PREFIX = "function local(){";
   private final String LOCAL_POSTFIX = "}";
 
