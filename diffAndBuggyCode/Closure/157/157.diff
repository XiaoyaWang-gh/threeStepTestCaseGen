diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 22df6851..593ec05d 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -340,13 +340,20 @@ class CodeGenerator {
         Node body = fn.getLastChild();
 
         // Add the property name.
-        if (TokenStream.isJSIdentifier(name) &&
+        if (!n.isQuotedString() &&
+            TokenStream.isJSIdentifier(name) &&
             // do not encode literally any non-literal characters that were
             // unicode escaped.
             NodeUtil.isLatin(name)) {
           add(name);
         } else {
-          add(jsString(n.getString(), outputCharsetEncoder));
+          // Determine if the string is a simple number.
+          double d = getSimpleNumber(name);
+          if (!Double.isNaN(d)) {
+            cc.addNumber(d);
+          } else {
+            add(jsString(n.getString(), outputCharsetEncoder));
+          }
         }
 
         add(parameters);
@@ -650,18 +657,25 @@ class CodeGenerator {
           if (c.getType() == Token.GET || c.getType() == Token.SET) {
             add(c);
           } else {
-            // Object literal property names don't have to be quoted if they are
-            // not JavaScript keywords
-            if (c.getType() == Token.STRING &&
-                !c.isQuotedString() &&
-                !TokenStream.isKeyword(c.getString()) &&
-                TokenStream.isJSIdentifier(c.getString()) &&
-                // do not encode literally any non-literal characters that were
-                // unicode escaped.
-                NodeUtil.isLatin(c.getString())) {
-              add(c.getString());
+            Preconditions.checkState(c.getType() == Token.STRING);
+            String key = c.getString();
+            // Object literal property names don't have to be quoted if they
+            // are not JavaScript keywords
+            if (!c.isQuotedString() &&
+                !TokenStream.isKeyword(key) &&
+                TokenStream.isJSIdentifier(key) &&
+                // do not encode literally any non-literal characters that
+                // were unicode escaped.
+                NodeUtil.isLatin(key)) {
+              add(key);
             } else {
-              addExpr(c, 1);
+              // Determine if the string is a simple number.
+              double d = getSimpleNumber(key);
+              if (!Double.isNaN(d)) {
+                cc.addNumber(d);
+              } else {
+                addExpr(c, 1);
+              }
             }
             add(":");
             addExpr(c.getFirstChild(), 1);
@@ -719,6 +733,27 @@ class CodeGenerator {
     cc.endSourceMapping(n);
   }
 
+  static boolean isSimpleNumber(String s) {
+    int len = s.length();
+    for (int index = 0; index < len; index++) {
+      char c = s.charAt(index);
+      if (c < '0' || c > '9') {
+        return false;
+      }
+    }
+    return len > 0;
+  }
+
+  static double getSimpleNumber(String s) {
+    if (isSimpleNumber(s)) {
+      long l = Long.parseLong(s);
+      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
+        return l;
+      }
+    }
+    return Double.NaN;
+  }
+
   /**
    * @return Whether the name is an indirect eval.
    */
diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index c97e091d..28222def 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -45,6 +45,8 @@ import javax.annotation.Nullable;
  */
 public final class NodeUtil {
 
+  static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);
+
   final static String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";
 
   // TODO(user): Eliminate this class and make all of the static methods
@@ -156,7 +158,6 @@ public final class NodeUtil {
     return TernaryValue.UNKNOWN;
   }
 
-
   /**
    * Gets the value of a node as a String, or null if it cannot be converted.
    * When it returns a non-null String, this method effectively emulates the
@@ -178,15 +179,7 @@ public final class NodeUtil {
         break;
 
       case Token.NUMBER:
-        double value = n.getDouble();
-        long longValue = (long) value;
-
-        // Return "1" instead of "1.0"
-        if (longValue == value) {
-          return Long.toString(longValue);
-        } else {
-          return Double.toString(n.getDouble());
-        }
+        return getStringValue(n.getDouble());
 
       case Token.FALSE:
       case Token.TRUE:
@@ -212,6 +205,17 @@ public final class NodeUtil {
     return null;
   }
 
+  static String getStringValue(double value) {
+    long longValue = (long) value;
+
+    // Return "1" instead of "1.0"
+    if (longValue == value) {
+      return Long.toString(longValue);
+    } else {
+      return Double.toString(value);
+    }
+  }
+
   /**
    * When converting arrays to string using Array.prototype.toString or
    * Array.prototype.join, the rules for conversion to String are different
diff --git a/src/com/google/javascript/jscomp/RenamePrototypes.java b/src/com/google/javascript/jscomp/RenamePrototypes.java
index 048fc5ff..d7558d00 100644
--- a/src/com/google/javascript/jscomp/RenamePrototypes.java
+++ b/src/com/google/javascript/jscomp/RenamePrototypes.java
@@ -21,6 +21,7 @@ import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
+import com.google.javascript.rhino.TokenStream;
 
 import java.util.Arrays;
 import java.util.Comparator;
@@ -332,7 +333,7 @@ class RenamePrototypes implements CompilerPass {
                  child != null;
                  child = child.getNext()) {
 
-              if (child.getType() != Token.NUMBER) {
+              if (TokenStream.isJSIdentifier(child.getString())) {
                 markObjLitPropertyCandidate(child, t.getInput());
               }
             }
@@ -373,7 +374,8 @@ class RenamePrototypes implements CompilerPass {
 
             for (Node key = map.getFirstChild();
                  key != null; key = key.getNext()) {
-              if (key.getType() != Token.NUMBER) { // May be STRING, GET, or SET
+              if (TokenStream.isJSIdentifier(key.getString())) {
+               // May be STRING, GET, or SET
                 markPrototypePropertyCandidate(key, input);
               }
             }
diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java
index 98a85d52..3d1db67d 100644
--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java
+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java
@@ -252,6 +252,27 @@ public class IRFactory {
     return irNode;
   }
 
+  private Node transformNumberAsString(NumberLiteral literalNode) {
+    JSDocInfo jsDocInfo = handleJsDoc(literalNode);
+    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));
+    if (jsDocInfo != null) {
+      irNode.setJSDocInfo(jsDocInfo);
+    }
+    setSourceInfo(irNode, literalNode);
+    return irNode;
+  }
+
+  private static String getStringValue(double value) {
+    long longValue = (long) value;
+
+    // Return "1" instead of "1.0"
+    if (longValue == value) {
+      return Long.toString(longValue);
+    } else {
+      return Double.toString(value);
+    }
+  }
+
   private void setSourceInfo(Node irNode, AstNode node) {
     // If we have a named function, set the position to that of the name.
     if (irNode.getType() == Token.FUNCTION &&
@@ -340,14 +361,14 @@ public class IRFactory {
       Node ret;
       if (n instanceof Name) {
         ret = transformNameAsString((Name)n);
+      } else if (n instanceof NumberLiteral) {
+        ret = transformNumberAsString((NumberLiteral)n);
+        ret.putBooleanProp(Node.QUOTED_PROP, true);
       } else {
         ret = transform(n);
-        Preconditions.checkState(ret.getType() == Token.NUMBER
-            || ret.getType() == Token.STRING);
-        if (ret.getType() == Token.STRING) {
-          ret.putBooleanProp(Node.QUOTED_PROP, true);
-        }
+        ret.putBooleanProp(Node.QUOTED_PROP, true);
       }
+      Preconditions.checkState(ret.getType() == Token.STRING);
       return ret;
     }
 
diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index 0b35aa2a..8d41e81e 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -147,7 +147,6 @@ public class Node implements Cloneable, Serializable {
       DIRECT_EVAL        = 48,    // ES5 distinguishes between direct and
                                   // indirect calls to eval.
       FREE_CALL          = 49,    // A CALL without an explicit "this" value.
-                                  //
       LAST_PROP          = 49;
 
   // values of ISNUMBER_PROP to specify
@@ -218,9 +217,9 @@ public class Node implements Cloneable, Serializable {
         case QUOTED_PROP:        return "quoted";
 
         case SYNTHETIC_BLOCK_PROP: return "synthetic";
-        case EMPTY_BLOCK: return "empty_block";
-        case ORIGINALNAME_PROP: return "originalname";
-        case SIDE_EFFECT_FLAGS: return "side_effect_flags";
+        case EMPTY_BLOCK:        return "empty_block";
+        case ORIGINALNAME_PROP:  return "originalname";
+        case SIDE_EFFECT_FLAGS:  return "side_effect_flags";
 
         case IS_CONSTANT_NAME:   return "is_constant_name";
         case IS_OPTIONAL_PARAM:  return "is_optional_param";
diff --git a/test/com/google/javascript/jscomp/CodePrinterTest.java b/test/com/google/javascript/jscomp/CodePrinterTest.java
index 329b868c..4bb4257f 100644
--- a/test/com/google/javascript/jscomp/CodePrinterTest.java
+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java
@@ -1122,6 +1122,27 @@ public class CodePrinterTest extends TestCase {
     assertPrint("var x={1:1}", "var x={1:1}");
   }
 
+  public void testObjectLit2() {
+    assertPrint("var x={1:1}", "var x={1:1}");
+    assertPrint("var x={'1':1}", "var x={1:1}");
+    assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");
+    assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");
+
+  }
+
+  public void testObjectLit3() {
+    assertPrint("var x={3E9:1}",
+                "var x={3E9:1}");
+    assertPrint("var x={'3000000000':1}", // More than 31 bits
+                "var x={3E9:1}");
+    assertPrint("var x={'3000000001':1}",
+                "var x={3000000001:1}");
+    assertPrint("var x={'6000000001':1}",  // More than 32 bits
+                "var x={6000000001:1}");
+    assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
+                "var x={\"12345678901234567\":1}");
+  }
+
   public void testGetter() {
     assertPrint("var x = {}", "var x={}");
     assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");
@@ -1129,30 +1150,36 @@ public class CodePrinterTest extends TestCase {
       "var x = {get a() {}, get b(){}}",
       "var x={get a(){},get b(){}}");
 
-    // Valid ES5 but Rhino doesn't accept this yet.
-    // assertPrint(
-    //  "var x = {get 1() {return 1}}",
-    //  "var x={get \"1\"(){return 1}}");
+    assertPrint(
+      "var x = {get 'a'() {return 1}}",
+      "var x={get \"a\"(){return 1}}");
 
-    // Valid ES5 but Rhino doesn't accept this yet.
-    // assertPrint(
-    //  "var x = {get \"()\"() {return 1}}",
-    //   "var x={get \"()\"(){return 1}}");
+    assertPrint(
+      "var x = {get 1() {return 1}}",
+      "var x={get 1(){return 1}}");
+
+    assertPrint(
+      "var x = {get \"()\"() {return 1}}",
+      "var x={get \"()\"(){return 1}}");
   }
 
   public void testSetter() {
     assertPrint("var x = {}", "var x={}");
-    assertPrint("var x = {set a(x) {return 1}}", "var x={set a(x){return 1}}");
+    assertPrint(
+       "var x = {set a(y) {return 1}}",
+       "var x={set a(y){return 1}}");
 
-    // Valid ES5 but Rhino doesn't accept this yet.
-    // assertPrint(
-    //  "var x = {set 1(x) {return 1}}",
-    //  "var x={set \"1\"(x){return 1}}");
+    assertPrint(
+      "var x = {get 'a'() {return 1}}",
+      "var x={get \"a\"(){return 1}}");
 
-    // Valid ES5 but Rhino doesn't accept this yet.
-    // assertPrint(
-    //  "var x = {set \"(x)\"() {return 1}}",
-    //   "var x={set \"(x)\"(){return 1}}");
+    assertPrint(
+      "var x = {set 1(y) {return 1}}",
+      "var x={set 1(y){return 1}}");
+
+    assertPrint(
+      "var x = {set \"(x)\"(y) {return 1}}",
+      "var x={set \"(x)\"(y){return 1}}");
   }
 
   public void testNegCollapse() {
diff --git a/test/com/google/javascript/jscomp/FunctionNamesTest.java b/test/com/google/javascript/jscomp/FunctionNamesTest.java
index 65f3ca3c..a49c1dc2 100644
--- a/test/com/google/javascript/jscomp/FunctionNamesTest.java
+++ b/test/com/google/javascript/jscomp/FunctionNamesTest.java
@@ -86,8 +86,8 @@ public class FunctionNamesTest extends CompilerTestCase {
     expectedMap.put(11, "recliteral.l1.l2");
     expectedMap.put(12, "litnamed");
     expectedMap.put(13, "reclitnamed");
-    expectedMap.put(14, "<anonymous>");
-    expectedMap.put(15, "<anonymous>");
+    expectedMap.put(14, "numliteral.__2");
+    expectedMap.put(15, "recnumliteral.__3.a");
     assertEquals("Function id/name mismatch",
                  expectedMap, idNameMap);
   }
diff --git a/test/com/google/javascript/jscomp/RenamePropertiesTest.java b/test/com/google/javascript/jscomp/RenamePropertiesTest.java
index 5bc0cb2b..331e50d1 100644
--- a/test/com/google/javascript/jscomp/RenamePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/RenamePropertiesTest.java
@@ -68,24 +68,18 @@ public class RenamePropertiesTest extends CompilerTestCase {
   }
 
   public void testPrototypePropertiesAsObjLitKeys2() {
-    // TODO(johnlenz): Add tests when Rhino supports numbers and quoted strings
-    // for get and set.
+    testSame("Bar.prototype = {get 2(){}}; bar[2];");
 
-    // testSame("Bar.prototype = {get 2(){}}; bar[2];");
-
-    // testSame("Bar.prototype = {get 'a'(){}}; bar['a'];");
+    testSame("Bar.prototype = {get 'a'(){}}; bar['a'];");
 
     test("Bar.prototype = {get getA(){}}; bar.getA;",
          "Bar.prototype = {get a(){}}; bar.a;");
   }
 
   public void testPrototypePropertiesAsObjLitKeys3() {
-    // TODO(johnlenz): Add tests when Rhino supports numbers and quoted strings
-    // for get and set.
-
-    // testSame("Bar.prototype = {set 2(x){}}; bar[2];");
+    testSame("Bar.prototype = {set 2(x){}}; bar[2];");
 
-    // testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];");
+    testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];");
 
     test("Bar.prototype = {set getA(x){}}; bar.getA;",
          "Bar.prototype = {set a(x){}}; bar.a;");
diff --git a/test/com/google/javascript/jscomp/RenamePrototypesTest.java b/test/com/google/javascript/jscomp/RenamePrototypesTest.java
index 232ae661..74ff6662 100644
--- a/test/com/google/javascript/jscomp/RenamePrototypesTest.java
+++ b/test/com/google/javascript/jscomp/RenamePrototypesTest.java
@@ -46,7 +46,12 @@ public class RenamePrototypesTest extends CompilerTestCase {
     return 1;
   }
 
-  public void testRenamePrototypes() {
+  public void testRenamePrototypes1() {
+    test("Bar.prototype={'getFoo':function(){},2:function(){}}",
+         "Bar.prototype={'a':function(){},2:function(){}}");
+  }
+
+  public void testRenamePrototypes2() {
     // Simple
     test("Bar.prototype.getFoo=function(){};Bar.getFoo(b);" +
          "Bar.prototype.getBaz=function(){}",
diff --git a/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java b/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
index f6618e80..bab854c8 100644
--- a/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
+++ b/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
@@ -81,7 +81,7 @@ public class SimpleDefinitionFinderTest extends CompilerTestCase {
 
     checkDefinitionsInJs(
       "({1 : 1}); o[1]",
-      ImmutableSet.<String>of());
+      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));
 
     checkDefinitionsInJs(
         "var a = {b : 1}; a.b",
diff --git a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java
index 40bee6fa..96e18ac4 100644
--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java
+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java
@@ -261,6 +261,45 @@ public class IRFactoryTest extends BaseJSTypeTestCase {
     newParse("var o = {'a': 'a'}");
   }
 
+  public void testObjectLiteral6() {
+    testNewParser("({1: true})",
+      "SCRIPT 0\n" +
+      "    EXPR_RESULT 0\n" +
+      "        OBJECTLIT 0 [parenthesized: true]\n" +
+      "            STRING 1 0 [quoted: 1]\n" +
+      "                TRUE 0\n");
+  }
+
+  public void testObjectLiteral7() {
+    mode = LanguageMode.ECMASCRIPT5;
+
+    testNewParser("({get 1() {}})",
+      "SCRIPT 0\n" +
+      "    EXPR_RESULT 0\n" +
+      "        OBJECTLIT 0 [parenthesized: true]\n" +
+      "            GET 1 0 [quoted: 1]\n" +
+      "                FUNCTION  0\n" +
+      "                    NAME  0\n" +
+      "                    LP 0\n" +
+      "                    BLOCK 0\n");
+  }
+
+  public void testObjectLiteral8() {
+    mode = LanguageMode.ECMASCRIPT5;
+
+    testNewParser("({set 1(a) {}})",
+      "SCRIPT 0\n" +
+      "    EXPR_RESULT 0\n" +
+      "        OBJECTLIT 0 [parenthesized: true]\n" +
+      "            SET 1 0 [quoted: 1]\n" +
+      "                FUNCTION  0\n" +
+      "                    NAME  0\n" +
+      "                    LP 0\n" +
+      "                        NAME a 0\n" +
+      "                    BLOCK 0\n");
+  }
+
+
   public void testKeywordLiteral() {
     parse("true");
   }
diff --git a/test/com/google/javascript/jscomp/parsing/ParserTest.java b/test/com/google/javascript/jscomp/parsing/ParserTest.java
index e544b5fe..378973de 100644
--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java
@@ -737,7 +737,7 @@ public class ParserTest extends BaseJSTypeTestCase {
     assertEquals(Token.OBJECTLIT, objectLit.getType());
 
     Node number = objectLit.getFirstChild();
-    assertEquals(Token.NUMBER, number.getType());
+    assertEquals(Token.STRING, number.getType());
     assertNotNull(number.getJSDocInfo());
   }
 
@@ -747,18 +747,30 @@ public class ParserTest extends BaseJSTypeTestCase {
 
   public void testGetter() {
     mode = LanguageMode.ECMASCRIPT3;
+    parseError("var x = {get 1(){}};",
+        "getters are not supported in Internet Explorer");
+    parseError("var x = {get 'a'(){}};",
+        "getters are not supported in Internet Explorer");
     parseError("var x = {get a(){}};",
         "getters are not supported in Internet Explorer");
     mode = LanguageMode.ECMASCRIPT5;
+    parse("var x = {get 1(){}};");
+    parse("var x = {get 'a'(){}};");
     parse("var x = {get a(){}};");
     parseError("var x = {get a(b){}};", "getters may not have parameters");
   }
 
   public void testSetter() {
     mode = LanguageMode.ECMASCRIPT3;
+    parseError("var x = {set 1(x){}};",
+        "setters are not supported in Internet Explorer");
+    parseError("var x = {set 'a'(x){}};",
+        "setters are not supported in Internet Explorer");
     parseError("var x = {set a(x){}};",
         "setters are not supported in Internet Explorer");
     mode = LanguageMode.ECMASCRIPT5;
+    parse("var x = {set 1(x){}};");
+    parse("var x = {set 'a'(x){}};");
     parse("var x = {set a(x){}};");
     parseError("var x = {set a(){}};",
         "setters must have exactly one parameter");
