diff --git a/contrib/externs/api/maps/gmap2.js b/contrib/externs/api/maps/gmap2.js
index cd3e68c1..8c72e555 100644
--- a/contrib/externs/api/maps/gmap2.js
+++ b/contrib/externs/api/maps/gmap2.js
@@ -16,6 +16,7 @@
 
 /**
  * @fileoverview Externs for Maps API V2
+ * @externs
 *
  */
 
@@ -1808,7 +1809,7 @@ GMapUIOptions.prototype.controls.largemapcontrol3d
 /**
  * @type {boolean}
  */
-GMapUIOptions.prototype.controls.smallzoomcontrol3d	
+GMapUIOptions.prototype.controls.smallzoomcontrol3d
 
 /**
  * @type {boolean}
diff --git a/contrib/externs/chrome_extensions.js b/contrib/externs/chrome_extensions.js
index e11d6e25..a6f1945e 100644
--- a/contrib/externs/chrome_extensions.js
+++ b/contrib/externs/chrome_extensions.js
@@ -16,6 +16,8 @@
 
 /**
  * @fileoverview Definitions for the Chromium extensions API.
+ * @externs
+ *
 *
 *
  */
diff --git a/contrib/externs/json.js b/contrib/externs/json.js
index 11661939..8c9ba28b 100644
--- a/contrib/externs/json.js
+++ b/contrib/externs/json.js
@@ -17,6 +17,7 @@
 /**
  * @fileoverview Definitions for the JSON specification.
  * @see http://www.json.org/json2.js.
+ * @externs
 *
 *
  */
diff --git a/contrib/externs/w3c_geolocation.js b/contrib/externs/w3c_geolocation.js
index d3913bb6..4dadebe6 100644
--- a/contrib/externs/w3c_geolocation.js
+++ b/contrib/externs/w3c_geolocation.js
@@ -17,6 +17,7 @@
 /**
  * @fileoverview Definitions for 's Geolocation specification
  *     http://www.w3.org/TR/geolocation-API/
+ * @externs
 *
  */
 
diff --git a/contrib/externs/webkit_console.js b/contrib/externs/webkit_console.js
index a002ce75..c32efe6a 100644
--- a/contrib/externs/webkit_console.js
+++ b/contrib/externs/webkit_console.js
@@ -18,6 +18,7 @@
  * @fileoverview Definitions for the Webkit console specification.
  * @see http://trac.webkit.org/browser/trunk/WebCore/page/Console.idl
  * @see http://trac.webkit.org/browser/trunk/WebCore/page/Console.cpp
+ * @externs
 *
  */
 
diff --git a/externs/deprecated.js b/externs/deprecated.js
index 3aaf77eb..afcc719a 100644
--- a/externs/deprecated.js
+++ b/externs/deprecated.js
@@ -18,6 +18,7 @@
  * @fileoverview Java Script Builtins that are not
  * part of any specificiations but are
  * still needed in some project's build.
+ * @externs
  *
 *
  */
diff --git a/externs/es3.js b/externs/es3.js
index c709b039..6db1bc62 100644
--- a/externs/es3.js
+++ b/externs/es3.js
@@ -17,6 +17,7 @@
 /**
  * @fileoverview ECMAScript 3 Builtins. This include common extensions so this
  * is actually ES3+Reality.
+ * @externs
 *
 *
  * @author nicksantos@google.com (Nick Santos)
diff --git a/externs/es5.js b/externs/es5.js
index ed519069..f7abc357 100644
--- a/externs/es5.js
+++ b/externs/es5.js
@@ -17,6 +17,7 @@
 /**
  * @fileoverview Definitions for Ecmascript 5.
  * @see http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf
+ * @externs
 *
  */
 
diff --git a/externs/fileapi.js b/externs/fileapi.js
index 4a91897a..55b4a43f 100644
--- a/externs/fileapi.js
+++ b/externs/fileapi.js
@@ -17,6 +17,7 @@
  * @fileoverview Definitions for objects in the File API. Details of the API are
  * at http://dev.w3.org/2006/webapi/FileAPI/
  *
+ * @externs
 *
  */
 
diff --git a/externs/flash.js b/externs/flash.js
index 185d7615..1925a8ff 100644
--- a/externs/flash.js
+++ b/externs/flash.js
@@ -19,6 +19,7 @@
  * Created from
  * http://www.adobe.com/support/flash/publishexport/scriptingwithflash/scriptingwithflash_03.html
  *
+ * @externs
 *
  */
 
diff --git a/externs/gears_symbols.js b/externs/gears_symbols.js
index f6812a5a..8c85c87a 100644
--- a/externs/gears_symbols.js
+++ b/externs/gears_symbols.js
@@ -16,6 +16,7 @@
 
 /**
  * @fileoverview Global symbols injected by Google Gears.
+ * @externs
  * @author nicksantos@google.com (Nick Santos)
  */
 
diff --git a/externs/gears_types.js b/externs/gears_types.js
index 4b147f44..0805512c 100644
--- a/externs/gears_types.js
+++ b/externs/gears_types.js
@@ -16,6 +16,7 @@
 
 /**
  * @fileoverview Extern types introduced by the Gears extension.
+ * @externs
  */
 
 
diff --git a/externs/gecko_css.js b/externs/gecko_css.js
index 78d06a91..aeb268d5 100644
--- a/externs/gecko_css.js
+++ b/externs/gecko_css.js
@@ -18,6 +18,7 @@
  * @fileoverview Definitions for Gecko's custom CSS properties. Copied from:
  * http://lxr.mozilla.org/mozilla1.8.0/source/dom/public/idl/css/nsIDOMCSS2Properties.idl
  *
+ * @externs
  * @author nicksantos@google.com (Nick Santos)
  */
 
diff --git a/externs/gecko_dom.js b/externs/gecko_dom.js
index d26ed0c6..f677bd5a 100644
--- a/externs/gecko_dom.js
+++ b/externs/gecko_dom.js
@@ -19,6 +19,7 @@
  *  W3C's DOM specification by Gecko. This file depends on
  *  w3c_dom2.js.
  *
+ * @externs
 *
  */
 
diff --git a/externs/gecko_event.js b/externs/gecko_event.js
index 6806ad9e..74dc1bdb 100644
--- a/externs/gecko_event.js
+++ b/externs/gecko_event.js
@@ -19,6 +19,7 @@
  *  W3C's event specification by Gecko. This file depends on
  *  w3c_event.js.
  *
+ * @externs
 *
  */
 
diff --git a/externs/gecko_xml.js b/externs/gecko_xml.js
index cc84629f..e1a131f8 100644
--- a/externs/gecko_xml.js
+++ b/externs/gecko_xml.js
@@ -18,24 +18,25 @@
  * @fileoverview Definitions for all the extensions over some of the
  *  W3C's XML specifications by Gecko. This file depends on
  *  w3c_xml.js. The whole file has been fully type annotated.
- * 
+ *
+ * @externs
 *
  */
 
 /**
  * MLSerializer can be used to convert DOM subtree or DOM document into text.
- * XMLSerializer is available to unprivileged scripts. 
+ * XMLSerializer is available to unprivileged scripts.
  *
  * XMLSerializer is mainly useful for applications and extensions based on
  * Mozilla platform. While it's available to web pages, it's not part of any
  * standard and level of support in other browsers is unknown.
  *
- * @constructor 
+ * @constructor
  */
 function XMLSerializer() {}
 
 /**
- * Returns the serialized subtree in the form of a string 
+ * Returns the serialized subtree in the form of a string
  * @param {Node} subtree
  * @return {string}
  */
@@ -43,24 +44,24 @@ XMLSerializer.prototype.serializeToString = function(subtree) {};
 
 /**
  * The subtree rooted by the specified element is serialized to a byte stream
- * using the character set specified. 
+ * using the character set specified.
  *
  * @param {Node} subtree
  * @return {Object}
  */
 XMLSerializer.prototype.serializeToStream = function(subtree) {};
 
-/** 
+/**
  * DOMParser is mainly useful for applications and extensions based on Mozilla
  * platform. While it's available to web pages, it's not part of any standard and
  * level of support in other browsers is unknown.
  *
- * @constructor 
+ * @constructor
  */
 function DOMParser() {}
 
 /**
- * The string passed in is parsed into a DOM document. 
+ * The string passed in is parsed into a DOM document.
  *
  * Example:
  *  var parser = new DOMParser();
diff --git a/externs/html5.js b/externs/html5.js
index 15aabcb3..65ba4754 100644
--- a/externs/html5.js
+++ b/externs/html5.js
@@ -22,6 +22,7 @@
  *
  *  This relies on w3c_event.js being included first.
  *
+ * @externs
 *
  */
 
diff --git a/externs/ie_css.js b/externs/ie_css.js
index fd06f941..e89155d2 100644
--- a/externs/ie_css.js
+++ b/externs/ie_css.js
@@ -21,6 +21,7 @@
  * This page is also useful for the IDL definitions:
  * http://source.winehq.org/source/include/mshtml.idl
  *
+ * @externs
  * @author nicksantos@google.com
  */
 
diff --git a/externs/ie_dom.js b/externs/ie_dom.js
index 44f2eed9..1dcb7b45 100644
--- a/externs/ie_dom.js
+++ b/externs/ie_dom.js
@@ -19,6 +19,7 @@
  *  W3C's DOM specification by IE in JScript. This file depends on
  *  w3c_dom2.js. The whole file has NOT been fully type annotated.
  *
+ * @externs
 *
 *
  */
diff --git a/externs/ie_event.js b/externs/ie_event.js
index 07bb2c02..24e4598e 100644
--- a/externs/ie_event.js
+++ b/externs/ie_event.js
@@ -17,7 +17,8 @@
  * @fileoverview Definitions for all the extensions over the
  *  W3C's event specification by IE in JScript. This file depends on
  *  w3c_event.js. The whole file has NOT been fully type annotated.
- * 
+ *
+ * @externs
 *
  */
 
diff --git a/externs/ie_vml.js b/externs/ie_vml.js
index d2f99924..4ec02bac 100644
--- a/externs/ie_vml.js
+++ b/externs/ie_vml.js
@@ -17,6 +17,7 @@
 /**
  * @fileoverview Definitions for IE's vector markup language, or VML.
  *
+ * @externs
 *
  */
 
diff --git a/externs/iphone.js b/externs/iphone.js
index ed225747..e29b4894 100644
--- a/externs/iphone.js
+++ b/externs/iphone.js
@@ -17,6 +17,7 @@
  * @fileoverview Definitions for all iPhone extensions. Created from:
  * http://developer.apple.com/webapps/docs/documentation/AppleApplications/Reference/SafariJSRef/
  *
+ * @externs
  * @author agrieve@google.com (Andrew Grieve)
  */
 
diff --git a/externs/w3c_css.js b/externs/w3c_css.js
index c63dc629..d9ce94e4 100644
--- a/externs/w3c_css.js
+++ b/externs/w3c_css.js
@@ -18,6 +18,7 @@
  * @fileoverview Definitions for W3C's CSS specification
  *  The whole file has been fully type annotated.
  *  http://www.w3.org/TR/DOM-Level-2-Style/css.html
+ * @externs
 *
 *
  */
diff --git a/externs/w3c_dom1.js b/externs/w3c_dom1.js
index 34b3e296..aaa341db 100644
--- a/externs/w3c_dom1.js
+++ b/externs/w3c_dom1.js
@@ -19,6 +19,7 @@
  *  The whole file has been fully type annotated. Created from
  *  http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
  *
+ * @externs
 *
 *
  */
diff --git a/externs/w3c_dom2.js b/externs/w3c_dom2.js
index 50228f7c..18737ba0 100644
--- a/externs/w3c_dom2.js
+++ b/externs/w3c_dom2.js
@@ -21,6 +21,7 @@
  *  Created from
  *  http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
  *
+ * @externs
 *
 *
  */
diff --git a/externs/w3c_dom3.js b/externs/w3c_dom3.js
index a87616fc..0c904bed 100644
--- a/externs/w3c_dom3.js
+++ b/externs/w3c_dom3.js
@@ -21,6 +21,7 @@
  *  Created from
  *   http://www.w3.org/TR/DOM-Level-3-Core/ecma-script-binding.html
  *
+ * @externs
 *
 *
  */
diff --git a/externs/w3c_elementtraversal.js b/externs/w3c_elementtraversal.js
index 1efaf3e6..93bede1a 100644
--- a/externs/w3c_elementtraversal.js
+++ b/externs/w3c_elementtraversal.js
@@ -21,6 +21,7 @@
  *  Created from:
  *    http://www.w3.org/TR/ElementTraversal/#ecmascript-bindings
  *
+ * @externs
 *
  */
 
diff --git a/externs/w3c_event.js b/externs/w3c_event.js
index 6824d27e..191c50dd 100644
--- a/externs/w3c_event.js
+++ b/externs/w3c_event.js
@@ -21,6 +21,7 @@
  *  Created from
  *   http://www.w3.org/TR/DOM-Level-2-Events/ecma-script-binding.html
  *
+ * @externs
 *
  */
 
diff --git a/externs/w3c_event3.js b/externs/w3c_event3.js
index 89e6377a..c4c8a863 100644
--- a/externs/w3c_event3.js
+++ b/externs/w3c_event3.js
@@ -21,6 +21,7 @@
  *  Created from
  *   http://www.w3.org/TR/DOM-Level-3-Events/#ecma-script-binding-ecma-binding
  *
+ * @externs
 *
  */
 
diff --git a/externs/w3c_range.js b/externs/w3c_range.js
index 1f247cdd..132a0cca 100644
--- a/externs/w3c_range.js
+++ b/externs/w3c_range.js
@@ -21,6 +21,7 @@
  *  Created from
  *   http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html
  *
+ * @externs
 *
 *
  */
diff --git a/externs/w3c_selectors.js b/externs/w3c_selectors.js
index ea8a60bf..96748de5 100644
--- a/externs/w3c_selectors.js
+++ b/externs/w3c_selectors.js
@@ -19,6 +19,7 @@
  *  This file depends on w3c_dom1.js.
  *  Created from http://www.w3.org/TR/selectors-api/
  *
+ * @externs
 *
  */
 
diff --git a/externs/w3c_xml.js b/externs/w3c_xml.js
index ea273efc..c92eeda9 100644
--- a/externs/w3c_xml.js
+++ b/externs/w3c_xml.js
@@ -27,6 +27,7 @@
  * @see http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html
  * @see http://www.w3.org/TR/XMLHttpRequest/
  *
+ * @externs
 *
 *
  */
diff --git a/externs/webkit_css.js b/externs/webkit_css.js
index b94adcb6..77fe29ba 100644
--- a/externs/webkit_css.js
+++ b/externs/webkit_css.js
@@ -18,6 +18,7 @@
  * @fileoverview Definitions for WebKit's custom CSS properties. Copied from:
  * http://trac.webkit.org/browser/trunk/WebCore/css/CSSPropertyNames.in
  *
+ * @externs
  * @author nicksantos@google.com (Nick Santos)
  */
 
diff --git a/externs/webkit_dom.js b/externs/webkit_dom.js
index 2f7961fa..035d8d58 100644
--- a/externs/webkit_dom.js
+++ b/externs/webkit_dom.js
@@ -19,6 +19,7 @@
  *  specification by webkit. This file depends on w3c_dom2.js.
  *  All the provided definitions has been type annotated
  *
+ * @externs
 *
  */
 
diff --git a/externs/webkit_event.js b/externs/webkit_event.js
index 55597771..6f7bf4be 100644
--- a/externs/webkit_event.js
+++ b/externs/webkit_event.js
@@ -19,6 +19,7 @@
  *  event specification by webkit. This file depends on w3c_event.js.
  *  All the provided definitions have been type annotated
  *
+ * @externs
 *
  */
 
diff --git a/externs/webkit_notifications.js b/externs/webkit_notifications.js
index b62a27ba..be1e77c0 100644
--- a/externs/webkit_notifications.js
+++ b/externs/webkit_notifications.js
@@ -15,6 +15,7 @@
  */
 /**
  * @fileoverview Definitions for W3C's Notifications specification.
+ * @externs
 *
  */
 
@@ -96,4 +97,4 @@ NotificationCenter.prototype.requestPermission = function(opt_callback) {};
  * window.webkitNotifications.
  * @type {NotificationCenter}
  */
-Window.prototype.webkitNotifications;
\ No newline at end of file
+Window.prototype.webkitNotifications;
diff --git a/externs/webstorage.js b/externs/webstorage.js
index b92326c6..8c263ff9 100644
--- a/externs/webstorage.js
+++ b/externs/webstorage.js
@@ -16,6 +16,7 @@
 /**
  * @fileoverview Definitions for W3C's WebStorage specificiation.
  * This file depends on html5.js.
+ * @externs
 *
  */
 
diff --git a/externs/window.js b/externs/window.js
index fdde616b..2e059ca9 100644
--- a/externs/window.js
+++ b/externs/window.js
@@ -17,6 +17,7 @@
 /**
  * @fileoverview Java Script Builtins for windows properties.
  *
+ * @externs
 *
 *
  */
diff --git a/javadoc/com/google/javascript/jscomp/Compiler.html b/javadoc/com/google/javascript/jscomp/Compiler.html
index 1e275554..726110fc 100644
--- a/javadoc/com/google/javascript/jscomp/Compiler.html
+++ b/javadoc/com/google/javascript/jscomp/Compiler.html
@@ -294,6 +294,26 @@ Compiler (and the other classes in this package) does the following:
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compile(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)">compile</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+        <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;inputs,
+        <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compiles a list of inputs.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compileModules(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)">compileModules</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+               <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&gt;&nbsp;modules,
+               <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compiles a list of modules.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#disableThreads()">disableThreads</A></B>()</CODE>
 
@@ -463,7 +483,8 @@ Compiler (and the other classes in this package) does the following:
      <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
 
 <BR>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes the instance state needed for a compile job.</TD>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes the instance state needed for a compile job if the sources
+ are in modules.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
@@ -478,6 +499,27 @@ Compiler (and the other classes in this package) does the following:
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#init(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)">init</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+     <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;inputs,
+     <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes the instance state needed for a compile job.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;void</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#initModules(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)">initModules</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+            <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&gt;&nbsp;modules,
+            <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes the instance state needed for a compile job if the sources
+ are in modules.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;void</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#initOptions(com.google.javascript.jscomp.CompilerOptions)">initOptions</A></B>(<A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
 
 <BR>
@@ -802,6 +844,21 @@ public void <B>init</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSour
 </DL>
 <HR>
 
+<A NAME="init(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
+init</H3>
+<PRE>
+public void <B>init</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+                 <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;inputs,
+                 <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
+<DL>
+<DD>Initializes the instance state needed for a compile job.
+<P>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
 init</H3>
 <PRE>
@@ -809,7 +866,24 @@ public void <B>init</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSour
                  <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
                  <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
 <DL>
-<DD>Initializes the instance state needed for a compile job.
+<DD>Initializes the instance state needed for a compile job if the sources
+ are in modules.
+<P>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
+<A NAME="initModules(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
+initModules</H3>
+<PRE>
+public void <B>initModules</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+                        <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&gt;&nbsp;modules,
+                        <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
+<DL>
+<DD>Initializes the instance state needed for a compile job if the sources
+ are in modules.
 <P>
 <DD><DL>
 </DL>
@@ -886,6 +960,21 @@ public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="cla
 </DL>
 <HR>
 
+<A NAME="compile(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
+compile</H3>
+<PRE>
+public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compile</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+                      <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;inputs,
+                      <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
+<DL>
+<DD>Compiles a list of inputs.
+<P>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
 compile</H3>
 <PRE>
@@ -901,6 +990,21 @@ public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="cla
 </DL>
 <HR>
 
+<A NAME="compileModules(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
+compileModules</H3>
+<PRE>
+public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compileModules</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&gt;&nbsp;externs,
+                             <A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&gt;&nbsp;modules,
+                             <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
+<DL>
+<DD>Compiles a list of modules.
+<P>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="disableThreads()"><!-- --></A><H3>
 disableThreads</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/jscomp/JSModuleGraph.html b/javadoc/com/google/javascript/jscomp/JSModuleGraph.html
index 739cda92..c5e0e9d3 100644
--- a/javadoc/com/google/javascript/jscomp/JSModuleGraph.html
+++ b/javadoc/com/google/javascript/jscomp/JSModuleGraph.html
@@ -137,6 +137,12 @@ A <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#JSModuleGraph(com.google.javascript.jscomp.JSModule[])">JSModuleGraph</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modulesInDepOrder)</CODE>
 
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a module graph from a list of modules in dependency order.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#JSModuleGraph(java.util.List)">JSModuleGraph</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&gt;&nbsp;modulesInDepOrder)</CODE>
+
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a module graph from a list of modules in dependency order.</TD>
 </TR>
@@ -217,6 +223,16 @@ public <B>JSModuleGraph</B>(<A HREF="../../../../com/google/javascript/jscomp/JS
 <DD>Creates a module graph from a list of modules in dependency order.
 <P>
 </DL>
+<HR>
+
+<A NAME="JSModuleGraph(java.util.List)"><!-- --></A><H3>
+JSModuleGraph</H3>
+<PRE>
+public <B>JSModuleGraph</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&gt;&nbsp;modulesInDepOrder)</PRE>
+<DL>
+<DD>Creates a module graph from a list of modules in dependency order.
+<P>
+</DL>
 
 <!-- ============ METHOD DETAIL ========== -->
 
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index bce2ccef..eab91292 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -952,6 +952,9 @@ Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/js
 <DT><A HREF="./com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)"><B>compile(JSSourceFile[], JSSourceFile[], CompilerOptions)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
 <DD>Compiles a list of inputs.
+<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#compile(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><B>compile(List&lt;JSSourceFile&gt;, List&lt;JSSourceFile&gt;, CompilerOptions)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
+<DD>Compiles a list of inputs.
 <DT><A HREF="./com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><B>compile(JSSourceFile[], JSModule[], CompilerOptions)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
 <DD>Compiles a list of modules.
@@ -961,6 +964,9 @@ Static variable in class com.google.javascript.jscomp.<A HREF="./com/google/java
 <DT><A HREF="./com/google/javascript/jscomp/FunctionInformationMap.Module.html#COMPILED_SOURCE_FIELD_NUMBER"><B>COMPILED_SOURCE_FIELD_NUMBER</B></A> - 
 Static variable in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/FunctionInformationMap.Module.html" title="class in com.google.javascript.jscomp">FunctionInformationMap.Module</A>
 <DD>&nbsp;
+<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#compileModules(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><B>compileModules(List&lt;JSSourceFile&gt;, List&lt;JSModule&gt;, CompilerOptions)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
+<DD>Compiles a list of modules.
 <DT><A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp"><B>Compiler</B></A> - Class in <A HREF="./com/google/javascript/jscomp/package-summary.html">com.google.javascript.jscomp</A><DD>Compiler (and the other classes in this package) does the following:
  
  parses JS code
@@ -4138,9 +4144,13 @@ Variable in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/
 <DT><A HREF="./com/google/javascript/jscomp/Compiler.html#init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)"><B>init(JSSourceFile[], JSSourceFile[], CompilerOptions)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
 <DD>Initializes the instance state needed for a compile job.
-<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><B>init(JSSourceFile[], JSModule[], CompilerOptions)</B></A> - 
+<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#init(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><B>init(List&lt;JSSourceFile&gt;, List&lt;JSSourceFile&gt;, CompilerOptions)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
 <DD>Initializes the instance state needed for a compile job.
+<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><B>init(JSSourceFile[], JSModule[], CompilerOptions)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
+<DD>Initializes the instance state needed for a compile job if the sources
+ are in modules.
 <DT><A HREF="./com/google/javascript/jscomp/Instrumentation.html#INIT_FIELD_NUMBER"><B>INIT_FIELD_NUMBER</B></A> - 
 Static variable in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Instrumentation.html" title="class in com.google.javascript.jscomp">Instrumentation</A>
 <DD>&nbsp;
@@ -4166,6 +4176,10 @@ Method in exception com.google.javascript.rhino.<A HREF="./com/google/javascript
 <DT><A HREF="./com/google/javascript/rhino/RhinoException.html#initLineSource(java.lang.String)"><B>initLineSource(String)</B></A> - 
 Method in exception com.google.javascript.rhino.<A HREF="./com/google/javascript/rhino/RhinoException.html" title="class in com.google.javascript.rhino">RhinoException</A>
 <DD>Initialize the text of the source line containing the error.
+<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#initModules(java.util.List, java.util.List, com.google.javascript.jscomp.CompilerOptions)"><B>initModules(List&lt;JSSourceFile&gt;, List&lt;JSModule&gt;, CompilerOptions)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
+<DD>Initializes the instance state needed for a compile job if the sources
+ are in modules.
 <DT><A HREF="./com/google/javascript/jscomp/Compiler.html#initOptions(com.google.javascript.jscomp.CompilerOptions)"><B>initOptions(CompilerOptions)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
 <DD>Initialize the compiler options.
@@ -5028,6 +5042,9 @@ Constructor for class com.google.javascript.jscomp.<A HREF="./com/google/javascr
  can answer depth-related queries about them.<DT><A HREF="./com/google/javascript/jscomp/JSModuleGraph.html#JSModuleGraph(com.google.javascript.jscomp.JSModule[])"><B>JSModuleGraph(JSModule[])</B></A> - 
 Constructor for class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/JSModuleGraph.html" title="class in com.google.javascript.jscomp">JSModuleGraph</A>
 <DD>Creates a module graph from a list of modules in dependency order.
+<DT><A HREF="./com/google/javascript/jscomp/JSModuleGraph.html#JSModuleGraph(java.util.List)"><B>JSModuleGraph(List&lt;JSModule&gt;)</B></A> - 
+Constructor for class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/JSModuleGraph.html" title="class in com.google.javascript.jscomp">JSModuleGraph</A>
+<DD>Creates a module graph from a list of modules in dependency order.
 <DT><A HREF="./com/google/javascript/jscomp/JSModuleGraph.ModuleDependenceException.html" title="class in com.google.javascript.jscomp"><B>JSModuleGraph.ModuleDependenceException</B></A> - Exception in <A HREF="./com/google/javascript/jscomp/package-summary.html">com.google.javascript.jscomp</A><DD>&nbsp;<DT><A HREF="./com/google/javascript/jscomp/JSModuleGraph.ModuleDependenceException.html#JSModuleGraph.ModuleDependenceException(java.lang.String, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.JSModule)"><B>JSModuleGraph.ModuleDependenceException(String, JSModule, JSModule)</B></A> - 
 Constructor for exception com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/JSModuleGraph.ModuleDependenceException.html" title="class in com.google.javascript.jscomp">JSModuleGraph.ModuleDependenceException</A>
 <DD>&nbsp;
diff --git a/javadoc/serialized-form.html b/javadoc/serialized-form.html
index 3425d9d5..4e44db27 100644
--- a/javadoc/serialized-form.html
+++ b/javadoc/serialized-form.html
@@ -145,7 +145,7 @@ jsRoot</H3>
 <H3>
 externs</H3>
 <PRE>
-<A HREF="com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A>[] <B>externs</B></PRE>
+<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">E</A>&gt; <B>externs</B></PRE>
 <DL>
 <DL>
 </DL>
@@ -154,7 +154,7 @@ externs</H3>
 <H3>
 inputs</H3>
 <PRE>
-<A HREF="com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A>[] <B>inputs</B></PRE>
+<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">E</A>&gt; <B>inputs</B></PRE>
 <DL>
 <DL>
 </DL>
@@ -163,7 +163,7 @@ inputs</H3>
 <H3>
 modules</H3>
 <PRE>
-<A HREF="com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[] <B>modules</B></PRE>
+<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">List</A>&lt;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/List.html?is-external=true" title="class or interface in java.util">E</A>&gt; <B>modules</B></PRE>
 <DL>
 <DL>
 </DL>
diff --git a/lib/protobuf_deploy.jar b/lib/protobuf_deploy.jar
index 1c676992..715d7a54 100755
Binary files a/lib/protobuf_deploy.jar and b/lib/protobuf_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/CoalesceVariableNames.java b/src/com/google/javascript/jscomp/CoalesceVariableNames.java
index 8888a173..e990c82e 100644
--- a/src/com/google/javascript/jscomp/CoalesceVariableNames.java
+++ b/src/com/google/javascript/jscomp/CoalesceVariableNames.java
@@ -101,6 +101,13 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
 
     LiveVariablesAnalysis liveness =
         new LiveVariablesAnalysis(cfg, scope, compiler);
+    // If the function has exactly 2 params, mark them as escaped. This is
+    // a work-around for an IE bug where it throws an exception if you
+    // write to the parameters of the callback in a sort(). See:
+    // http://code.google.com/p/closure-compiler/issues/detail?id=58
+    if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {
+      liveness.markAllParametersEscaped();
+    }
     liveness.analyze();
 
     UndiGraph<Var, Void> interferenceGraph =
@@ -137,7 +144,7 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
       return;
     }
     Var coalescedVar = colorings.peek().getPartitionSuperNode(var);
-    
+
     if (!usePseudoNames) {
       if (vNode.getValue().equals(coalescedVar)) {
         // The coalesced name is itself, nothing to do.
@@ -159,7 +166,7 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
       Set<String> allMergedNames = Sets.newTreeSet();
       for (Iterator<Var> i = t.getScope().getVars(); i.hasNext();) {
         Var iVar = i.next();
-        
+
         // Look for all the variables that can be merged (in the graph by now)
         // and it is merged with the current coalscedVar.
         if (colorings.peek().getGraph().getNode(iVar) != null &&
@@ -167,18 +174,18 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
           allMergedNames.add(iVar.name);
         }
       }
-      
+
       // Keep its original name.
       if (allMergedNames.size() == 1) {
         return;
       }
-      
+
       pseudoName = Joiner.on("_").join(allMergedNames);
-      
+
       while (t.getScope().isDeclared(pseudoName, true)) {
         pseudoName += "$";
       }
-      
+
       n.setString(pseudoName);
       compiler.reportCodeChange();
 
@@ -198,7 +205,7 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
     for (Iterator<Var> i = scope.getVars(); i.hasNext();) {
       Var v = i.next();
       if (!escaped.contains(v)) {
-        
+
         // TODO(user): In theory, we CAN coalesce function names just like
         // any variables. Our Liveness analysis captures this just like it as
         // described in the specification. However, we saw some zipped and
diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index 448e2b56..d28d951c 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -19,6 +19,7 @@ package com.google.javascript.jscomp;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.javascript.jscomp.CompilerOptions.DevMode;
@@ -65,16 +66,16 @@ public class Compiler extends AbstractCompiler {
   private PassConfig passes = null;
 
   // The externs inputs
-  private CompilerInput[] externs;
+  private List<CompilerInput> externs;
 
   // The JS source modules
-  private JSModule[] modules;
+  private List<JSModule> modules;
 
   // The graph of the JS source modules
   private JSModuleGraph moduleGraph;
 
   // The JS source inputs
-  private CompilerInput[] inputs;
+  private List<CompilerInput> inputs;
 
   // error manager to which error management is delegated
   private ErrorManager errorManager;
@@ -237,6 +238,15 @@ public class Compiler extends AbstractCompiler {
    */
   public void init(JSSourceFile[] externs, JSSourceFile[] inputs,
       CompilerOptions options) {
+    init(Lists.<JSSourceFile>newArrayList(externs),
+        Lists.<JSSourceFile>newArrayList(inputs), options);
+  }
+
+  /**
+   * Initializes the instance state needed for a compile job.
+   */
+  public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,
+      CompilerOptions options) {
     initOptions(options);
     
     this.externs = makeCompilerInput(externs, true);
@@ -254,10 +264,22 @@ public class Compiler extends AbstractCompiler {
               + "Modules must be listed in dependency order.");
 
   /**
-   * Initializes the instance state needed for a compile job.
+   * Initializes the instance state needed for a compile job if the sources
+   * are in modules.
    */
   public void init(JSSourceFile[] externs, JSModule[] modules,
       CompilerOptions options) {
+    initModules(Lists.<JSSourceFile>newArrayList(externs),
+         Lists.<JSModule>newArrayList(modules), options);
+  }
+  
+  /**
+   * Initializes the instance state needed for a compile job if the sources
+   * are in modules.
+   */
+  public void initModules(
+      List<JSSourceFile> externs, List<JSModule> modules,
+      CompilerOptions options) {
     initOptions(options);
 
     checkFirstModule(modules);
@@ -292,11 +314,11 @@ public class Compiler extends AbstractCompiler {
     }
   }
 
-  private CompilerInput[] makeCompilerInput(
-      JSSourceFile[] files, boolean isExtern) {
-    CompilerInput [] inputs = new CompilerInput[files.length];
-    for (int i = 0; i < files.length; ++i) {
-      inputs[i] = new CompilerInput(files[i], isExtern);
+  private List<CompilerInput> makeCompilerInput(
+      List<JSSourceFile> files, boolean isExtern) {
+    List<CompilerInput> inputs = Lists.newArrayList();
+    for (JSSourceFile file : files) {
+      inputs.add(new CompilerInput(file, isExtern));
     }
     return inputs;
   }
@@ -313,12 +335,12 @@ public class Compiler extends AbstractCompiler {
    * Verifies that at least one module has been provided and that the first one
    * has at least one source code input.
    */
-  private void checkFirstModule(JSModule[] modules) {
-    if (modules.length == 0) {
+  private void checkFirstModule(List<JSModule> modules) {
+    if (modules.isEmpty()) {
       report(JSError.make(EMPTY_MODULE_LIST_ERROR));
-    } else if (modules[0].getInputs().isEmpty()) {
+    } else if (modules.get(0).getInputs().isEmpty()) {
       report(JSError.make(EMPTY_ROOT_MODULE_ERROR,
-          modules[0].getName()));
+          modules.get(0).getName()));
     }
   }
   
@@ -326,9 +348,8 @@ public class Compiler extends AbstractCompiler {
    * Fill any empty modules with a place holder file. It makes any cross module
    * motion easier.
    */
-  private void fillEmptyModules(JSModule[] modules) {
-    for (int i = 1; i < modules.length; i ++) {
-      JSModule module = modules[i];
+  private void fillEmptyModules(List<JSModule> modules) {
+    for (JSModule module : modules) {
       if (module.getInputs().isEmpty()) {
         module.add(JSSourceFile.fromCode("[" + module.getName() + "]", ""));
       }
@@ -354,9 +375,9 @@ public class Compiler extends AbstractCompiler {
    * Builds a single list of all module inputs. Verifies that it contains no
    * duplicates.
    */
-  private CompilerInput[] getAllInputsFromModules() {
-    List<CompilerInput> inputs = new ArrayList<CompilerInput>();
-    Map<String, JSModule> inputMap = new HashMap<String, JSModule>();
+  private List<CompilerInput> getAllInputsFromModules() {
+    List<CompilerInput> inputs = Lists.newArrayList();
+    Map<String, JSModule> inputMap = Maps.newHashMap();
     for (JSModule module : modules) {
       for (CompilerInput input : module.getInputs()) {
         String inputName = input.getName();
@@ -373,10 +394,10 @@ public class Compiler extends AbstractCompiler {
     if (hasErrors()) {
 
       // There's no reason to bother parsing the code.
-      return new CompilerInput[0];
+      return ImmutableList.of();
     }
 
-    return inputs.toArray(new CompilerInput[inputs.size()]);
+    return inputs;
   }
 
   static final DiagnosticType DUPLICATE_INPUT =
@@ -430,7 +451,16 @@ public class Compiler extends AbstractCompiler {
   public Result compile(JSSourceFile[] externs,
                         JSSourceFile[] inputs,
                         CompilerOptions options) {
-
+    return compile(Lists.<JSSourceFile>newArrayList(externs),
+        Lists.<JSSourceFile>newArrayList(inputs),
+        options);
+  }
+  
+  /**
+   * Compiles a list of inputs.
+   */
+  public Result compile(List<JSSourceFile> externs,
+      List<JSSourceFile> inputs, CompilerOptions options) {
     // The compile method should only be called once.
     Preconditions.checkState(jsRoot == null);
 
@@ -453,11 +483,21 @@ public class Compiler extends AbstractCompiler {
   public Result compile(JSSourceFile[] externs,
                         JSModule[] modules,
                         CompilerOptions options) {
+    return compileModules(Lists.<JSSourceFile>newArrayList(externs),
+        Lists.<JSModule>newArrayList(modules),
+        options);
+  }
+
+  /**
+   * Compiles a list of modules.
+   */
+  public Result compileModules(List<JSSourceFile> externs,
+      List<JSModule> modules, CompilerOptions options) {
     // The compile method should only be called once.
     Preconditions.checkState(jsRoot == null);
 
     try {
-      init(externs, modules, options);
+      initModules(externs, modules, options);
       if (hasErrors()) {
         return getResult();
       }
@@ -1130,11 +1170,11 @@ public class Compiler extends AbstractCompiler {
       public String[] call() throws Exception {
         Tracer tracer = newTracer("toSourceArray");
         try {
-          int numInputs = inputs.length;
+          int numInputs = inputs.size();
           String[] sources = new String[numInputs];
           CodeBuilder cb = new CodeBuilder();
           for (int i = 0; i < numInputs; i++) {
-            Node scriptNode = inputs[i].getAstRoot(Compiler.this);
+            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
             cb.reset();
             toSource(cb, i, scriptNode);
             sources[i] = cb.toString();
@@ -1577,16 +1617,16 @@ public class Compiler extends AbstractCompiler {
   @Override
   Node getNodeForCodeInsertion(JSModule module) {
     if (module == null) {
-      if (inputs.length == 0) {
+      if (inputs.isEmpty()) {
         throw new IllegalStateException("No inputs");
       }
 
-      return inputs[0].getAstRoot(this);
+      return inputs.get(0).getAstRoot(this);
     }
 
-    List<CompilerInput> inputs = module.getInputs();
-    if (inputs.size() > 0) {
-      return inputs.get(0).getAstRoot(this);
+    List<CompilerInput> moduleInputs = module.getInputs();
+    if (moduleInputs.size() > 0) {
+      return moduleInputs.get(0).getAstRoot(this);
     }
     throw new IllegalStateException("Root module has no inputs");
   }
@@ -1653,9 +1693,9 @@ public class Compiler extends AbstractCompiler {
 
     Node externsRoot;
     private Node jsRoot;
-    private CompilerInput[] externs;
-    private CompilerInput[] inputs;
-    private JSModule[] modules;
+    private List<CompilerInput> externs;
+    private List<CompilerInput> inputs;
+    private List<JSModule> modules;
     private PassConfig.State passConfigState;
     private JSTypeRegistry typeRegistry;
     private boolean normalized;
diff --git a/src/com/google/javascript/jscomp/CompilerInput.java b/src/com/google/javascript/jscomp/CompilerInput.java
index e1207735..7d69cf78 100644
--- a/src/com/google/javascript/jscomp/CompilerInput.java
+++ b/src/com/google/javascript/jscomp/CompilerInput.java
@@ -43,7 +43,7 @@ public class CompilerInput implements SourceAst, DependencyInfo {
 
   // Info about where the file lives.
   private JSModule module;
-  private final boolean isExtern;
+  private boolean isExtern;
   final private String name;
 
   // The AST.
@@ -294,4 +294,8 @@ public class CompilerInput implements SourceAst, DependencyInfo {
   public boolean isExtern() {
     return isExtern;
   }
+
+  void setIsExtern(boolean isExtern) {
+    this.isExtern = isExtern;
+  }
 }
diff --git a/src/com/google/javascript/jscomp/JSModuleGraph.java b/src/com/google/javascript/jscomp/JSModuleGraph.java
index b4931afa..fdd14e5b 100644
--- a/src/com/google/javascript/jscomp/JSModuleGraph.java
+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java
@@ -18,6 +18,7 @@ package com.google.javascript.jscomp;
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 
@@ -70,8 +71,15 @@ public class JSModuleGraph {
    * Creates a module graph from a list of modules in dependency order.
    */
   public JSModuleGraph(JSModule[] modulesInDepOrder) {
-    moduleDepths = new HashMap<JSModule, Integer>(modulesInDepOrder.length);
-    modulesByDepth = new ArrayList<List<JSModule>>();
+    this(Lists.<JSModule>newArrayList(modulesInDepOrder));
+  }
+
+  /**
+   * Creates a module graph from a list of modules in dependency order.
+   */
+  public JSModuleGraph(List<JSModule> modulesInDepOrder) {
+    moduleDepths = Maps.newHashMapWithExpectedSize(modulesInDepOrder.size());
+    modulesByDepth = Lists.newArrayList();
 
     for (JSModule module : modulesInDepOrder) {
       int depth = 0;
diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
index 7283551d..681d4839 100644
--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
@@ -279,7 +279,7 @@ class LiveVariablesAnalysis extends
    * Give up computing liveness of formal parameter by putting all the parameter
    * names in the escaped set.
    */
-  private void markAllParametersEscaped() {
+  void markAllParametersEscaped() {
     Node lp = jsScope.getRootNode().getFirstChild().getNext();
     for(Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext()) {
       escaped.add(jsScope.getVar(arg.getString()));
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 9ceffac0..216740b8 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1109,6 +1109,7 @@ public final class JsDocInfoParser {
    *
    * @return The extraction information.
    */
+  @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
 
@@ -1138,25 +1139,6 @@ public final class JsDocInfoParser {
 
     do {
       switch (token) {
-        case ANNOTATION:
-        case EOC:
-        case EOF:
-          String multilineText = builder.toString();
-
-          if (option != WhitespaceOption.PRESERVE) {
-            multilineText = multilineText.trim();
-          }
-
-          int endLineno = stream.getLineno();
-          int endCharno = stream.getCharno();
-
-          if (multilineText.length() > 0) {
-            jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                                  endLineno, endCharno);
-          }
-
-          return new ExtractionInfo(multilineText, token);
-
         case STAR:
           if (!ignoreStar) {
             if (builder.length() > 0) {
@@ -1178,6 +1160,32 @@ public final class JsDocInfoParser {
           token = next();
           continue;
 
+        case ANNOTATION:
+        case EOC:
+        case EOF:
+          // When we're capturing a license block, annotations
+          // in the block are ok.
+          if (!(option == WhitespaceOption.PRESERVE &&
+                token == JsDocToken.ANNOTATION)) {
+            String multilineText = builder.toString();
+
+            if (option != WhitespaceOption.PRESERVE) {
+              multilineText = multilineText.trim();
+            }
+
+            int endLineno = stream.getLineno();
+            int endCharno = stream.getCharno();
+
+            if (multilineText.length() > 0) {
+              jsdocBuilder.markText(multilineText, startLineno, startCharno,
+                  endLineno, endCharno);
+            }
+
+            return new ExtractionInfo(multilineText, token);
+          }
+
+          // FALL THROUGH
+
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
diff --git a/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java b/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java
index b6d6e50d..c11257cf 100644
--- a/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java
+++ b/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java
@@ -186,9 +186,16 @@ public class CoalesceVariableNamesTest extends CompilerTestCase {
   }
 
   public void testParameter4() {
-    // Make sure that we are taking advantage of correct merge opportunities.
+    // Make sure that we do not merge two-arg functions because of the
+    // IE sort bug (see comments in computeEscaped)
     test("function FUNC(x, y) {var a,b; y; a=0; a; x; b=0; b}",
-         "function FUNC(x, y) {         y; y=0; y; x; x=0; x}");
+         "function FUNC(x, y) {var a; y; a=0; a; x; a=0; a}");
+  }
+
+  public void testParameter4b() {
+    // Merge parameters
+    test("function FUNC(x, y, z) {var a,b; y; a=0; a; x; b=0; b}",
+         "function FUNC(x, y, z) {         y; y=0; y; x; x=0; x}");
   }
 
   public void testLiveRangeChangeWithinCfgNode() {
diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
index 3e684318..8fcccff0 100644
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -39,6 +39,7 @@ import java.util.Set;
 public class JsDocInfoParserTest extends BaseJSTypeTestCase {
 
   private Set<String> extraAnnotations;
+  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = null;
 
   @Override
   public void setUp() throws Exception {
@@ -1053,27 +1054,30 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
     assertEquals(": [ ] ...", parse(comment).getDescription());
   }
 
-  //public void testParsePreserveWithNoBuilderGivesWarning() throws Exception {
-  //  String comment = "@preserve Foo\nBar\n*/";
-  //  parse(comment,
-  //      "@preserve or @license annotation without file to associate it with");
-  //}
+  public void testParsePreserve() throws Exception {
+    Node node = new Node(1);
+    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
+    String comment = "@preserve Foo\nBar\n\nBaz*/";
+    parse(comment);
+    assertEquals(" Foo\n Bar\n\n Baz", node.getJSDocInfo().getLicense());
+  }
 
-  //public void testParsePreserve() throws Exception {
-  //  Node node = new Node(1);
-  //  this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
-  //  String comment = "@preserve Foo\nBar\n\nBaz*/";
-  //  parse(comment);
-  //  assertEquals(" Foo\n Bar\n\n Baz", node.getJSDocInfo().getLicense());
-  //}
+  public void testParseLicense() throws Exception {
+    Node node = new Node(1);
+    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
+    String comment = "@license Foo\nBar\n\nBaz*/";
+    parse(comment);
+    assertEquals(" Foo\n Bar\n\n Baz", node.getJSDocInfo().getLicense());
+  }
 
-  //public void testParseLicense() throws Exception {
-  //  Node node = new Node(1);
-  //  this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
-  //  String comment = "@license Foo\nBar\n\nBaz*/";
-  //  parse(comment);
-  //  assertEquals(" Foo\n Bar\n\n Baz", node.getJSDocInfo().getLicense());
-  //}
+  public void testParseLicenseWithAnnotation() throws Exception {
+    Node node = new Node(1);
+    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
+    String comment = "@license Foo \n * @author Charlie Brown */";
+    parse(comment);
+    assertEquals(" Foo \n @author Charlie Brown ",
+        node.getJSDocInfo().getLicense());
+  }
 
   public void testParseDefine1() throws Exception {
     assertTypeEquals(STRING_TYPE,
@@ -2300,9 +2304,9 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
     JsDocInfoParser jsdocParser = new JsDocInfoParser(stream(comment),
         "testcode", config, errorReporter);
 
-    //if (fileLevelJsDocBuilder != null) {
-    //  jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
-    //}
+    if (fileLevelJsDocBuilder != null) {
+      jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
+    }
 
     jsdocParser.parse();
 
