diff --git a/src/com/google/javascript/jscomp/JsAst.java b/src/com/google/javascript/jscomp/JsAst.java
index 2ada6d2a..ff71d944 100644
--- a/src/com/google/javascript/jscomp/JsAst.java
+++ b/src/com/google/javascript/jscomp/JsAst.java
@@ -79,8 +79,8 @@ public class JsAst implements SourceAst {
   }
 
   private void parse(AbstractCompiler compiler) {
+    int startErrorCount = compiler.getErrorManager().getErrorCount();
     try {
-      logger_.fine("Parsing: " + sourceFile.getName());
       ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),
           compiler.getParserConfig(),
           compiler.getDefaultErrorReporter(),
@@ -92,7 +92,12 @@ public class JsAst implements SourceAst {
           JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));
     }
 
-    if (root == null || compiler.hasHaltingErrors()) {
+
+    if (root == null ||
+        // Most passes try to report as many errors as possible,
+        // so there may already be errors. We only care if there were
+        // errors in the code we just parsed.
+        (compiler.getErrorManager().getErrorCount() > startErrorCount && !compiler.isIdeMode())) {
       // There was a parse error or IOException, so use a dummy block.
       root = IR.script();
     } else {
diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index c4f7f8da..4facea30 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2364,9 +2364,12 @@ public final class NodeUtil {
     if (nameNode.isName()) {
       result = IR.var(nameNode, value);
       result.setJSDocInfo(info);
-    } else {
+    } else if (value != null) {
       result = IR.exprResult(IR.assign(nameNode, value));
       result.getFirstChild().setJSDocInfo(info);
+    } else {
+      result = IR.exprResult(nameNode);
+      result.getFirstChild().setJSDocInfo(info);
     }
     return result;
   }
diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java
index 7108f27f..3a771c95 100644
--- a/src/com/google/javascript/jscomp/ScopedAliases.java
+++ b/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -353,8 +353,8 @@ class ScopedAliases implements HotSwapCompilerPass {
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         Node parent = n.getParent();
-        boolean isVarAssign = parent.isVar() && n.hasChildren();
-        if (isVarAssign && n.getFirstChild().isQualifiedName()) {
+        boolean isVar = parent.isVar();
+        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
           recordAlias(v);
         } else if (v.isBleedingFunction()) {
           // Bleeding functions already get a BAD_PARAMETERS error, so just
@@ -362,8 +362,10 @@ class ScopedAliases implements HotSwapCompilerPass {
         } else if (parent.getType() == Token.LP) {
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
-        } else if (isVarAssign) {
-          Node value = v.getInitialValue().detachFromParent();
+        } else if (isVar) {
+          Node value = n.hasChildren() ?
+              v.getInitialValue().detachFromParent() :
+              null;
           String name = n.getString();
           int nameCount = scopedAliasNames.count(name);
           scopedAliasNames.add(name);
@@ -374,15 +376,17 @@ class ScopedAliases implements HotSwapCompilerPass {
 
           // Add $jscomp.scope.name = EXPR;
           // Make sure we copy over all the jsdoc and debug info.
-          Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
-              compiler.getCodingConvention(),
-              globalName,
-              value,
-              v.getJSDocInfo())
-              .useSourceInfoIfMissingFromForTree(n);
-          NodeUtil.setDebugInformation(
-              newDecl.getFirstChild().getFirstChild(), n, name);
-          parent.getParent().addChildBefore(newDecl, parent);
+          if (value != null || v.getJSDocInfo() != null) {
+            Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
+                compiler.getCodingConvention(),
+                globalName,
+                value,
+                v.getJSDocInfo())
+                .useSourceInfoIfMissingFromForTree(n);
+            NodeUtil.setDebugInformation(
+                newDecl.getFirstChild().getFirstChild(), n, name);
+            parent.getParent().addChildBefore(newDecl, parent);
+          }
 
           // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
           v.getNameNode().addChildToFront(
diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
index f3aebec7..9150a1c8 100644
--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
@@ -522,6 +522,28 @@ public class ScopedAliasesTest extends CompilerTestCase {
          SCOPE_NAMESPACE + "$jscomp.scope.x = 3; $jscomp.scope.x$1 = 4");
   }
 
+  public void testIssue1103a() {
+    test("goog.scope(function () {" +
+         "  var a;" +
+         "  foo.bar = function () { a = 1; };" +
+         "});",
+         SCOPE_NAMESPACE + "foo.bar = function () { $jscomp.scope.a = 1; }");
+  }
+
+  public void testIssue1103b() {
+    test("goog.scope(function () {" +
+         "  var a = foo, b, c = 1;" +
+         "});",
+         SCOPE_NAMESPACE + "$jscomp.scope.c=1");
+  }
+
+  public void testIssue1103c() {
+    test("goog.scope(function () {" +
+         "  /** @type {number} */ var a;" +
+         "});",
+         SCOPE_NAMESPACE + "/** @type {number} */ $jscomp.scope.a;");
+  }
+
   // Alias Recording Tests
   // TODO(tylerg) : update these to EasyMock style tests once available
   public void testNoGoogScope() {
