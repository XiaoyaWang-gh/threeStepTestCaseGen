diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index bea12906..9c0c96b3 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -38,6 +38,7 @@ import com.google.javascript.rhino.jstype.JSType;
 import com.google.javascript.rhino.jstype.JSTypeNative;
 import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.ObjectType;
+import com.google.javascript.rhino.jstype.StaticSlot;
 
 import java.text.MessageFormat;
 import java.util.Iterator;
@@ -570,7 +571,7 @@ class TypeValidator {
     for (ObjectType implemented : type.getAllImplementedInterfaces()) {
       if (implemented.getImplicitPrototype() != null) {
         for (String prop :
-            implemented.getImplicitPrototype().getOwnPropertyNames()) {
+             implemented.getImplicitPrototype().getOwnPropertyNames()) {
           expectInterfaceProperty(t, n, instance, implemented, prop);
         }
       }
@@ -583,7 +584,8 @@ class TypeValidator {
    */
   private void expectInterfaceProperty(NodeTraversal t, Node n,
       ObjectType instance, ObjectType implementedInterface, String prop) {
-    if (!instance.hasProperty(prop)) {
+    StaticSlot<JSType> propSlot = instance.getSlot(prop);
+    if (propSlot == null) {
       // Not implemented
       String sourceName = n.getSourceFileName();
       sourceName = sourceName == null ? "" : sourceName;
@@ -592,16 +594,23 @@ class TypeValidator {
           INTERFACE_METHOD_NOT_IMPLEMENTED,
           prop, implementedInterface.toString(), instance.toString())));
     } else {
-      JSType found = instance.getPropertyType(prop);
+      Node propNode = propSlot.getDeclaration() == null ?
+          null : propSlot.getDeclaration().getNode();
+
+      // Fall back on the constructor node if we can't find a node for the
+      // property.
+      propNode = propNode == null ? n : propNode;
+
+      JSType found = propSlot.getType();
       JSType required
-        = implementedInterface.getImplicitPrototype().getPropertyType(prop);
+          = implementedInterface.getImplicitPrototype().getPropertyType(prop);
       found = found.restrictByNotNullOrUndefined();
       required = required.restrictByNotNullOrUndefined();
       if (!found.canAssignTo(required)) {
         // Implemented, but not correctly typed
-        FunctionType constructor
-          = implementedInterface.toObjectType().getConstructor();
-        registerMismatch(found, required, report(t.makeError(n,
+        FunctionType constructor =
+            implementedInterface.toObjectType().getConstructor();
+        registerMismatch(found, required, report(t.makeError(propNode,
             HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,
             constructor.getTopMostDefiningType(prop).toString(),
             required.toString(), found.toString())));
diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java
index 7f580a89..4b958377 100644
--- a/src/com/google/javascript/rhino/jstype/ArrowType.java
+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java
@@ -84,27 +84,67 @@ final class ArrowType extends JSType {
 
     ArrowType that = (ArrowType) other;
 
+    // This is described in Draft 2 of the ES4 spec,
+    // Section 3.4.7: Subtyping Function Types.
+
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
+
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    // TODO(nicksantos): This is incorrect. It should be invariant.
-    // Follow up with closure team on how to fix this without everyone
-    // hating on us.
+    //
+    // If this.paramType[i] is required,
+    // then that.paramType[i] is required.
+    //
+    // In theory, the "required-ness" should work in the other direction as
+    // well. In other words, if we have
+    //
+    // function f(number, number) {}
+    // function g(number) {}
+    //
+    // Then f *should* not be a subtype of g, and g *should* not be
+    // a subtype of f. But in practice, we do not implement it this way.
+    // We want to support the use case where you can pass g where f is
+    // expected, and pretend that g ignores the second argument.
+    // That way, you can have a single "no-op" function, and you don't have
+    // to create a new no-op function for every possible type signature.
+    //
+    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
+      JSType thatParamType = thatParam.getJSType();
       if (thisParamType != null) {
-        JSType thatParamType = thatParam.getJSType();
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
+
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
+      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
+      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();
+
+      // "that" can't be a supertype, because it's missing a required argument.
+      if (!thisIsOptional && thatIsOptional) {
+        // NOTE(nicksantos): In our type system, we use {function(...?)} and
+        // {function(...NoType)} to to indicate that arity should not be
+        // checked. Strictly speaking, this is not a correct formulation,
+        // because now a sub-function can required arguments that are var_args
+        // in the super-function. So we special-case this.
+        boolean isTopFunction =
+            thatIsVarArgs &&
+            (thatParamType == null ||
+             thatParamType.isUnknownType() ||
+             thatParamType.isNoType());
+        if (!isTopFunction) {
+          return false;
+        }
+      }
+
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
@@ -112,6 +152,7 @@ final class ArrowType extends JSType {
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
+
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
@@ -119,23 +160,13 @@ final class ArrowType extends JSType {
       }
     }
 
-    // Right now, the parser's type system doesn't have a good way
-    // to model optional arguments.
-    //
-    // Suppose we have
-    // function f(number, number) {}
-    // function g(number) {}
-    // If the second arg of f is optional, then f is a subtype of g,
-    // but g is not a subtype of f.
-    // If the second arg of f is required, then g is a subtype of f,
-    // but f is not a subtype of g.
-    //
-    // Until we model optional params, let's just punt on this.
-    // If one type has more arguments than the other, we won't check them.
-    //
-    // NOTE(nicksantos): This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.6: Subtyping Function Types. It seems really
-    // strange but I haven't thought a lot about the implementation.
+    // "that" can't be a supertype, because it's missing a required arguement.
+    if (thisParam != null
+        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()
+        && thatParam == null) {
+      return false;
+    }
+
     return true;
   }
 
diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index 4d93dbdd..99ee71c2 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -1784,11 +1784,11 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
         "F.prototype.foo = function() { };" +
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
-        "/** @override */ G.prototype.foo = function(x, y) { };" +
-        "(new G()).foo();",
-        "Function G.prototype.foo: called with 0 argument(s). " +
-        "Function requires at least 2 argument(s) " +
-        "and no more than 2 argument(s).");
+        "/** @override */ G.prototype.foo = function(x, y) { };",
+        "mismatch of the foo property type and the type of the property " +
+        "it overrides from superclass F\n" +
+        "original: function (this:F): undefined\n" +
+        "override: function (this:G, ?, ?): undefined");
   }
 
   public void testMethodInference8() throws Exception {
@@ -1798,10 +1798,8 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ " +
-        "G.prototype.foo = function(a, opt_b, var_args) { };" +
-        "(new G()).foo();",
-        "Function G.prototype.foo: called with 0 argument(s). " +
-        "Function requires at least 1 argument(s).");
+        "G.prototype.foo = function(opt_b, var_args) { };" +
+        "(new G()).foo(1, 2, 3);");
   }
 
   public void testMethodInference9() throws Exception {
@@ -1811,7 +1809,7 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ " +
-        "G.prototype.foo = function(a, var_args, opt_b) { };",
+        "G.prototype.foo = function(var_args, opt_b) { };",
         "variable length argument must be last");
   }
 
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 8d8cc4f2..073dbc7c 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2050,11 +2050,11 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "F.prototype.foo = function() { };" +
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
-        "/** @override */ G.prototype.foo = function(x, y) { };" +
-        "(new G()).foo();",
-        "Function G.prototype.foo: called with 0 argument(s). " +
-        "Function requires at least 2 argument(s) " +
-        "and no more than 2 argument(s).");
+        "/** @override */ G.prototype.foo = function(x, y) { };",
+        "mismatch of the foo property type and the type of the property " +
+        "it overrides from superclass F\n" +
+        "original: function (this:F): undefined\n" +
+        "override: function (this:G, ?, ?): undefined");
   }
 
   public void testMethodInference8() throws Exception {
@@ -2064,10 +2064,8 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ " +
-        "G.prototype.foo = function(a, opt_b, var_args) { };" +
-        "(new G()).foo();",
-        "Function G.prototype.foo: called with 0 argument(s). " +
-        "Function requires at least 1 argument(s).");
+        "G.prototype.foo = function(opt_b, var_args) { };" +
+        "(new G()).foo(1, 2, 3);");
   }
 
   public void testMethodInference9() throws Exception {
@@ -2077,7 +2075,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ " +
-        "G.prototype.foo = function(a, var_args, opt_b) { };",
+        "G.prototype.foo = function(var_args, opt_b) { };",
         "variable length argument must be last");
   }
 
diff --git a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
index aceab77b..055c9c6f 100644
--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
@@ -147,9 +147,9 @@ public class FunctionTypeTest extends BaseJSTypeTestCase {
         .withReturnType(BOOLEAN_TYPE).build();
 
     assertLeastSupertype(
-        "Function", twoNumbers, oneNumber);
+        "function (number, number): boolean", twoNumbers, oneNumber);
     assertGreatestSubtype(
-        "function (...[*]): None", twoNumbers, oneNumber);
+        "function (number): boolean", twoNumbers, oneNumber);
   }
 
   public void testSubtypeWithInterfaceThisType() {
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeTest.java b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
index 20818551..5e444bf9 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
@@ -2973,7 +2973,7 @@ public class JSTypeTest extends BaseJSTypeTestCase {
         .withParamsNode(registry.createParameters())
         .withTypeOfThis(DATE_TYPE).build();
     FunctionType dateMethodWithParam = new FunctionBuilder(registry)
-        .withParamsNode(registry.createParameters(NUMBER_TYPE))
+        .withParamsNode(registry.createOptionalParameters(NUMBER_TYPE))
         .withTypeOfThis(DATE_TYPE).build();
     FunctionType dateMethodWithReturn = new FunctionBuilder(registry)
         .withReturnType(NUMBER_TYPE)
@@ -2982,7 +2982,7 @@ public class JSTypeTest extends BaseJSTypeTestCase {
         .withParamsNode(registry.createParameters())
         .withTypeOfThis(STRING_OBJECT_TYPE).build();
     FunctionType stringMethodWithParam = new FunctionBuilder(registry)
-        .withParamsNode(registry.createParameters(NUMBER_TYPE))
+        .withParamsNode(registry.createOptionalParameters(NUMBER_TYPE))
         .withTypeOfThis(STRING_OBJECT_TYPE).build();
     FunctionType stringMethodWithReturn = new FunctionBuilder(registry)
         .withReturnType(NUMBER_TYPE)
@@ -4374,7 +4374,7 @@ public class JSTypeTest extends BaseJSTypeTestCase {
 
   public void testSubtypingFunctionFixedArgsNotMatching() throws Exception {
     FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,
-        false, EVAL_ERROR_TYPE);
+        false, EVAL_ERROR_TYPE, UNKNOWN_TYPE);
     FunctionType f2 = registry.createFunctionType(STRING_OBJECT_TYPE,
         false, ERROR_TYPE, ALL_TYPE);
 
