diff --git a/javadoc/com/google/javascript/jscomp/AbstractCompiler.html b/javadoc/com/google/javascript/jscomp/AbstractCompiler.html
index 80160e3f..2e312d53 100644
--- a/javadoc/com/google/javascript/jscomp/AbstractCompiler.html
+++ b/javadoc/com/google/javascript/jscomp/AbstractCompiler.html
@@ -209,6 +209,14 @@ An abstract compiler, to help remove the circular dependency of
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>abstract &nbsp;void</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#report(com.google.javascript.jscomp.JSError)">report</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>&nbsp;error)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report an error or warning.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>abstract &nbsp;void</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#reportCodeChange()">reportCodeChange</A></B>()</CODE>
 
 <BR>
@@ -311,6 +319,22 @@ public abstract <A HREF="../../../../com/google/javascript/jscomp/Scope.html" ti
 </DL>
 <HR>
 
+<A NAME="report(com.google.javascript.jscomp.JSError)"><!-- --></A><H3>
+report</H3>
+<PRE>
+public abstract void <B>report</B>(<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>&nbsp;error)</PRE>
+<DL>
+<DD>Report an error or warning.
+<P>
+<DD><DL>
+</DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="getCodingConvention()"><!-- --></A><H3>
 getCodingConvention</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/jscomp/CommandLineRunner.html b/javadoc/com/google/javascript/jscomp/CommandLineRunner.html
index 1bc9af22..b75f8758 100644
--- a/javadoc/com/google/javascript/jscomp/CommandLineRunner.html
+++ b/javadoc/com/google/javascript/jscomp/CommandLineRunner.html
@@ -239,7 +239,7 @@ CommandLineRunner translates flags into Java API calls on the Compiler.
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>protected &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A></CODE></FONT></TD>
-<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#getDiagnoticGroups()">getDiagnoticGroups</A></B>()</CODE>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#getDiagnosticGroups()">getDiagnosticGroups</A></B>()</CODE>
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
@@ -430,10 +430,10 @@ protected com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConf
 </DL>
 <HR>
 
-<A NAME="getDiagnoticGroups()"><!-- --></A><H3>
-getDiagnoticGroups</H3>
+<A NAME="getDiagnosticGroups()"><!-- --></A><H3>
+getDiagnosticGroups</H3>
 <PRE>
-protected <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A> <B>getDiagnoticGroups</B>()</PRE>
+protected <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A> <B>getDiagnosticGroups</B>()</PRE>
 <DL>
 <DD><DL>
 </DL>
diff --git a/javadoc/com/google/javascript/jscomp/Compiler.html b/javadoc/com/google/javascript/jscomp/Compiler.html
index 07cc146d..1e275554 100644
--- a/javadoc/com/google/javascript/jscomp/Compiler.html
+++ b/javadoc/com/google/javascript/jscomp/Compiler.html
@@ -558,6 +558,14 @@ Compiler (and the other classes in this package) does the following:
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 <CODE>&nbsp;void</CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#report(com.google.javascript.jscomp.JSError)">report</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>&nbsp;error)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report an error or warning.</TD>
+</TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>&nbsp;void</CODE></FONT></TD>
 <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#reportCodeChange()">reportCodeChange</A></B>()</CODE>
 
 <BR>
@@ -1283,6 +1291,23 @@ public boolean <B>isTypeCheckingEnabled</B>()</PRE>
 </DL>
 <HR>
 
+<A NAME="report(com.google.javascript.jscomp.JSError)"><!-- --></A><H3>
+report</H3>
+<PRE>
+public void <B>report</B>(<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>&nbsp;error)</PRE>
+<DL>
+<DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#report(com.google.javascript.jscomp.JSError)">AbstractCompiler</A></CODE></B></DD>
+<DD>Report an error or warning.
+<P>
+<DD><DL>
+<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#report(com.google.javascript.jscomp.JSError)">report</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
+</DD>
+<DD><DL>
+</DL>
+</DD>
+</DL>
+<HR>
+
 <A NAME="getErrorCount()"><!-- --></A><H3>
 getErrorCount</H3>
 <PRE>
diff --git a/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html b/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html
index 32b29913..7cb733cf 100644
--- a/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html
+++ b/javadoc/com/google/javascript/jscomp/DiagnosticGroups.html
@@ -73,9 +73,9 @@ function windowTitle()
 </TR>
 <TR>
 <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
-  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#methods_inherited_from_class_java.lang.Object">METHOD</A></FONT></TD>
+  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
 <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
-DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;METHOD</FONT></TD>
+DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
 </TR>
 </TABLE>
 <A NAME="skip-navbar_top"></A>
@@ -219,6 +219,14 @@ Named groups of DiagnosticTypes exposed by Compiler.
 <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 <B>Method Summary</B></FONT></TH>
 </TR>
+<TR BGCOLOR="white" CLASS="TableRowColor">
+<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
+<CODE>protected &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A></CODE></FONT></TD>
+<TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html#forName(java.lang.String)">forName</A></B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</CODE>
+
+<BR>
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find the diagnostic group registered under the given name.</TD>
+</TR>
 </TABLE>
 &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
 <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
@@ -360,6 +368,28 @@ public static <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.
 <DL>
 </DL>
 </DL>
+
+<!-- ============ METHOD DETAIL ========== -->
+
+<A NAME="method_detail"><!-- --></A>
+<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
+<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
+<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
+<B>Method Detail</B></FONT></TH>
+</TR>
+</TABLE>
+
+<A NAME="forName(java.lang.String)"><!-- --></A><H3>
+forName</H3>
+<PRE>
+protected <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp">DiagnosticGroup</A> <B>forName</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;name)</PRE>
+<DL>
+<DD>Find the diagnostic group registered under the given name.
+<P>
+<DD><DL>
+</DL>
+</DD>
+</DL>
 <!-- ========= END OF CLASS DATA ========= -->
 <HR>
 
@@ -411,9 +441,9 @@ public static <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.
 </TR>
 <TR>
 <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
-  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#methods_inherited_from_class_java.lang.Object">METHOD</A></FONT></TD>
+  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
 <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
-DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;METHOD</FONT></TD>
+DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
 </TR>
 </TABLE>
 <A NAME="skip-navbar_bottom"></A>
diff --git a/javadoc/index-all.html b/javadoc/index-all.html
index ea3f1669..9587067e 100644
--- a/javadoc/index-all.html
+++ b/javadoc/index-all.html
@@ -1882,6 +1882,9 @@ Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/js
 <DT><A HREF="./com/google/javascript/jscomp/MessageFormatter.html#formatWarning(com.google.javascript.jscomp.JSError)"><B>formatWarning(JSError)</B></A> - 
 Method in interface com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/MessageFormatter.html" title="interface in com.google.javascript.jscomp">MessageFormatter</A>
 <DD>Format a warning.
+<DT><A HREF="./com/google/javascript/jscomp/DiagnosticGroups.html#forName(java.lang.String)"><B>forName(String)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A>
+<DD>Find the diagnostic group registered under the given name.
 <DT><A HREF="./com/google/javascript/jscomp/parsing/NullErrorReporter.html#forNewRhino()"><B>forNewRhino()</B></A> - 
 Static method in class com.google.javascript.jscomp.parsing.<A HREF="./com/google/javascript/jscomp/parsing/NullErrorReporter.html" title="class in com.google.javascript.jscomp.parsing">NullErrorReporter</A>
 <DD>&nbsp;
@@ -6381,9 +6384,15 @@ Method in class com.google.javascript.rhino.<A HREF="./com/google/javascript/rhi
 <DT><A HREF="./com/google/javascript/rhino/Node.html#replaceChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><B>replaceChildAfter(Node, Node)</B></A> - 
 Method in class com.google.javascript.rhino.<A HREF="./com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>
 <DD>&nbsp;
+<DT><A HREF="./com/google/javascript/jscomp/AbstractCompiler.html#report(com.google.javascript.jscomp.JSError)"><B>report(JSError)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>
+<DD>Report an error or warning.
 <DT><A HREF="./com/google/javascript/jscomp/BasicErrorManager.html#report(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)"><B>report(CheckLevel, JSError)</B></A> - 
 Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/BasicErrorManager.html" title="class in com.google.javascript.jscomp">BasicErrorManager</A>
 <DD>&nbsp;
+<DT><A HREF="./com/google/javascript/jscomp/Compiler.html#report(com.google.javascript.jscomp.JSError)"><B>report(JSError)</B></A> - 
+Method in class com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A>
+<DD>&nbsp;
 <DT><A HREF="./com/google/javascript/jscomp/ErrorManager.html#report(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)"><B>report(CheckLevel, JSError)</B></A> - 
 Method in interface com.google.javascript.jscomp.<A HREF="./com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>
 <DD>Reports an error.
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 934d74f3..602c27c1 100755
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
index ebd382a1..42eaa7d4 100644
--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -120,13 +120,13 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
    */
   protected abstract B createOptions();
 
-  protected DiagnosticGroups getDiagnoticGroups() {
+  protected DiagnosticGroups getDiagnosticGroups() {
     return new DiagnosticGroups();
   }
 
   protected void initOptionsFromFlags(CompilerOptions options) {
 
-    DiagnosticGroups diagnosticGroups = getDiagnoticGroups();
+    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();
 
     diagnosticGroups.setWarningLevels(
         options, config.jscompError, CheckLevel.ERROR);
diff --git a/src/com/google/javascript/jscomp/AbstractCompiler.java b/src/com/google/javascript/jscomp/AbstractCompiler.java
index e4e7cd33..890b0e34 100644
--- a/src/com/google/javascript/jscomp/AbstractCompiler.java
+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java
@@ -74,7 +74,7 @@ public abstract class AbstractCompiler implements SourceExcerptProvider {
   /**
    * Report an error or warning.
    */
-  abstract void report(JSError error);
+  public abstract void report(JSError error);
 
   /**
    * Report an internal error.
diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index 9d788e33..07fac712 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -1455,7 +1455,7 @@ public class Compiler extends AbstractCompiler {
   //------------------------------------------------------------------------
 
   @Override
-  void report(JSError error) {
+  public void report(JSError error) {
     CheckLevel level = error.level;
     WarningsGuard guard = options_.getWarningsGuard();
     if (guard != null) {
diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java
index 42e1276d..7c7534ca 100644
--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java
+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java
@@ -40,7 +40,7 @@ public class DiagnosticGroups {
   }
 
   /** Find the diagnostic group registered under the given name. */
-  DiagnosticGroup forName(String name) {
+  protected DiagnosticGroup forName(String name) {
     return groupsByName.get(name);
   }
 
diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 993b68dc..22a51318 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -46,11 +46,13 @@ import java.util.Map;
  * This pass currently does the following:
  * 1) Simplifies the AST by splitting var statements, moving initializiers
  *    out of for loops, and converting whiles to fors.
- * 2) Makes all variable names globally unique (extern or otherwise) so that
+ * 2) Moves hoisted functions to the top of function scopes.
+ * 3) Rewrites unhoisted named function declarations to be var declarations.
+ * 4) Makes all variable names globally unique (extern or otherwise) so that
  *    no value is ever shadowed (note: "arguments" may require special
  *    handling).
- * 3) Removes duplicate variable declarations.
- * 4) Marks constants with the IS_CONSTANT_NAME annotation.
+ * 5) Removes duplicate variable declarations.
+ * 6) Marks constants with the IS_CONSTANT_NAME annotation.
  *
  * @author johnlenz@google.com (johnlenz)
  */
@@ -88,7 +90,7 @@ class Normalize implements CompilerPass {
     // MakeDeclaredNamesUnique in order for catch block exception names to be
     // handled properly. Specifically, catch block exception names are
     // only valid within the catch block, but our currect Scope logic
-    // has no concept of this and includes it in the containing function 
+    // has no concept of this and includes it in the containing function
     // (or global scope). MakeDeclaredNamesUnique makes the catch exception
     // names unique so that removeDuplicateDeclarations() will properly handle
     // cases where a function scope variable conflict with a exception name:
@@ -97,7 +99,7 @@ class Normalize implements CompilerPass {
     //      var e = 1; // f scope 'e'
     //   }
     // otherwise 'var e = 1' would be rewritten as 'e = 1'.
-    // TODO(johnlenz): Introduce a seperate scope for catch nodes. 
+    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
@@ -275,9 +277,63 @@ class Normalize implements CompilerPass {
             reportCodeChange("WHILE node");
           }
           break;
+
+        case Token.FUNCTION:
+          normalizeFunctionDeclaration(n);
+          break;
       }
     }
 
+    /**
+     * Rewrite named unhoisted functions declarations to a known
+     * consistent behavior so we don't to different logic paths for the same
+     * code. From:
+     *    function f() {}
+     * to:
+     *    var f = function () {};
+     */
+    private void normalizeFunctionDeclaration(Node n) {
+      Preconditions.checkState(n.getType() == Token.FUNCTION);
+      if (!NodeUtil.isFunctionAnonymous(n)
+          && !NodeUtil.isHoistedFunctionDeclaration(n)) {
+        rewriteFunctionDeclaration(n);
+      }
+    }
+
+    /**
+     * Rewrite the function declaration from:
+     *   function x() {}
+     *   FUNCTION
+     *     NAME
+     *     LP
+     *     BLOCK
+     * to:
+     *   var x = function() {};
+     *   VAR
+     *     NAME
+     *       FUNCTION
+     *         NAME (w/ empty string)
+     *         LP
+     *         BLOCK
+     */
+    private void rewriteFunctionDeclaration(Node n) {
+      // Prepare a spot for the function.
+      Node oldNameNode = n.getFirstChild();
+      Node fnNameNode = oldNameNode.cloneNode();
+      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());
+      var.copyInformationFrom(n);
+
+      // Prepare the function
+      oldNameNode.setString("");
+
+      // Move the function
+      Node parent = n.getParent();
+      parent.replaceChild(n, var);
+      fnNameNode.addChildToFront(n);
+
+      reportCodeChange("Function declaration");
+    }
+
     /**
      * Do normalizations that introduce new siblings or parents.
      */
@@ -483,53 +539,66 @@ class Normalize implements CompilerPass {
         Scope s, String name, Node n, Node parent, Node gramps,
         Node nodeWithLineNumber) {
       Preconditions.checkState(n.getType() == Token.NAME);
-      if (parent.getType() == Token.VAR) {
+      Var v = s.getVar(name);
+      // If name is "arguments", Var maybe null.
+      Preconditions.checkState(
+          v == null || v.getParentNode().getType() != Token.CATCH);
+      if (v != null && parent.getType() == Token.FUNCTION) {
+        if (v.getParentNode().getType() == Token.VAR) {
+          s.undeclare(v);
+          s.declare(name, n, n.getJSType(), v.input);
+          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),
+              v.getParentNode().getParent());
+        }
+      } else if (parent.getType() == Token.VAR) {
         Preconditions.checkState(parent.hasOneChild());
 
-        //
-        // Remove the parent VAR. There are three cases that need to be handled:
-        //  1) "var a = b;" which is replaced with "a = b"
-        //  2) "label:var a;" which is replaced with "label:;".  Ideally, the
-        //     label itself would be removed but that is not possible in the
-        //     context in which "onRedeclaration" is called.
-        //  3) "for (var a in b) ..." which is replaced with "for (a in b)..."
-        // Cases we don't need to handle are VARs with multiple children,
-        // which have already been split into separate declarations, so there
-        // is no need to handle that here, and "for (var a;;);", which has
-        // been moved out of the loop.
-        //
-        // The result of this is that in each case the parent node is replaced
-        // which is generally dangerous in a traversal but is fine here with
-        // the scope creator, as the next node of interest is the parent's
-        // next sibling.
-        //
-        if (n.hasChildren()) {
-          // The var is being initialize, preserve the new value.
+        replaceVarWithAssignment(n, parent, gramps);
+      }
+    }
+
+    /**
+     * Remove the parent VAR. There are three cases that need to be handled:
+     *   1) "var a = b;" which is replaced with "a = b"
+     *   2) "label:var a;" which is replaced with "label:;". Ideally, the
+     *      label itself would be removed but that is not possible in the
+     *      context in which "onRedeclaration" is called.
+     *   3) "for (var a in b) ..." which is replaced with "for (a in b)..."
+     *      Cases we don't need to handle are VARs with multiple children,
+     *      which have already been split into separate declarations, so there
+     *      is no need to handle that here, and "for (var a;;);", which has
+     *      been moved out of the loop.
+     *      The result of this is that in each case the parent node is replaced
+     *      which is generally dangerous in a traversal but is fine here with
+     *      the scope creator, as the next node of interest is the parent's
+     *      next sibling.
+     */
+    private void replaceVarWithAssignment(Node n, Node parent, Node gramps) {
+      if (n.hasChildren()) {
+        // The  *  is being initialize, preserve the new value.
+        parent.removeChild(n);
+        // Convert "var name = value" to "name = value"
+        Node value = n.getFirstChild();
+        n.removeChild(value);
+        Node replacement = new Node(Token.ASSIGN, n, value);
+        gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));
+      } else {
+        // It is an empty reference remove it.
+        if (NodeUtil.isStatementBlock(gramps)) {
+          gramps.removeChild(parent);
+        } else if (gramps.getType() == Token.FOR) {
+          // This is the "for (var a in b)..." case.  We don't need to worry
+          // about initializers in "for (var a;;)..." as those are moved out
+          // as part of the other normalizations.
           parent.removeChild(n);
-          // Convert "var name = value" to "name = value"
-          Node value = n.getFirstChild();
-          n.removeChild(value);
-          Node replacement = new Node(Token.ASSIGN, n, value);
-          gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));
+          gramps.replaceChild(parent, n);
         } else {
-          // It is an empty reference remove it.
-          if (NodeUtil.isStatementBlock(gramps)) {
-            gramps.removeChild(parent);
-          } else if (gramps.getType() == Token.FOR) {
-            // This is the "for (var a in b)..." case.  We don't need to worry
-            // about initializers in "for (var a;;)..." as those are moved out
-            // as part of the other normalizations.
-            parent.removeChild(n);
-            gramps.replaceChild(parent, n);
-          } else {
-            Preconditions.checkState(gramps.getType() == Token.LABEL);
-            gramps.replaceChild(parent, new Node(Token.EMPTY));
-          }
+          Preconditions.checkState(gramps.getType() == Token.LABEL);
+          gramps.replaceChild(parent, new Node(Token.EMPTY));
         }
-        reportCodeChange("Duplicate VAR declaration");
       }
+      reportCodeChange("Duplicate VAR declaration");
     }
-
   }
 
   /**
diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
index 2073bff0..2f0fcbda 100644
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -139,11 +139,57 @@ public class NormalizeTest extends CompilerTestCase {
   public void testMoveFunctions2() throws Exception {
     testSame("function f() { function foo() {} }");
     test("function f() { f(); a:function bar() {} }",
-         "function f() { f(); a:{function bar() {}}}");
-    testSame("function f() { f(); {function bar() {}}}");
-    testSame("function f() { f(); if (true) {function bar() {}}}");
+         "function f() { f(); a:{ var bar = function () {} }}");
+    test("function f() { f(); {function bar() {}}}",
+         "function f() { f(); {var bar = function () {}}}");
+    test("function f() { f(); if (true) {function bar() {}}}",
+         "function f() { f(); if (true) {var bar = function () {}}}");
   }
 
+  private String inFunction(String code) {
+    return "(function(){" + code + "})";
+  }
+
+  private void testSameInFunction(String code) {
+    testSame(inFunction(code));
+  }
+
+  private void testInFunction(String code, String expected) {
+    test(inFunction(code), inFunction(expected));
+  }
+
+  public void testNormalizeFunctionDeclarations() throws Exception {
+    testSame("function f() {}");
+    testSame("var f = function () {}");
+    test("var f = function f() {}",
+         "var f = function f$$1() {}");
+    testSame("var f = function g() {}");
+    test("a:function g() {}",
+         "a:{ var g = function () {} }");
+    test("{function g() {}}",
+         "{var g = function () {}}");
+    testSame("if (function g() {}) {}");
+    test("if (true) {function g() {}}",
+         "if (true) {var g = function () {}}");
+    test("if (true) {} else {function g() {}}",
+         "if (true) {} else {var g = function () {}}");
+    testSame("switch (function g() {}) {}");
+    test("switch (1) { case 1: function g() {}}",
+         "switch (1) { case 1: var g = function () {}}");
+
+
+    testSameInFunction("function f() {}");
+    testInFunction("f(); a:function g() {}",
+                   "f(); a:{ var g = function () {} }");
+    testInFunction("f(); {function g() {}}",
+                   "f(); {var g = function () {}}");
+    testInFunction("f(); if (true) {function g() {}}",
+                   "f(); if (true) {var g = function () {}}");
+    testInFunction("if (true) {} else {function g() {}}",
+                   "if (true) {} else {var g = function () {}}");
+  }
+
+
   public void testMakeLocalNamesUnique() {
     if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
       return;
@@ -204,7 +250,31 @@ public class NormalizeTest extends CompilerTestCase {
     test("var e = 1; function f(){ try {} catch (e) {} var e = 2 }",
          "var e = 1; function f(){ try {} catch (e$$2) {} var e$$1 = 2 }");
   }
-  
+
+  public void testRemoveDuplicateVarDeclarations3() {
+    test("var f = 1; function f(){}",
+         "f = 1; function f(){}");
+    test("var f; function f(){}",
+         "function f(){}");
+    test("if (a) { var f = 1; } else { function f(){} }",
+         "if (a) { var f = 1; } else { f = function (){} }");
+
+    test("function f(){} var f = 1;",
+         "function f(){} f = 1;");
+    test("function f(){} var f;",
+         "function f(){}");
+    test("if (a) { function f(){} } else { var f = 1; }",
+         "if (a) { var f = function (){} } else { f = 1; }");
+
+    // TODO(johnlenz): Do we need to handle this differently for "third_party"
+    // mode? Remove the previous function definitions?
+    test("function f(){} function f(){}",
+         "function f(){} function f(){}",
+         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);
+    test("if (a) { function f(){} } else { function f(){} }",
+         "if (a) { var f = function (){} } else { f = function (){} }");
+  }
+
   public void testRenamingConstants() {
     test("var ACONST = 4;var b = ACONST;",
          "var ACONST = 4; var b = ACONST;");
