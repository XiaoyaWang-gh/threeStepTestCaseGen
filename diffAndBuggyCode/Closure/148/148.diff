diff --git a/externs/ie_css.js b/externs/ie_css.js
index 0d11b910..38f3fbee 100644
--- a/externs/ie_css.js
+++ b/externs/ie_css.js
@@ -104,7 +104,11 @@ StyleSheet.prototype.removeExpression;
  */
 CSSProperties.prototype.imeMode;
 
-/** @type {string} */ CSSProperties.prototype.msInterpolationMode;
+/**
+ * @type {string}
+ * @see http://msdn.microsoft.com/en-us/library/ms534176(VS.85).aspx
+ */
+CSSProperties.prototype.msInterpolationMode;
 
 /** @type {string} */ CSSProperties.prototype.overflowX;
 
@@ -120,4 +124,14 @@ CSSProperties.prototype.imeMode;
 
 /** @type {string} */ CSSProperties.prototype.styleFloat;
 
-/** @type {string|number} */ CSSProperties.prototype.zoom;
+/**
+ * @type {string|number}
+ * @see http://msdn.microsoft.com/en-us/library/ms535169(VS.85).aspx
+ */
+CSSProperties.prototype.zoom;
+
+/**
+ * @type {string}
+ * @see http://msdn.microsoft.com/en-us/library/ms535153(VS.85).aspx
+ */
+CSSProperties.prototype.writingMode;
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index c692035d..a3543813 100755
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 1df9098b..f3d95836 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -179,6 +179,9 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
       case Token.ARRAYLIT:
         typeNameString = "object";
         break;
+      case Token.VOID:
+        typeNameString = "undefined";
+        break;
       case Token.NAME:
         // We assume here that programs don't change the value of the
         // keyword undefined to something other than the value undefined.
diff --git a/src/com/google/javascript/jscomp/Position.java b/src/com/google/javascript/jscomp/Position.java
index 1d263011..6edc7436 100644
--- a/src/com/google/javascript/jscomp/Position.java
+++ b/src/com/google/javascript/jscomp/Position.java
@@ -22,8 +22,8 @@ package com.google.javascript.jscomp;
 *
  */
 class Position {
-  private int lineNumber;
-  private int characterIndex;
+  private final int lineNumber;
+  private final int characterIndex;
 
   public Position(int lineNumber, int characterIndex) {
     this.lineNumber = lineNumber;
diff --git a/src/com/google/javascript/jscomp/SourceMap.java b/src/com/google/javascript/jscomp/SourceMap.java
index f5e43170..698dfdec 100644
--- a/src/com/google/javascript/jscomp/SourceMap.java
+++ b/src/com/google/javascript/jscomp/SourceMap.java
@@ -38,6 +38,8 @@ import java.util.List;
  */
 public class SourceMap {
 
+  private final static int UNMAPPED = -1;
+
   /**
    * A mapping from a given position in an input source file to a given position
    * in the generated code.
@@ -46,10 +48,10 @@ public class SourceMap {
     /**
      * A unique ID for this mapping for record keeping purposes.
      */
-    int id;
+    int id = UNMAPPED;
 
     /**
-     * The JSON escaped input source file.
+     * The input source file.
      */
     String sourceFile;
 
@@ -73,31 +75,74 @@ public class SourceMap {
     Position endPosition;
 
     /**
-     * The JSON escaped original name of the token found at the position
+     * The original name of the token found at the position
      * represented by this mapping (if any).
      */
     String originalName;
 
+    /**
+     * Whether the mapping is actually used by the source map.
+     */
+    boolean used = false;
+  }
+
+  private class MappingWriter {
+    /**
+     * Cache of escaped source file name.
+     */
+    private String lastSourceFile = null;
+    private String lastSourceFileEscaped = null;
+    private int lastLine = 0;
+    private String lastLineString = String.valueOf(0);
+
     /**
      * Appends the mapping to the given buffer.
      */
-    void appendTo(Appendable out) throws IOException {
+    private void appendMappingTo(
+        Mapping m, Appendable out) throws IOException {
       out.append("[");
 
-      out.append(sourceFile);
+      String sourceFile = m.sourceFile;
+      // The source file rarely changes, so cache the escaped string.
+      String escapedSourceFile;
+      if (lastSourceFile != sourceFile) { // yes, s1 != s2, not !s1.equals(s2)
+        lastSourceFile = sourceFile;
+        lastSourceFileEscaped = escapeString(sourceFile);
+      }
+      escapedSourceFile = lastSourceFileEscaped;
 
+      out.append(escapedSourceFile);
       out.append(",");
-      out.append(String.valueOf(originalPosition.getLineNumber()));
+
+      int line = m.originalPosition.getLineNumber();
+      if (line != lastLine) {
+        lastLineString = String.valueOf(line);
+      }
+      String lineValue = lastLineString;
+
+      out.append(lineValue);
 
       out.append(",");
-      out.append(String.valueOf(originalPosition.getCharacterIndex()));
+      out.append(String.valueOf(
+          m.originalPosition.getCharacterIndex()));
 
-      if (originalName != null) {
+      if (m.originalName != null) {
         out.append(",");
-        out.append(originalName);
+        out.append(escapeString(m.originalName));
       }
 
-      out.append("]");
+      out.append("]\n");
+    }
+
+    /**
+     * Add used mappings to the supplied Appendable.
+     */
+    void appendMappings(Appendable out) throws IOException {
+      for (Mapping m : mappings) {
+        if (m.used) {
+          appendMappingTo(m, out);
+        }
+      }
     }
   }
 
@@ -126,12 +171,6 @@ public class SourceMap {
     return CodeGenerator.escapeToDoubleQuotedJsString(value);
   }
 
-  /**
-   * Cache of escaped source file name.
-   */
-  private String lastSourceFile = null;
-  private String lastSourceFileEscaped = null;
-
   /**
    * Adds a mapping for the given node.  Mappings must be added in order.
    *
@@ -149,48 +188,45 @@ public class SourceMap {
       return;
     }
 
-    // The source file rarely changes, so cache the escaped string.
-    String escapedSourceFile;
-    if (lastSourceFile != sourceFile) {  // yes, "s1 != s2" not "!s1.equals(s2)"
-      lastSourceFile = sourceFile;
-      lastSourceFileEscaped = escapeString(sourceFile);
-    }
-    escapedSourceFile = lastSourceFileEscaped;
-
     // Create the new mapping.
     Mapping mapping = new Mapping();
-    mapping.id = mappings.size();
-    mapping.sourceFile = escapedSourceFile;
+    mapping.sourceFile = sourceFile;
     mapping.originalPosition = new Position(node.getLineno(), node.getCharno());
 
     String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);
     if (originalName != null) {
-      mapping.originalName = escapeString(originalName);
+      mapping.originalName = originalName;
     }
 
-    // If the mapping is found on the first line, we need to offset
-    // its character position by the number of characters found on
-    // the *last* line of the source file to which the code is
-    // being generated.
-    int offsetLine = offsetPosition.getLineNumber();
-    int startOffsetPosition = offsetPosition.getCharacterIndex();
-    int endOffsetPosition = offsetPosition.getCharacterIndex();
-
-    if (startPosition.getLineNumber() > 0) {
-      startOffsetPosition = 0;
-    }
+    if (offsetPosition.getLineNumber() == 0
+        && offsetPosition.getCharacterIndex() == 0) {
+      mapping.startPosition = startPosition;
+      mapping.endPosition = endPosition;
+    } else {
+      // If the mapping is found on the first line, we need to offset
+      // its character position by the number of characters found on
+      // the *last* line of the source file to which the code is
+      // being generated.
+      int offsetLine = offsetPosition.getLineNumber();
+      int startOffsetPosition = offsetPosition.getCharacterIndex();
+      int endOffsetPosition = offsetPosition.getCharacterIndex();
+
+      if (startPosition.getLineNumber() > 0) {
+        startOffsetPosition = 0;
+      }
 
-    if (endPosition.getLineNumber() > 0) {
-      endOffsetPosition = 0;
-    }
+      if (endPosition.getLineNumber() > 0) {
+        endOffsetPosition = 0;
+      }
 
-    mapping.startPosition =
-        new Position(startPosition.getLineNumber() + offsetLine,
-                     startPosition.getCharacterIndex() + startOffsetPosition);
+      mapping.startPosition =
+          new Position(startPosition.getLineNumber() + offsetLine,
+                       startPosition.getCharacterIndex() + startOffsetPosition);
 
-    mapping.endPosition =
-        new Position(endPosition.getLineNumber() + offsetLine,
-                     endPosition.getCharacterIndex() + endOffsetPosition);
+      mapping.endPosition =
+          new Position(endPosition.getLineNumber() + offsetLine,
+                       endPosition.getCharacterIndex() + endOffsetPosition);
+    }
 
     mappings.add(mapping);
   }
@@ -245,19 +281,6 @@ public class SourceMap {
     prefixPosition = new Position(0, 0);
   }
 
-  /**
-   * Scan the mappings and return the last line mapped.
-   */
-  private int findLastLine() {
-    int maxLine = 0;
-    for (Mapping mapping : mappings) {
-      int endPositionLine = mapping.endPosition.getLineNumber();
-      maxLine = Math.max(maxLine, endPositionLine);
-    }
-    // Adjust for the prefix.
-    return maxLine + prefixPosition.getLineNumber();
-  }
-
   /**
    * Appends the source map in LavaBug format to the given buffer.
    *
@@ -297,7 +320,7 @@ public class SourceMap {
     // 11) ["c.js", 1, 4]
     // 12) ["d.js", 3, 78, "foo"]
 
-    int maxLine = findLastLine();
+    int maxLine = prepMappings();
 
     // Add the line character maps.
     out.append("/** Begin line maps. **/{ \"file\" : ");
@@ -319,32 +342,75 @@ public class SourceMap {
     // Add the mappings themselves.
     out.append("/** Begin mapping definitions. **/\n");
 
-    for (Mapping mapping : mappings) {
-      mapping.appendTo(out);
-      out.append("\n");
-    }
+    (new MappingWriter()).appendMappings(out);
   }
 
   /**
-   * A class to build the line/character to mappings section
-   * of the source map.
+   * Assigns sequential ids to used mappings, and returns the last line mapped.
    */
-  private class LineMapper {
+  private int prepMappings() throws IOException {
+    // Mark any unused mappings.
+    (new MappingTraversal()).traverse(new UsedMappingCheck());
+
+    // Renumber used mappings and keep track of the last line.
+    int id = 0;
+    int maxLine = 0;
+    for (Mapping m : mappings) {
+      if (m.used) {
+        m.id = id++;
+        int endPositionLine = m.endPosition.getLineNumber();
+        maxLine = Math.max(maxLine, endPositionLine);
+      }
+    }
+
+    // Adjust for the prefix.
+    return maxLine + prefixPosition.getLineNumber();
+  }
+
+  private class LineMapper implements MappingVisitor {
     // The destination.
     private final Appendable out;
-    // The last line and column written
-    private int line;
-    private int col;
+
     // Whether the current line has had a value written yet.
     private boolean firstChar = true;
 
-    private final static int UNMAPPED = -1;
     private final static String UNMAPPED_STRING = "-1";
 
+    private int lastId = UNMAPPED;
+    private String lastIdString = UNMAPPED_STRING;
+
     LineMapper(Appendable out) {
       this.out = out;
     }
 
+    /**
+     * As each segment is visited write out the appropriate line mapping.
+     */
+    public void visit(Mapping m, int line, int col, int nextLine, int nextCol)
+      throws IOException {
+
+      int id = (m != null) ? m.id : UNMAPPED;
+      if (lastId != id) {
+        // Prevent the creation of unnecessary temporary stings for often
+        // repeated values.
+        lastIdString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);
+        lastId = id;
+      }
+      String idString = lastIdString;
+
+      for (int i = line; i <= nextLine; i++) {
+        if (i == nextLine) {
+          for (int j = col; j < nextCol; j++) {
+            addCharEntry(idString);
+          }
+          break;
+        }
+
+        closeLine();
+        openLine();
+      }
+    }
+
     // Append the line mapping entries.
     void appendLineMappings() throws IOException {
       Preconditions.checkState(!mappings.isEmpty());
@@ -352,6 +418,93 @@ public class SourceMap {
       // Start the first line.
       openLine();
 
+      (new MappingTraversal()).traverse(this);
+
+      // And close the final line.
+      closeLine();
+    }
+
+    /**
+     * Begin the entry for a new line.
+     */
+    private void openLine() throws IOException {
+      if (out != null) {
+        out.append("[");
+        this.firstChar = true;
+      }
+    }
+
+    /**
+     * End the entry for a line.
+     */
+    private void closeLine() throws IOException {
+      if (out != null) {
+        out.append("]\n");
+      }
+    }
+
+    /**
+     * Add a new char position entry.
+     * @param id The mapping id to record.
+     */
+    private void addCharEntry(String id) throws IOException {
+      if (out != null) {
+        if (firstChar) {
+          firstChar = false;
+        } else {
+          out.append(",");
+        }
+        out.append(id);
+      }
+    }
+  }
+
+  /**
+   * Mark any visited mapping as "used".
+   */
+  private class UsedMappingCheck implements MappingVisitor {
+    /**
+     * @throws IOException
+     */
+    @Override
+    public void visit(Mapping m, int line, int col, int nextLine, int nextCol)
+        throws IOException {
+      if (m != null) {
+        m.used = true;
+      }
+    }
+  }
+
+  private interface MappingVisitor {
+    /**
+     * @param m The mapping for the current code segment. null if the segment
+     *     is unmapped.
+     * @param line The starting line for this code segment.
+     * @param col The starting column for this code segment.
+     * @param endLine The ending line
+     * @param endCol The ending column
+     * @throws IOException
+     */
+    void visit(Mapping m, int line, int col, int endLine, int endCol)
+        throws IOException;
+  }
+
+  /**
+   * Walk the mappings and visit each segment of the mappings, unmapped
+   * segments are visited with a null mapping, unused mapping are not visited.
+   */
+  private class MappingTraversal {
+    // The last line and column written
+    private int line;
+    private int col;
+
+    MappingTraversal() {
+    }
+
+    // Append the line mapping entries.
+    void traverse(MappingVisitor v) throws IOException {
+      Preconditions.checkState(!mappings.isEmpty());
+
       // The mapping list is ordered as a pre-order traversal.  The mapping
       // positions give us enough information to rebuild the stack and this
       // allows the building of the source map in O(n) time.
@@ -363,13 +516,13 @@ public class SourceMap {
         // closed in the reverse order of when they encountered.
         while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) {
           Mapping previous = stack.pop();
-          writeClosedMapping(previous);
+          maybeVisit(v, previous);
         }
 
         // Any gaps between the current line position and the start of the
         // current mapping belong to the parent.
         Mapping parent = stack.peek();
-        writeCharsBetween(parent, m);
+        maybeVisitParent(v, parent, m);
 
         stack.push(m);
       }
@@ -378,39 +531,8 @@ public class SourceMap {
       // mappings in the reverse order of when they encountered.
       while (!stack.isEmpty()) {
         Mapping m = stack.pop();
-        writeClosedMapping(m);
+        maybeVisit(v, m);
       }
-
-      // And close the final line.
-      closeLine();
-    }
-
-    /**
-     * Begin the entry for a new line.
-     */
-    private void openLine() throws IOException {
-      out.append("[");
-      this.firstChar = true;
-    }
-
-    /**
-     * End the entry for a line.
-     */
-    private void closeLine() throws IOException {
-      out.append("]\n");
-    }
-
-    /**
-     * Add a new char position entry.
-     * @param id The mapping id to record.
-     */
-    private void addCharEntry(String id) throws IOException {
-      if (firstChar) {
-        firstChar = false;
-      } else {
-        out.append(",");
-      }
-      out.append(id);
     }
 
     /**
@@ -448,56 +570,47 @@ public class SourceMap {
      * Write any needed entries from the current position to the end of the
      * provided mapping.
      */
-    private void writeClosedMapping(Mapping m) throws IOException {
+    private void maybeVisit(MappingVisitor v, Mapping m) throws IOException {
       int nextLine = getAdjustedLine(m.endPosition);
       int nextCol = getAdjustedCol(m.endPosition);
       // If this anything remaining in this mapping beyond the
       // current line and column position, write it out now.
       if (line < nextLine || (line == nextLine && col < nextCol)) {
-        writeCharsUpTo(nextLine, nextCol, m.id);
+        visit(v, m, nextLine, nextCol);
       }
     }
 
     /**
      * Write any needed entries to complete the provided mapping.
      */
-    private void writeCharsBetween(Mapping prev, Mapping next)
+    private void maybeVisitParent(MappingVisitor v, Mapping parent, Mapping m)
         throws IOException {
-      int nextLine = getAdjustedLine(next.startPosition);
-      int nextCol = getAdjustedCol(next.startPosition);
-      // If the previous value is null, no mapping exists use the special
-      // "unmapped value"(-1).
-      int id = (prev != null) ? prev.id : UNMAPPED;
-      writeCharsUpTo(nextLine, nextCol, id);
+      int nextLine = getAdjustedLine(m.startPosition);
+      int nextCol = getAdjustedCol(m.startPosition);
+      // If the previous value is null, no mapping exists.
+      Preconditions.checkState(line < nextLine || col <= nextCol);
+      if (line < nextLine || (line == nextLine && col < nextCol)) {
+        visit(v, parent, nextLine, nextCol);
+      }
     }
 
     /**
      * Write any entries needed between the current position the next position
      * and update the current position.
      */
-    private void writeCharsUpTo(
-        int nextLine, int nextCol, int id)
+    private void visit(MappingVisitor v, Mapping m,
+        int nextLine, int nextCol)
         throws IOException {
-      Preconditions.checkState(line <= nextLine, "");
-      Preconditions.checkState(line < nextLine || col <= nextCol);
+      Preconditions.checkState(line <= nextLine);
+      Preconditions.checkState(line < nextLine || col < nextCol);
 
       if (line == nextLine && col == nextCol) {
         // Nothing to do.
+        Preconditions.checkState(false);
         return;
       }
 
-      String idString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);
-      for (int i = line; i <= nextLine; i++) {
-        if (i == nextLine) {
-          for (int j = col; j < nextCol; j++) {
-            addCharEntry(idString);
-          }
-          break;
-        }
-
-        closeLine();
-        openLine();
-      }
+      v.visit(m, line, col, nextLine, nextCol);
 
       line = nextLine;
       col = nextCol;
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index 2123088f..57e68f93 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -549,6 +549,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("x = typeof false", "x = \"boolean\"");
     fold("x = typeof null", "x = \"object\"");
     fold("x = typeof undefined", "x = \"undefined\"");
+    fold("x = typeof void 0", "x = \"undefined\"");
     fold("x = typeof []", "x = \"object\"");
     fold("x = typeof [1]", "x = \"object\"");
     fold("x = typeof [1,[]]", "x = \"object\"");
diff --git a/test/com/google/javascript/jscomp/SourceMapTest.java b/test/com/google/javascript/jscomp/SourceMapTest.java
index 92c216b4..0f6815ea 100644
--- a/test/com/google/javascript/jscomp/SourceMapTest.java
+++ b/test/com/google/javascript/jscomp/SourceMapTest.java
@@ -75,7 +75,7 @@ public class SourceMapTest extends TestCase {
     // Empty source map test
     checkSourceMap("",
 
-                   "/** Begin line maps. **/{ \"file\" : \"testMap\"," +
+                   "/** Begin line maps. **/{ \"file\" : \"testcode\"," +
                    " \"count\": 1 }\n" +
 
                    "[]\n" +
@@ -83,24 +83,22 @@ public class SourceMapTest extends TestCase {
                    "/** Begin file information. **/\n" +
                    "[]\n" +
 
-                   "/** Begin mapping definitions. **/\n" +
-                   "[\"testcode\",1,0]\n");
+                   "/** Begin mapping definitions. **/\n");
   }
 
   public void testGoldenOutput1() throws Exception {
     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",
 
-                   "/** Begin line maps. **/{ \"file\" : \"testMap\", " +
+                   "/** Begin line maps. **/{ \"file\" : \"testcode\", " +
                    "\"count\": 1 }\n" +
 
-                   "[1,1,1,1,1,1,1,1,2,2,3,4,4,4,3,5,5,5,3,6,8,8,8,7,9,9,9,7," +
-                   "10,10,10,7,11,12,12,12,12,12,12,12,13,13,13,13,6]\n" +
+                   "[0,0,0,0,0,0,0,0,1,1,2,3,3,3,2,4,4,4,2,5,7,7,7,6,8,8,8,6," +
+                   "9,9,9,6,10,11,11,11,11,11,11,11,12,12,12,12,5]\n" +
 
                    "/** Begin file information. **/\n" +
                    "[]\n" +
 
                    "/** Begin mapping definitions. **/\n" +
-                   "[\"testcode\",1,0]\n" +
                    "[\"testcode\",1,9]\n" +
                    "[\"testcode\",1,9,\"f\"]\n" +
                    "[\"testcode\",1,10]\n" +
@@ -120,17 +118,16 @@ public class SourceMapTest extends TestCase {
     checkSourceMap("function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;" +
                    "\nreturn foo;\n}",
 
-                   "/** Begin line maps. **/{ \"file\" : \"testMap\", " +
+                   "/** Begin line maps. **/{ \"file\" : \"testcode\", " +
                    "\"count\": 1 }\n" +
 
-                   "[1,1,1,1,1,1,1,1,2,2,3,4,4,4,3,5,5,5,3,6,8,8,8,7,9,9,9," +
-                   "7,10,10,10,7,11,11,11,12,12,12,12,12,12,12,13,13,13," +
-                   "13,6]\n" +
+                   "[0,0,0,0,0,0,0,0,1,1,2,3,3,3,2,4,4,4,2,5,7,7,7,6,8,8,8," +
+                   "6,9,9,9,6,10,10,10,11,11,11,11,11,11,11,12,12,12," +
+                   "12,5]\n" +
 
                    "/** Begin file information. **/\n" +
                    "[]\n" +
                    "/** Begin mapping definitions. **/\n" +
-                   "[\"testcode\",1,0]\n" +
                    "[\"testcode\",1,9]\n" +
                    "[\"testcode\",1,9,\"f\"]\n" +
                    "[\"testcode\",1,10]\n" +
@@ -150,16 +147,14 @@ public class SourceMapTest extends TestCase {
     checkSourceMap("c:\\myfile.js",
                    "foo;",
 
-                   "/** Begin line maps. **/{ \"file\" : \"testMap\", " +
+                   "/** Begin line maps. **/{ \"file\" : \"testcode\", " +
                    "\"count\": 1 }\n" +
 
-                   "[2,2,2]\n" +
+                   "[0,0,0]\n" +
 
                    "/** Begin file information. **/\n" +
                    "[]\n" +
                    "/** Begin mapping definitions. **/\n" +
-                   "[\"c:\\\\myfile.js\",1,0]\n" +
-                   "[\"c:\\\\myfile.js\",1,0]\n" +
                    "[\"c:\\\\myfile.js\",1,0,\"foo\"]\n");
   }
 
@@ -168,19 +163,15 @@ public class SourceMapTest extends TestCase {
                    "foo;   boo;   goo;",
 
                    "/** Begin line maps. **/" +
-                   "{ \"file\" : \"testMap\", \"count\": 1 }\n" +
-                   "[2,2,2,4,4,4,4,6,6,6,6]\n" +
+                   "{ \"file\" : \"testcode\", \"count\": 1 }\n" +
+                   "[0,0,0,1,1,1,1,2,2,2,2]\n" +
 
                    "/** Begin file information. **/\n" +
                    "[]\n" +
 
                    "/** Begin mapping definitions. **/\n" +
-                   "[\"c:\\\\myfile.js\",1,0]\n" +
-                   "[\"c:\\\\myfile.js\",1,0]\n" +
                    "[\"c:\\\\myfile.js\",1,0,\"foo\"]\n" +
-                   "[\"c:\\\\myfile.js\",1,7]\n" +
                    "[\"c:\\\\myfile.js\",1,7,\"boo\"]\n" +
-                   "[\"c:\\\\myfile.js\",1,14]\n" +
                    "[\"c:\\\\myfile.js\",1,14,\"goo\"]\n");
   }
 
@@ -212,14 +203,15 @@ public class SourceMapTest extends TestCase {
 
   private String getSourceMap(RunResult result) throws IOException {
     StringBuilder sb = new StringBuilder();
-    result.sourceMap.appendTo(sb, "testMap");
+    result.sourceMap.appendTo(sb, "testcode");
     return sb.toString();
   }
 
   private void checkSourceMap(String fileName, String js, String expectedMap)
       throws IOException {
     RunResult result = compile(js, fileName);
-    assertEquals(expectedMap, getSourceMap(result));
+    assertEquals(expectedMap, result.sourceMapFileContent);
+    assertEquals(result.sourceMapFileContent, getSourceMap(result));
   }
 
   private static class RunResult {
