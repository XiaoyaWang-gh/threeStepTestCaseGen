diff --git a/gen/com/google/javascript/jscomp/FunctionInfo.java b/gen/com/google/javascript/jscomp/FunctionInfo.java
index 2e72993a..9bfacff6 100644
--- a/gen/com/google/javascript/jscomp/FunctionInfo.java
+++ b/gen/com/google/javascript/jscomp/FunctionInfo.java
@@ -83,7 +83,5 @@ public final class FunctionInfo {
         }, assigner);
   }
   
-  public static void internalForceInit() {}
-  
   // @@protoc_insertion_point(outer_class_scope)
 }
diff --git a/gen/com/google/javascript/jscomp/FunctionInformationMap.java b/gen/com/google/javascript/jscomp/FunctionInformationMap.java
index 7f4b1f62..adf5db81 100644
--- a/gen/com/google/javascript/jscomp/FunctionInformationMap.java
+++ b/gen/com/google/javascript/jscomp/FunctionInformationMap.java
@@ -143,13 +143,13 @@ public  final class FunctionInformationMap extends
       compiledSource_ = "";
     }
     public final boolean isInitialized() {
-      if (!hasId) return false;
-      if (!hasSourceName) return false;
-      if (!hasLineNumber) return false;
-      if (!hasModuleName) return false;
-      if (!hasSize) return false;
-      if (!hasName) return false;
-      if (!hasCompiledSource) return false;
+      if (!hasId()) return false;
+      if (!hasSourceName()) return false;
+      if (!hasLineNumber()) return false;
+      if (!hasModuleName()) return false;
+      if (!hasSize()) return false;
+      if (!hasName()) return false;
+      if (!hasCompiledSource()) return false;
       return true;
     }
     
@@ -298,6 +298,12 @@ public  final class FunctionInformationMap extends
     }
     public Builder toBuilder() { return newBuilder(this); }
     
+    @java.lang.Override
+    protected Builder newBuilderForType(
+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
+      Builder builder = new Builder(parent);
+      return builder;
+    }
     public static final class Builder extends
         com.google.protobuf.GeneratedMessage.Builder<Builder> {
       public static final com.google.protobuf.Descriptors.Descriptor
@@ -312,8 +318,17 @@ public  final class FunctionInformationMap extends
       
       // Construct using com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder()
       private Builder() {
+        maybeForceBuilderInitialization();
       }
       
+      private Builder(BuilderParent parent) {
+        super(parent);
+        maybeForceBuilderInitialization();
+      }
+      private void maybeForceBuilderInitialization() {
+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
+        }
+      }
       private static Builder create() {
         return new Builder();
       }
@@ -384,6 +399,7 @@ public  final class FunctionInformationMap extends
         result.name_ = name_;
         result.hasCompiledSource = hasCompiledSource;
         result.compiledSource_ = compiledSource_;
+        onBuilt();
         return result;
       }
       
@@ -424,13 +440,13 @@ public  final class FunctionInformationMap extends
       }
       
       public final boolean isInitialized() {
-        if (!hasId) return false;
-        if (!hasSourceName) return false;
-        if (!hasLineNumber) return false;
-        if (!hasModuleName) return false;
-        if (!hasSize) return false;
-        if (!hasName) return false;
-        if (!hasCompiledSource) return false;
+        if (!hasId()) return false;
+        if (!hasSourceName()) return false;
+        if (!hasLineNumber()) return false;
+        if (!hasModuleName()) return false;
+        if (!hasSize()) return false;
+        if (!hasName()) return false;
+        if (!hasCompiledSource()) return false;
         return true;
       }
       
@@ -500,11 +516,13 @@ public  final class FunctionInformationMap extends
       public Builder setId(int value) {
         hasId = true;
         id_ = value;
+        onChanged();
         return this;
       }
       public Builder clearId() {
         hasId = false;
         id_ = 0;
+        onChanged();
         return this;
       }
       
@@ -523,11 +541,13 @@ public  final class FunctionInformationMap extends
   }
   hasSourceName = true;
         sourceName_ = value;
+        onChanged();
         return this;
       }
       public Builder clearSourceName() {
         hasSourceName = false;
         sourceName_ = getDefaultInstance().getSourceName();
+        onChanged();
         return this;
       }
       
@@ -543,11 +563,13 @@ public  final class FunctionInformationMap extends
       public Builder setLineNumber(int value) {
         hasLineNumber = true;
         lineNumber_ = value;
+        onChanged();
         return this;
       }
       public Builder clearLineNumber() {
         hasLineNumber = false;
         lineNumber_ = 0;
+        onChanged();
         return this;
       }
       
@@ -566,11 +588,13 @@ public  final class FunctionInformationMap extends
   }
   hasModuleName = true;
         moduleName_ = value;
+        onChanged();
         return this;
       }
       public Builder clearModuleName() {
         hasModuleName = false;
         moduleName_ = getDefaultInstance().getModuleName();
+        onChanged();
         return this;
       }
       
@@ -586,11 +610,13 @@ public  final class FunctionInformationMap extends
       public Builder setSize(int value) {
         hasSize = true;
         size_ = value;
+        onChanged();
         return this;
       }
       public Builder clearSize() {
         hasSize = false;
         size_ = 0;
+        onChanged();
         return this;
       }
       
@@ -609,11 +635,13 @@ public  final class FunctionInformationMap extends
   }
   hasName = true;
         name_ = value;
+        onChanged();
         return this;
       }
       public Builder clearName() {
         hasName = false;
         name_ = getDefaultInstance().getName();
+        onChanged();
         return this;
       }
       
@@ -632,11 +660,13 @@ public  final class FunctionInformationMap extends
   }
   hasCompiledSource = true;
         compiledSource_ = value;
+        onChanged();
         return this;
       }
       public Builder clearCompiledSource() {
         hasCompiledSource = false;
         compiledSource_ = getDefaultInstance().getCompiledSource();
+        onChanged();
         return this;
       }
       
@@ -645,7 +675,6 @@ public  final class FunctionInformationMap extends
     
     static {
       defaultInstance = new Entry(true);
-      com.google.javascript.jscomp.FunctionInfo.internalForceInit();
       defaultInstance.initFields();
     }
     
@@ -706,8 +735,8 @@ public  final class FunctionInformationMap extends
       compiledSource_ = "";
     }
     public final boolean isInitialized() {
-      if (!hasName) return false;
-      if (!hasCompiledSource) return false;
+      if (!hasName()) return false;
+      if (!hasCompiledSource()) return false;
       return true;
     }
     
@@ -821,6 +850,12 @@ public  final class FunctionInformationMap extends
     }
     public Builder toBuilder() { return newBuilder(this); }
     
+    @java.lang.Override
+    protected Builder newBuilderForType(
+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
+      Builder builder = new Builder(parent);
+      return builder;
+    }
     public static final class Builder extends
         com.google.protobuf.GeneratedMessage.Builder<Builder> {
       public static final com.google.protobuf.Descriptors.Descriptor
@@ -835,8 +870,17 @@ public  final class FunctionInformationMap extends
       
       // Construct using com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder()
       private Builder() {
+        maybeForceBuilderInitialization();
       }
       
+      private Builder(BuilderParent parent) {
+        super(parent);
+        maybeForceBuilderInitialization();
+      }
+      private void maybeForceBuilderInitialization() {
+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
+        }
+      }
       private static Builder create() {
         return new Builder();
       }
@@ -887,6 +931,7 @@ public  final class FunctionInformationMap extends
         result.name_ = name_;
         result.hasCompiledSource = hasCompiledSource;
         result.compiledSource_ = compiledSource_;
+        onBuilt();
         return result;
       }
       
@@ -912,8 +957,8 @@ public  final class FunctionInformationMap extends
       }
       
       public final boolean isInitialized() {
-        if (!hasName) return false;
-        if (!hasCompiledSource) return false;
+        if (!hasName()) return false;
+        if (!hasCompiledSource()) return false;
         return true;
       }
       
@@ -966,11 +1011,13 @@ public  final class FunctionInformationMap extends
   }
   hasName = true;
         name_ = value;
+        onChanged();
         return this;
       }
       public Builder clearName() {
         hasName = false;
         name_ = getDefaultInstance().getName();
+        onChanged();
         return this;
       }
       
@@ -989,11 +1036,13 @@ public  final class FunctionInformationMap extends
   }
   hasCompiledSource = true;
         compiledSource_ = value;
+        onChanged();
         return this;
       }
       public Builder clearCompiledSource() {
         hasCompiledSource = false;
         compiledSource_ = getDefaultInstance().getCompiledSource();
+        onChanged();
         return this;
       }
       
@@ -1002,7 +1051,6 @@ public  final class FunctionInformationMap extends
     
     static {
       defaultInstance = new Module(true);
-      com.google.javascript.jscomp.FunctionInfo.internalForceInit();
       defaultInstance.initFields();
     }
     
@@ -1159,6 +1207,12 @@ public  final class FunctionInformationMap extends
   }
   public Builder toBuilder() { return newBuilder(this); }
   
+  @java.lang.Override
+  protected Builder newBuilderForType(
+      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
+    Builder builder = new Builder(parent);
+    return builder;
+  }
   public static final class Builder extends
       com.google.protobuf.GeneratedMessage.Builder<Builder> {
     public static final com.google.protobuf.Descriptors.Descriptor
@@ -1173,18 +1227,37 @@ public  final class FunctionInformationMap extends
     
     // Construct using com.google.javascript.jscomp.FunctionInformationMap.newBuilder()
     private Builder() {
+      maybeForceBuilderInitialization();
     }
     
+    private Builder(BuilderParent parent) {
+      super(parent);
+      maybeForceBuilderInitialization();
+    }
+    private void maybeForceBuilderInitialization() {
+      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
+        getEntryFieldBuilder();
+        getModuleFieldBuilder();
+      }
+    }
     private static Builder create() {
       return new Builder();
     }
     
     public Builder clear() {
       super.clear();
-      entry_ = java.util.Collections.emptyList();
-      isEntryMutable = false;
-      module_ = java.util.Collections.emptyList();
-      isModuleMutable = false;
+      if (entryBuilder_ == null) {
+        entry_ = java.util.Collections.emptyList();
+        isEntryMutable = false;
+      } else {
+        entryBuilder_.clear();
+      }
+      if (moduleBuilder_ == null) {
+        module_ = java.util.Collections.emptyList();
+        isModuleMutable = false;
+      } else {
+        moduleBuilder_.clear();
+      }
       return this;
     }
     
@@ -1221,16 +1294,25 @@ public  final class FunctionInformationMap extends
     
     public com.google.javascript.jscomp.FunctionInformationMap buildPartial() {
       com.google.javascript.jscomp.FunctionInformationMap result = new com.google.javascript.jscomp.FunctionInformationMap(this);
-      if (isEntryMutable) {
-        entry_ = java.util.Collections.unmodifiableList(entry_);
-        isEntryMutable = false;
+      if (entryBuilder_ == null) {
+        if (isEntryMutable) {
+          entry_ = java.util.Collections.unmodifiableList(entry_);
+          isEntryMutable = false;
+        }
+        result.entry_ = entry_;
+      } else {
+        result.entry_ = entryBuilder_.build();
       }
-      result.entry_ = entry_;
-      if (isModuleMutable) {
-        module_ = java.util.Collections.unmodifiableList(module_);
-        isModuleMutable = false;
+      if (moduleBuilder_ == null) {
+        if (isModuleMutable) {
+          module_ = java.util.Collections.unmodifiableList(module_);
+          isModuleMutable = false;
+        }
+        result.module_ = module_;
+      } else {
+        result.module_ = moduleBuilder_.build();
       }
-      result.module_ = module_;
+      onBuilt();
       return result;
     }
     
@@ -1245,22 +1327,56 @@ public  final class FunctionInformationMap extends
     
     public Builder mergeFrom(com.google.javascript.jscomp.FunctionInformationMap other) {
       if (other == com.google.javascript.jscomp.FunctionInformationMap.getDefaultInstance()) return this;
-      if (!other.entry_.isEmpty()) {
-        if (entry_.isEmpty()) {
-          entry_ = other.entry_;
-          isEntryMutable = false;
-        } else {
-          ensureEntryIsMutable();
-          entry_.addAll(other.entry_);
+      if (entryBuilder_ == null) {
+        if (!other.entry_.isEmpty()) {
+          if (entry_.isEmpty()) {
+            entry_ = other.entry_;
+            isEntryMutable = false;
+          } else {
+            ensureEntryIsMutable();
+            entry_.addAll(other.entry_);
+          }
+          onChanged();
+        }
+      } else {
+        if (!other.entry_.isEmpty()) {
+          if (entryBuilder_.isEmpty()) {
+            entryBuilder_.dispose();
+            entryBuilder_ = null;
+            entry_ = other.entry_;
+            isEntryMutable = false;
+            entryBuilder_ = 
+              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
+                 getEntryFieldBuilder() : null;
+          } else {
+            entryBuilder_.addAllMessages(other.entry_);
+          }
         }
       }
-      if (!other.module_.isEmpty()) {
-        if (module_.isEmpty()) {
-          module_ = other.module_;
-          isModuleMutable = false;
-        } else {
-          ensureModuleIsMutable();
-          module_.addAll(other.module_);
+      if (moduleBuilder_ == null) {
+        if (!other.module_.isEmpty()) {
+          if (module_.isEmpty()) {
+            module_ = other.module_;
+            isModuleMutable = false;
+          } else {
+            ensureModuleIsMutable();
+            module_.addAll(other.module_);
+          }
+          onChanged();
+        }
+      } else {
+        if (!other.module_.isEmpty()) {
+          if (moduleBuilder_.isEmpty()) {
+            moduleBuilder_.dispose();
+            moduleBuilder_ = null;
+            module_ = other.module_;
+            isModuleMutable = false;
+            moduleBuilder_ = 
+              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
+                 getModuleFieldBuilder() : null;
+          } else {
+            moduleBuilder_.addAllMessages(other.module_);
+          }
         }
       }
       this.mergeUnknownFields(other.getUnknownFields());
@@ -1325,55 +1441,166 @@ public  final class FunctionInformationMap extends
         isEntryMutable = true;
        }
     }
+    
+    private com.google.protobuf.RepeatedFieldBuilder<
+        com.google.javascript.jscomp.FunctionInformationMap.Entry, com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder> entryBuilder_;
+    
     public java.util.List<com.google.javascript.jscomp.FunctionInformationMap.Entry> getEntryList() {
-      return java.util.Collections.unmodifiableList(entry_);
+      if (entryBuilder_ == null) {
+        return java.util.Collections.unmodifiableList(entry_);
+      } else {
+        return entryBuilder_.getMessageList();
+      }
     }
     public int getEntryCount() {
-      return entry_.size();
+      if (entryBuilder_ == null) {
+        return entry_.size();
+      } else {
+        return entryBuilder_.getCount();
+      }
     }
     public com.google.javascript.jscomp.FunctionInformationMap.Entry getEntry(int index) {
-      return entry_.get(index);
+      if (entryBuilder_ == null) {
+        return entry_.get(index);
+      } else {
+        return entryBuilder_.getMessage(index);
+      }
     }
     public Builder setEntry(
         int index, com.google.javascript.jscomp.FunctionInformationMap.Entry value) {
-      if (value == null) {
-        throw new NullPointerException();
+      if (entryBuilder_ == null) {
+        if (value == null) {
+          throw new NullPointerException();
+        }
+        ensureEntryIsMutable();
+        entry_.set(index, value);
+        onChanged();
+      } else {
+        entryBuilder_.setMessage(index, value);
       }
-      ensureEntryIsMutable();
-      entry_.set(index, value);
       return this;
     }
     public Builder setEntry(
         int index, com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builderForValue) {
-      ensureEntryIsMutable();
-      entry_.set(index, builderForValue.build());
+      if (entryBuilder_ == null) {
+        ensureEntryIsMutable();
+        entry_.set(index, builderForValue.build());
+        onChanged();
+      } else {
+        entryBuilder_.setMessage(index, builderForValue.build());
+      }
       return this;
     }
     public Builder addEntry(com.google.javascript.jscomp.FunctionInformationMap.Entry value) {
-      if (value == null) {
-        throw new NullPointerException();
+      if (entryBuilder_ == null) {
+        if (value == null) {
+          throw new NullPointerException();
+        }
+        ensureEntryIsMutable();
+        entry_.add(value);
+        onChanged();
+      } else {
+        entryBuilder_.addMessage(value);
+      }
+      return this;
+    }
+    public Builder addEntry(
+        int index, com.google.javascript.jscomp.FunctionInformationMap.Entry value) {
+      if (entryBuilder_ == null) {
+        if (value == null) {
+          throw new NullPointerException();
+        }
+        ensureEntryIsMutable();
+        entry_.add(index, value);
+        onChanged();
+      } else {
+        entryBuilder_.addMessage(index, value);
       }
-      ensureEntryIsMutable();
-      entry_.add(value);
       return this;
     }
     public Builder addEntry(
         com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builderForValue) {
-      ensureEntryIsMutable();
-      entry_.add(builderForValue.build());
+      if (entryBuilder_ == null) {
+        ensureEntryIsMutable();
+        entry_.add(builderForValue.build());
+        onChanged();
+      } else {
+        entryBuilder_.addMessage(builderForValue.build());
+      }
+      return this;
+    }
+    public Builder addEntry(
+        int index, com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builderForValue) {
+      if (entryBuilder_ == null) {
+        ensureEntryIsMutable();
+        entry_.add(index, builderForValue.build());
+        onChanged();
+      } else {
+        entryBuilder_.addMessage(index, builderForValue.build());
+      }
       return this;
     }
     public Builder addAllEntry(
         java.lang.Iterable<? extends com.google.javascript.jscomp.FunctionInformationMap.Entry> values) {
-      ensureEntryIsMutable();
-      super.addAll(values, entry_);
+      if (entryBuilder_ == null) {
+        ensureEntryIsMutable();
+        super.addAll(values, entry_);
+        onChanged();
+      } else {
+        entryBuilder_.addAllMessages(values);
+      }
       return this;
     }
     public Builder clearEntry() {
-      entry_ = java.util.Collections.emptyList();
-      isEntryMutable = false;
+      if (entryBuilder_ == null) {
+        entry_ = java.util.Collections.emptyList();
+        isEntryMutable = false;
+        onChanged();
+      } else {
+        entryBuilder_.clear();
+      }
+      return this;
+    }
+    public Builder removeEntry(int index) {
+      if (entryBuilder_ == null) {
+        ensureEntryIsMutable();
+        entry_.remove(index);
+        onChanged();
+      } else {
+        entryBuilder_.remove(index);
+      }
       return this;
     }
+    public com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder getEntryBuilder(
+        int index) {
+      return getEntryFieldBuilder().getBuilder(index);
+    }
+    public com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder addEntryBuilder() {
+      return getEntryFieldBuilder().addBuilder(
+          com.google.javascript.jscomp.FunctionInformationMap.Entry.getDefaultInstance());
+    }
+    public com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder addEntryBuilder(
+        int index) {
+      return getEntryFieldBuilder().addBuilder(
+          index, com.google.javascript.jscomp.FunctionInformationMap.Entry.getDefaultInstance());
+    }
+    public java.util.List<com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder> 
+         getEntryBuilderList() {
+      return getEntryFieldBuilder().getBuilderList();
+    }
+    private com.google.protobuf.RepeatedFieldBuilder<
+        com.google.javascript.jscomp.FunctionInformationMap.Entry, com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder> getEntryFieldBuilder() {
+      if (entryBuilder_ == null) {
+        entryBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
+            com.google.javascript.jscomp.FunctionInformationMap.Entry, com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder>(
+                entry_,
+                isEntryMutable,
+                getParentForChildren(),
+                isClean());
+        entry_ = null;
+      }
+      return entryBuilder_;
+    }
     
     // repeated group Module = 101 {
     private java.util.List<com.google.javascript.jscomp.FunctionInformationMap.Module> module_ =
@@ -1385,62 +1612,172 @@ public  final class FunctionInformationMap extends
         isModuleMutable = true;
        }
     }
+    
+    private com.google.protobuf.RepeatedFieldBuilder<
+        com.google.javascript.jscomp.FunctionInformationMap.Module, com.google.javascript.jscomp.FunctionInformationMap.Module.Builder> moduleBuilder_;
+    
     public java.util.List<com.google.javascript.jscomp.FunctionInformationMap.Module> getModuleList() {
-      return java.util.Collections.unmodifiableList(module_);
+      if (moduleBuilder_ == null) {
+        return java.util.Collections.unmodifiableList(module_);
+      } else {
+        return moduleBuilder_.getMessageList();
+      }
     }
     public int getModuleCount() {
-      return module_.size();
+      if (moduleBuilder_ == null) {
+        return module_.size();
+      } else {
+        return moduleBuilder_.getCount();
+      }
     }
     public com.google.javascript.jscomp.FunctionInformationMap.Module getModule(int index) {
-      return module_.get(index);
+      if (moduleBuilder_ == null) {
+        return module_.get(index);
+      } else {
+        return moduleBuilder_.getMessage(index);
+      }
     }
     public Builder setModule(
         int index, com.google.javascript.jscomp.FunctionInformationMap.Module value) {
-      if (value == null) {
-        throw new NullPointerException();
+      if (moduleBuilder_ == null) {
+        if (value == null) {
+          throw new NullPointerException();
+        }
+        ensureModuleIsMutable();
+        module_.set(index, value);
+        onChanged();
+      } else {
+        moduleBuilder_.setMessage(index, value);
       }
-      ensureModuleIsMutable();
-      module_.set(index, value);
       return this;
     }
     public Builder setModule(
         int index, com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builderForValue) {
-      ensureModuleIsMutable();
-      module_.set(index, builderForValue.build());
+      if (moduleBuilder_ == null) {
+        ensureModuleIsMutable();
+        module_.set(index, builderForValue.build());
+        onChanged();
+      } else {
+        moduleBuilder_.setMessage(index, builderForValue.build());
+      }
       return this;
     }
     public Builder addModule(com.google.javascript.jscomp.FunctionInformationMap.Module value) {
-      if (value == null) {
-        throw new NullPointerException();
+      if (moduleBuilder_ == null) {
+        if (value == null) {
+          throw new NullPointerException();
+        }
+        ensureModuleIsMutable();
+        module_.add(value);
+        onChanged();
+      } else {
+        moduleBuilder_.addMessage(value);
+      }
+      return this;
+    }
+    public Builder addModule(
+        int index, com.google.javascript.jscomp.FunctionInformationMap.Module value) {
+      if (moduleBuilder_ == null) {
+        if (value == null) {
+          throw new NullPointerException();
+        }
+        ensureModuleIsMutable();
+        module_.add(index, value);
+        onChanged();
+      } else {
+        moduleBuilder_.addMessage(index, value);
       }
-      ensureModuleIsMutable();
-      module_.add(value);
       return this;
     }
     public Builder addModule(
         com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builderForValue) {
-      ensureModuleIsMutable();
-      module_.add(builderForValue.build());
+      if (moduleBuilder_ == null) {
+        ensureModuleIsMutable();
+        module_.add(builderForValue.build());
+        onChanged();
+      } else {
+        moduleBuilder_.addMessage(builderForValue.build());
+      }
+      return this;
+    }
+    public Builder addModule(
+        int index, com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builderForValue) {
+      if (moduleBuilder_ == null) {
+        ensureModuleIsMutable();
+        module_.add(index, builderForValue.build());
+        onChanged();
+      } else {
+        moduleBuilder_.addMessage(index, builderForValue.build());
+      }
       return this;
     }
     public Builder addAllModule(
         java.lang.Iterable<? extends com.google.javascript.jscomp.FunctionInformationMap.Module> values) {
-      ensureModuleIsMutable();
-      super.addAll(values, module_);
+      if (moduleBuilder_ == null) {
+        ensureModuleIsMutable();
+        super.addAll(values, module_);
+        onChanged();
+      } else {
+        moduleBuilder_.addAllMessages(values);
+      }
       return this;
     }
     public Builder clearModule() {
-      module_ = java.util.Collections.emptyList();
-      isModuleMutable = false;
+      if (moduleBuilder_ == null) {
+        module_ = java.util.Collections.emptyList();
+        isModuleMutable = false;
+        onChanged();
+      } else {
+        moduleBuilder_.clear();
+      }
+      return this;
+    }
+    public Builder removeModule(int index) {
+      if (moduleBuilder_ == null) {
+        ensureModuleIsMutable();
+        module_.remove(index);
+        onChanged();
+      } else {
+        moduleBuilder_.remove(index);
+      }
       return this;
     }
+    public com.google.javascript.jscomp.FunctionInformationMap.Module.Builder getModuleBuilder(
+        int index) {
+      return getModuleFieldBuilder().getBuilder(index);
+    }
+    public com.google.javascript.jscomp.FunctionInformationMap.Module.Builder addModuleBuilder() {
+      return getModuleFieldBuilder().addBuilder(
+          com.google.javascript.jscomp.FunctionInformationMap.Module.getDefaultInstance());
+    }
+    public com.google.javascript.jscomp.FunctionInformationMap.Module.Builder addModuleBuilder(
+        int index) {
+      return getModuleFieldBuilder().addBuilder(
+          index, com.google.javascript.jscomp.FunctionInformationMap.Module.getDefaultInstance());
+    }
+    public java.util.List<com.google.javascript.jscomp.FunctionInformationMap.Module.Builder> 
+         getModuleBuilderList() {
+      return getModuleFieldBuilder().getBuilderList();
+    }
+    private com.google.protobuf.RepeatedFieldBuilder<
+        com.google.javascript.jscomp.FunctionInformationMap.Module, com.google.javascript.jscomp.FunctionInformationMap.Module.Builder> getModuleFieldBuilder() {
+      if (moduleBuilder_ == null) {
+        moduleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
+            com.google.javascript.jscomp.FunctionInformationMap.Module, com.google.javascript.jscomp.FunctionInformationMap.Module.Builder>(
+                module_,
+                isModuleMutable,
+                getParentForChildren(),
+                isClean());
+        module_ = null;
+      }
+      return moduleBuilder_;
+    }
     
     // @@protoc_insertion_point(builder_scope:jscomp.FunctionInformationMap)
   }
   
   static {
     defaultInstance = new FunctionInformationMap(true);
-    com.google.javascript.jscomp.FunctionInfo.internalForceInit();
     defaultInstance.initFields();
   }
   
diff --git a/gen/com/google/javascript/jscomp/Instrumentation.java b/gen/com/google/javascript/jscomp/Instrumentation.java
index dc12135f..a86506e4 100644
--- a/gen/com/google/javascript/jscomp/Instrumentation.java
+++ b/gen/com/google/javascript/jscomp/Instrumentation.java
@@ -261,6 +261,12 @@ public  final class Instrumentation extends
   }
   public Builder toBuilder() { return newBuilder(this); }
   
+  @java.lang.Override
+  protected Builder newBuilderForType(
+      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
+    Builder builder = new Builder(parent);
+    return builder;
+  }
   public static final class Builder extends
       com.google.protobuf.GeneratedMessage.Builder<Builder> {
     public static final com.google.protobuf.Descriptors.Descriptor
@@ -275,8 +281,17 @@ public  final class Instrumentation extends
     
     // Construct using com.google.javascript.jscomp.Instrumentation.newBuilder()
     private Builder() {
+      maybeForceBuilderInitialization();
     }
     
+    private Builder(BuilderParent parent) {
+      super(parent);
+      maybeForceBuilderInitialization();
+    }
+    private void maybeForceBuilderInitialization() {
+      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
+      }
+    }
     private static Builder create() {
       return new Builder();
     }
@@ -349,6 +364,7 @@ public  final class Instrumentation extends
       result.init_ = init_;
       result.hasAppNameSetter = hasAppNameSetter;
       result.appNameSetter_ = appNameSetter_;
+      onBuilt();
       return result;
     }
     
@@ -380,6 +396,7 @@ public  final class Instrumentation extends
           ensureDeclarationToRemoveIsMutable();
           declarationToRemove_.addAll(other.declarationToRemove_);
         }
+        onChanged();
       }
       if (!other.init_.isEmpty()) {
         if (init_.isEmpty()) {
@@ -389,6 +406,7 @@ public  final class Instrumentation extends
           ensureInitIsMutable();
           init_.addAll(other.init_);
         }
+        onChanged();
       }
       if (other.hasAppNameSetter()) {
         setAppNameSetter(other.getAppNameSetter());
@@ -466,11 +484,13 @@ public  final class Instrumentation extends
   }
   hasReportDefined = true;
       reportDefined_ = value;
+      onChanged();
       return this;
     }
     public Builder clearReportDefined() {
       hasReportDefined = false;
       reportDefined_ = getDefaultInstance().getReportDefined();
+      onChanged();
       return this;
     }
     
@@ -489,11 +509,13 @@ public  final class Instrumentation extends
   }
   hasReportCall = true;
       reportCall_ = value;
+      onChanged();
       return this;
     }
     public Builder clearReportCall() {
       hasReportCall = false;
       reportCall_ = getDefaultInstance().getReportCall();
+      onChanged();
       return this;
     }
     
@@ -512,11 +534,13 @@ public  final class Instrumentation extends
   }
   hasReportExit = true;
       reportExit_ = value;
+      onChanged();
       return this;
     }
     public Builder clearReportExit() {
       hasReportExit = false;
       reportExit_ = getDefaultInstance().getReportExit();
+      onChanged();
       return this;
     }
     
@@ -547,6 +571,7 @@ public  final class Instrumentation extends
   }
   ensureDeclarationToRemoveIsMutable();
       declarationToRemove_.set(index, value);
+      onChanged();
       return this;
     }
     public Builder addDeclarationToRemove(java.lang.String value) {
@@ -555,17 +580,20 @@ public  final class Instrumentation extends
   }
   ensureDeclarationToRemoveIsMutable();
       declarationToRemove_.add(value);
+      onChanged();
       return this;
     }
     public Builder addAllDeclarationToRemove(
         java.lang.Iterable<? extends java.lang.String> values) {
       ensureDeclarationToRemoveIsMutable();
       super.addAll(values, declarationToRemove_);
+      onChanged();
       return this;
     }
     public Builder clearDeclarationToRemove() {
       declarationToRemove_ = java.util.Collections.emptyList();
       isDeclarationToRemoveMutable = false;
+      onChanged();
       return this;
     }
     
@@ -596,6 +624,7 @@ public  final class Instrumentation extends
   }
   ensureInitIsMutable();
       init_.set(index, value);
+      onChanged();
       return this;
     }
     public Builder addInit(java.lang.String value) {
@@ -604,17 +633,20 @@ public  final class Instrumentation extends
   }
   ensureInitIsMutable();
       init_.add(value);
+      onChanged();
       return this;
     }
     public Builder addAllInit(
         java.lang.Iterable<? extends java.lang.String> values) {
       ensureInitIsMutable();
       super.addAll(values, init_);
+      onChanged();
       return this;
     }
     public Builder clearInit() {
       init_ = java.util.Collections.emptyList();
       isInitMutable = false;
+      onChanged();
       return this;
     }
     
@@ -633,11 +665,13 @@ public  final class Instrumentation extends
   }
   hasAppNameSetter = true;
       appNameSetter_ = value;
+      onChanged();
       return this;
     }
     public Builder clearAppNameSetter() {
       hasAppNameSetter = false;
       appNameSetter_ = getDefaultInstance().getAppNameSetter();
+      onChanged();
       return this;
     }
     
@@ -646,7 +680,6 @@ public  final class Instrumentation extends
   
   static {
     defaultInstance = new Instrumentation(true);
-    com.google.javascript.jscomp.InstrumentationTemplate.internalForceInit();
     defaultInstance.initFields();
   }
   
diff --git a/gen/com/google/javascript/jscomp/InstrumentationTemplate.java b/gen/com/google/javascript/jscomp/InstrumentationTemplate.java
index 699f95c6..e84d1d73 100644
--- a/gen/com/google/javascript/jscomp/InstrumentationTemplate.java
+++ b/gen/com/google/javascript/jscomp/InstrumentationTemplate.java
@@ -53,7 +53,5 @@ public final class InstrumentationTemplate {
         }, assigner);
   }
   
-  public static void internalForceInit() {}
-  
   // @@protoc_insertion_point(outer_class_scope)
 }
diff --git a/lib/google_common_deploy.jar b/lib/google_common_deploy.jar
index 4bb35873..6f07ac63 100644
Binary files a/lib/google_common_deploy.jar and b/lib/google_common_deploy.jar differ
diff --git a/lib/protobuf_deploy.jar b/lib/protobuf_deploy.jar
index a8a15fdb..a095dde4 100644
Binary files a/lib/protobuf_deploy.jar and b/lib/protobuf_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index c4ff7936..8e689027 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -1111,7 +1111,8 @@ public class Compiler extends AbstractCompiler {
           // Annotate the nodes in the tree with information from the
           // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(input.getName());
+              new SourceInformationAnnotator(
+                  input.getName(), options.devMode != DevMode.OFF);
           NodeTraversal.traverse(this, n, sia);
         }
 
diff --git a/src/com/google/javascript/jscomp/ExportTestFunctions.java b/src/com/google/javascript/jscomp/ExportTestFunctions.java
index b8fc86f3..996aca33 100644
--- a/src/com/google/javascript/jscomp/ExportTestFunctions.java
+++ b/src/com/google/javascript/jscomp/ExportTestFunctions.java
@@ -66,11 +66,11 @@ class ExportTestFunctions implements CompilerPass {
           String functionName = NodeUtil.getFunctionName(functionNode);
           if (isTestFunction(functionNode, functionName)) {
             exportTestFunction(functionName, n, parent);
-          }          
+          }
         }
       }
     }
-    
+
     /**
      * Whether node corresponds to a function expression declared with var,
      * which is of the form:
diff --git a/src/com/google/javascript/jscomp/SourceInformationAnnotator.java b/src/com/google/javascript/jscomp/SourceInformationAnnotator.java
index a619add6..87a5a685 100644
--- a/src/com/google/javascript/jscomp/SourceInformationAnnotator.java
+++ b/src/com/google/javascript/jscomp/SourceInformationAnnotator.java
@@ -16,6 +16,7 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.common.base.Preconditions;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
 
@@ -41,17 +42,21 @@ import com.google.javascript.rhino.Token;
  */
 class SourceInformationAnnotator extends
   NodeTraversal.AbstractPostOrderCallback {
-  private String sourceFile = null;
+  private final String sourceFile;
+  private final boolean doSanityChecks;
 
-  public SourceInformationAnnotator(String sourceFile) {
+  public SourceInformationAnnotator(
+      String sourceFile, boolean doSanityChecks) {
     this.sourceFile = sourceFile;
+    this.doSanityChecks = doSanityChecks;
   }
 
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
-    // Annotate with the source file.
-    if (sourceFile != null) {
-      n.putProp(Node.SOURCEFILE_PROP, sourceFile);
+    // Verify the source file is annotated.
+    if (doSanityChecks && sourceFile != null) {
+      Preconditions.checkState(sourceFile.equals(
+          n.getProp(Node.SOURCEFILE_PROP)));
     }
 
     // Annotate the original name.
diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java
index 6c8b0630..9f69b578 100644
--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java
+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java
@@ -107,6 +107,12 @@ public class IRFactory {
   private final Multimap<String, NodeWithJsDoc> nodesWithJsDoc =
       LinkedHashMultimap.create();
 
+  // Use a template node for properties set on all nodes to minimize the
+  // memory footprint associated with these.
+  private Node templateNode;
+
+  // TODO(johnlenz): Consider creating a template pool for ORIGINALNAME_PROP.
+
   private IRFactory(String sourceString,
                     String sourceName,
                     Config config,
@@ -116,6 +122,18 @@ public class IRFactory {
     this.config = config;
     this.errorReporter = errorReporter;
     this.transformDispatcher = new TransformDispatcher();
+    // The template node properties are applied to all nodes in this transform.
+    this.templateNode = createTemplateNode();
+  }
+
+  // Create a template node to use as a source of common attributes, this allows
+  // the prop structure to be shared among all the node from this source file.
+  // This reduces the cost of these properties to O(nodes) to O(files).
+  private Node createTemplateNode() {
+    // The Node type choice is arbitrary.
+    Node templateNode = new Node(Token.SCRIPT);
+    templateNode.putProp(Node.SOURCEFILE_PROP, sourceName);
+    return templateNode;
   }
 
   public static Node transformTree(AstRoot node,
@@ -173,8 +191,9 @@ public class IRFactory {
         irNode.setType(Token.BLOCK);
         irNode.setWasEmptyNode(true);
       } else {
-        Node newBlock = new Node(Token.BLOCK, irNode,
-            irNode.getLineno(), irNode.getCharno());
+        Node newBlock = newNode(Token.BLOCK, irNode);
+        newBlock.setLineno(irNode.getLineno());
+        newBlock.setCharno(irNode.getCharno());
         irNode = newBlock;
       }
     }
@@ -278,7 +297,7 @@ public class IRFactory {
   private class TransformDispatcher extends TypeSafeDispatcher<Node> {
     private Node processGeneric(
         com.google.javascript.jscomp.mozilla.rhino.Node n) {
-      Node node = new Node(transformTokenType(n.getType()));
+      Node node = newNode(transformTokenType(n.getType()));
       for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {
         node.addChildToBack(transform((AstNode)child));
       }
@@ -310,7 +329,7 @@ public class IRFactory {
         reportDestructuringAssign(literalNode);
       }
 
-      Node node = new Node(Token.ARRAYLIT);
+      Node node = newNode(Token.ARRAYLIT);
       int skipCount = 0;
       for (AstNode child : literalNode.getElements()) {
         Node c = transform(child);
@@ -344,7 +363,7 @@ public class IRFactory {
 
     @Override
     Node processAstRoot(AstRoot rootNode) {
-      Node node = new Node(Token.SCRIPT);
+      Node node = newNode(Token.SCRIPT);
       for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {
         node.addChildToBack(transform((AstNode)child));
       }
@@ -394,7 +413,7 @@ public class IRFactory {
 
     @Override
     Node processBreakStatement(BreakStatement statementNode) {
-      Node node = new Node(Token.BREAK);
+      Node node = newNode(Token.BREAK);
       if (statementNode.getBreakLabel() != null) {
         Node labelName = transform(statementNode.getBreakLabel());
         // Change the NAME to LABEL_NAME
@@ -407,11 +426,11 @@ public class IRFactory {
     @Override
     Node processCatchClause(CatchClause clauseNode) {
       AstNode catchVar = clauseNode.getVarName();
-      Node node = new Node(Token.CATCH, transform(catchVar));
+      Node node = newNode(Token.CATCH, transform(catchVar));
       if (clauseNode.getCatchCondition() != null) {
         node.addChildToBack(transform(clauseNode.getCatchCondition()));
       } else {
-        Node catchCondition = new Node(Token.EMPTY);
+        Node catchCondition = newNode(Token.EMPTY);
         // Old Rhino used the position of the catchVar as the position
         // for the (nonexistent) error being caught.
         catchCondition.setLineno(catchVar.getLineno());
@@ -426,7 +445,7 @@ public class IRFactory {
 
     @Override
     Node processConditionalExpression(ConditionalExpression exprNode) {
-      return new Node(
+      return newNode(
           Token.HOOK,
           transform(exprNode.getTestExpression()),
           transform(exprNode.getTrueExpression()),
@@ -435,7 +454,7 @@ public class IRFactory {
 
     @Override
     Node processContinueStatement(ContinueStatement statementNode) {
-      Node node = new Node(Token.CONTINUE);
+      Node node = newNode(Token.CONTINUE);
       if (statementNode.getLabel() != null) {
         Node labelName = transform(statementNode.getLabel());
         // Change the NAME to LABEL_NAME
@@ -447,7 +466,7 @@ public class IRFactory {
 
     @Override
     Node processDoLoop(DoLoop loopNode) {
-      return new Node(
+      return newNode(
           Token.DO,
           transformBlock(loopNode.getBody()),
           transform(loopNode.getCondition()));
@@ -455,7 +474,7 @@ public class IRFactory {
 
     @Override
     Node processElementGet(ElementGet getNode) {
-      return new Node(
+      return newNode(
           Token.GETELEM,
           transform(getNode.getTarget()),
           transform(getNode.getElement()));
@@ -463,20 +482,20 @@ public class IRFactory {
 
     @Override
     Node processEmptyExpression(EmptyExpression exprNode) {
-      Node node = new Node(Token.EMPTY);
+      Node node = newNode(Token.EMPTY);
       return node;
     }
 
     @Override
     Node processExpressionStatement(ExpressionStatement statementNode) {
-      Node node = new Node(transformTokenType(statementNode.getType()));
+      Node node = newNode(transformTokenType(statementNode.getType()));
       node.addChildToBack(transform(statementNode.getExpression()));
       return node;
     }
 
     @Override
     Node processForInLoop(ForInLoop loopNode) {
-      return new Node(
+      return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
           transform(loopNode.getIteratedObject()),
@@ -485,7 +504,7 @@ public class IRFactory {
 
     @Override
     Node processForLoop(ForLoop loopNode) {
-      Node node = new Node(
+      Node node = newNode(
           Token.FOR,
           transform(loopNode.getInitializer()),
           transform(loopNode.getCondition()),
@@ -496,7 +515,7 @@ public class IRFactory {
 
     @Override
     Node processFunctionCall(FunctionCall callNode) {
-      Node node = new Node(transformTokenType(callNode.getType()),
+      Node node = newNode(transformTokenType(callNode.getType()),
                            transform(callNode.getTarget()));
       for (AstNode child : callNode.getArguments()) {
         node.addChildToBack(transform(child));
@@ -517,7 +536,7 @@ public class IRFactory {
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
-      Node node = new Node(Token.FUNCTION);
+      Node node = newNode(Token.FUNCTION);
       node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());
       Node newName = transform(name);
       if (isUnnamedFunction) {
@@ -533,7 +552,7 @@ public class IRFactory {
       }
 
       node.addChildToBack(newName);
-      Node lp = new Node(Token.LP);
+      Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
@@ -563,7 +582,7 @@ public class IRFactory {
 
     @Override
     Node processIfStatement(IfStatement statementNode) {
-      Node node = new Node(Token.IF);
+      Node node = newNode(Token.IF);
       node.addChildToBack(transform(statementNode.getCondition()));
       node.addChildToBack(transformBlock(statementNode.getThenPart()));
       if (statementNode.getElsePart() != null) {
@@ -574,7 +593,7 @@ public class IRFactory {
 
     @Override
     Node processInfixExpression(InfixExpression exprNode) {
-      Node n =  new Node(
+      Node n =  newNode(
           transformTokenType(exprNode.getType()),
           transform(exprNode.getLeft()),
           transform(exprNode.getRight()));
@@ -591,17 +610,17 @@ public class IRFactory {
 
     @Override
     Node processKeywordLiteral(KeywordLiteral literalNode) {
-      return new Node(transformTokenType(literalNode.getType()));
+      return newNode(transformTokenType(literalNode.getType()));
     }
 
     @Override
     Node processLabel(Label labelNode) {
-      return Node.newString(Token.LABEL_NAME, labelNode.getName());
+      return newStringNode(Token.LABEL_NAME, labelNode.getName());
     }
 
     @Override
     Node processLabeledStatement(LabeledStatement statementNode) {
-      Node node = new Node(Token.LABEL);
+      Node node = newNode(Token.LABEL);
       Node prev = null;
       Node cur = node;
       for (Label label : statementNode.getLabels()) {
@@ -616,7 +635,7 @@ public class IRFactory {
         cur.setCharno(clauseAbsolutePosition);
 
         prev = cur;
-        cur = new Node(Token.LABEL);
+        cur = newNode(Token.LABEL);
       }
       prev.addChildToBack(transform(statementNode.getStatement()));
       return node;
@@ -624,7 +643,7 @@ public class IRFactory {
 
     @Override
     Node processName(Name nameNode) {
-      return Node.newString(Token.NAME, nameNode.getIdentifier());
+      return newStringNode(Token.NAME, nameNode.getIdentifier());
     }
 
     @Override
@@ -634,8 +653,7 @@ public class IRFactory {
 
     @Override
     Node processNumberLiteral(NumberLiteral literalNode) {
-      Node newNode = Node.newNumber(literalNode.getNumber());
-      return newNode;
+      return newNumberNode(literalNode.getNumber());
     }
 
     @Override
@@ -644,7 +662,7 @@ public class IRFactory {
         reportDestructuringAssign(literalNode);
       }
 
-      Node node = new Node(Token.OBJECTLIT);
+      Node node = newNode(Token.OBJECTLIT);
       for (ObjectProperty el : literalNode.getElements()) {
         if (el.isGetter()) {
           reportGetter(el);
@@ -672,7 +690,7 @@ public class IRFactory {
 
     @Override
     Node processPropertyGet(PropertyGet getNode) {
-      return new Node(
+      return newNode(
           Token.GETPROP,
           transform(getNode.getTarget()),
           transformAsString(getNode.getProperty()));
@@ -680,13 +698,13 @@ public class IRFactory {
 
     @Override
     Node processRegExpLiteral(RegExpLiteral literalNode) {
-      Node literalStringNode = Node.newString(literalNode.getValue());
+      Node literalStringNode = newStringNode(literalNode.getValue());
       // assume it's on the same line.
       literalStringNode.setLineno(literalNode.getLineno());
-      Node node = new Node(Token.REGEXP, literalStringNode);
+      Node node = newNode(Token.REGEXP, literalStringNode);
       String flags = literalNode.getFlags();
       if (flags != null && !flags.isEmpty()) {
-        Node flagsNode = Node.newString(flags);
+        Node flagsNode = newStringNode(flags);
         // Assume the flags are on the same line as the literal node.
         flagsNode.setLineno(literalNode.getLineno());
         node.addChildToBack(flagsNode);
@@ -696,7 +714,7 @@ public class IRFactory {
 
     @Override
     Node processReturnStatement(ReturnStatement statementNode) {
-      Node node = new Node(Token.RETURN);
+      Node node = newNode(Token.RETURN);
       if (statementNode.getReturnValue() != null) {
         node.addChildToBack(transform(statementNode.getReturnValue()));
       }
@@ -710,7 +728,7 @@ public class IRFactory {
 
     @Override
     Node processStringLiteral(StringLiteral literalNode) {
-      Node n = Node.newString(literalNode.getValue());
+      Node n = newStringNode(literalNode.getValue());
       return n;
     }
 
@@ -718,12 +736,12 @@ public class IRFactory {
     Node processSwitchCase(SwitchCase caseNode) {
       Node node;
       if (caseNode.isDefault()) {
-        node = new Node(Token.DEFAULT);
+        node = newNode(Token.DEFAULT);
       } else {
         AstNode expr = caseNode.getExpression();
-        node = new Node(Token.CASE, transform(expr));
+        node = newNode(Token.CASE, transform(expr));
       }
-      Node block = new Node(Token.BLOCK);
+      Node block = newNode(Token.BLOCK);
       block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);
       block.setLineno(caseNode.getLineno());
       block.setCharno(position2charno(caseNode.getAbsolutePosition()));
@@ -738,7 +756,7 @@ public class IRFactory {
 
     @Override
     Node processSwitchStatement(SwitchStatement statementNode) {
-      Node node = new Node(Token.SWITCH,
+      Node node = newNode(Token.SWITCH,
           transform(statementNode.getExpression()));
       for (AstNode child : statementNode.getCases()) {
         node.addChildToBack(transform(child));
@@ -748,15 +766,15 @@ public class IRFactory {
 
     @Override
     Node processThrowStatement(ThrowStatement statementNode) {
-      return new Node(Token.THROW,
+      return newNode(Token.THROW,
           transform(statementNode.getExpression()));
     }
 
     @Override
     Node processTryStatement(TryStatement statementNode) {
-      Node node = new Node(Token.TRY,
+      Node node = newNode(Token.TRY,
           transformBlock(statementNode.getTryBlock()));
-      Node block = new Node(Token.BLOCK);
+      Node block = newNode(Token.BLOCK);
       boolean lineSet = false;
 
       for (CatchClause cc : statementNode.getCatchClauses()) {
@@ -793,7 +811,7 @@ public class IRFactory {
         operand.setDouble(-operand.getDouble());
         return operand;
       } else {
-        Node node = new Node(type, operand);
+        Node node = newNode(type, operand);
         if (exprNode.isPostfix()) {
           node.putBooleanProp(Node.INCRDECR_PROP, true);
         }
@@ -803,7 +821,7 @@ public class IRFactory {
 
     @Override
     Node processVariableDeclaration(VariableDeclaration declarationNode) {
-      Node node = new Node(Token.VAR);
+      Node node = newNode(Token.VAR);
       for (VariableInitializer child : declarationNode.getVariables()) {
         node.addChildToBack(transform(child));
       }
@@ -822,7 +840,7 @@ public class IRFactory {
 
     @Override
     Node processWhileLoop(WhileLoop loopNode) {
-      return new Node(
+      return newNode(
           Token.WHILE,
           transform(loopNode.getCondition()),
           transformBlock(loopNode.getBody()));
@@ -830,7 +848,7 @@ public class IRFactory {
 
     @Override
     Node processWithStatement(WithStatement statementNode) {
-      return new Node(
+      return newNode(
           Token.WITH,
           transform(statementNode.getExpression()),
           transformBlock(statementNode.getStatement()));
@@ -844,7 +862,7 @@ public class IRFactory {
               node.getType()),
           sourceName,
           node.getLineno(), "", 0);
-      return new Node(Token.EMPTY);
+      return newNode(Token.EMPTY);
     }
 
     void reportDestructuringAssign(AstNode node) {
@@ -1182,6 +1200,35 @@ public class IRFactory {
     throw new IllegalStateException(String.valueOf(token));
   }
 
+  // Simple helper to create nodes and set the initial node properties.
+  private Node newNode(int type) {
+    return new Node(type).clonePropsFrom(templateNode);
+  }
+
+  private Node newNode(int type, Node child1) {
+    return new Node(type, child1).clonePropsFrom(templateNode);
+  }
+
+  private Node newNode(int type, Node child1, Node child2) {
+    return new Node(type, child1, child2).clonePropsFrom(templateNode);
+  }
+
+  private Node newNode(int type, Node child1, Node child2, Node child3) {
+    return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);
+  }
+
+  private Node newStringNode(String value) {
+    return Node.newString(value).clonePropsFrom(templateNode);
+  }
+
+  private Node newStringNode(int type, String value) {
+    return Node.newString(type, value).clonePropsFrom(templateNode);
+  }
+
+  private Node newNumberNode(Double value) {
+    return Node.newNumber(value).clonePropsFrom(templateNode);
+  }
+
   /**
    * A simple wrapper struct, so that we can put a Node in the collection
    * first and populate it later.
diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index b7e2ec93..c6735ced 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -750,6 +750,20 @@ public class Node implements Cloneable, Serializable {
     return x;
   }
 
+  /**
+   * Clone the properties from the provided node without copying
+   * the property object.  The recieving node may not have any
+   * existing properties.
+   * @param other The node to clone properties from.
+   * @return this node.
+   */
+  public Node clonePropsFrom(Node other) {
+    Preconditions.checkState(this.propListHead == null,
+        "Node has existing properties.");
+    this.propListHead = other.propListHead;
+    return this;
+  }
+
   public void removeProp(int propType) {
     PropListItem result = removeProp(propListHead, propType);
     if (result != propListHead) {
@@ -1036,7 +1050,7 @@ public class Node implements Cloneable, Serializable {
 
   private String toStringTreeImpl() {
     try {
-      StringBuffer s = new StringBuffer();
+      StringBuilder s = new StringBuilder();
       appendStringTree(s);
       return s.toString();
     } catch (IOException e) {
diff --git a/src/com/google/javascript/rhino/RhinoException.java b/src/com/google/javascript/rhino/RhinoException.java
index 5f140c18..3fb41287 100644
--- a/src/com/google/javascript/rhino/RhinoException.java
+++ b/src/com/google/javascript/rhino/RhinoException.java
@@ -66,7 +66,7 @@ public class RhinoException extends RuntimeException
         if (sourceName == null || lineNumber <= 0) {
             return details;
         }
-        StringBuffer buf = new StringBuffer(details);
+        StringBuilder buf = new StringBuilder(details);
         buf.append(" (");
         if (sourceName != null) {
             buf.append(sourceName);
diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java
index aa8c7bc9..1a7db7b0 100644
--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -703,7 +703,8 @@ public abstract class JSType implements Serializable {
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
+        JSType noType = getNativeType(JSTypeNative.NO_TYPE);
+        return new TypePair(noType, noType);
 
       case FALSE:
       case UNKNOWN:
diff --git a/test/com/google/javascript/jscomp/AliasKeywordsTest.java b/test/com/google/javascript/jscomp/AliasKeywordsTest.java
index d32c7405..c31ecf5c 100644
--- a/test/com/google/javascript/jscomp/AliasKeywordsTest.java
+++ b/test/com/google/javascript/jscomp/AliasKeywordsTest.java
@@ -57,7 +57,7 @@ public class AliasKeywordsTest extends CompilerTestCase {
    */
   private static String generateCode(
       String keyword, int numReps, String prepend) {
-    StringBuffer sb = new StringBuffer(prepend);
+    StringBuilder sb = new StringBuilder(prepend);
     for (int i = 0; i < numReps; i++) {
       sb.append("if (");
       sb.append(keyword);
@@ -72,7 +72,7 @@ public class AliasKeywordsTest extends CompilerTestCase {
 
   private static String generatePreProcessThrowCode(int repititions,
                                                     String whatToThrow) {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     for (int i = 0; i < repititions; i++) {
       sb.append("throw ");
       sb.append(whatToThrow);
@@ -128,12 +128,12 @@ public class AliasKeywordsTest extends CompilerTestCase {
   }
 
   public void testAliasTrueFalseNull() {
-    StringBuffer actual = new StringBuffer();
+    StringBuilder actual = new StringBuilder();
     actual.append(generateCode("true", ENOUGH_TO_ALIAS_LITERAL));
     actual.append(generateCode("false", ENOUGH_TO_ALIAS_LITERAL));
     actual.append(generateCode("null", ENOUGH_TO_ALIAS_LITERAL));
 
-    StringBuffer expected = new StringBuffer();
+    StringBuilder expected = new StringBuilder();
     expected.append(
         "var JSCompiler_alias_TRUE=true;" +
         "var JSCompiler_alias_NULL=null;" +
diff --git a/test/com/google/javascript/jscomp/CombinedCompilerPassTest.java b/test/com/google/javascript/jscomp/CombinedCompilerPassTest.java
index 468b18aa..54b63fa5 100644
--- a/test/com/google/javascript/jscomp/CombinedCompilerPassTest.java
+++ b/test/com/google/javascript/jscomp/CombinedCompilerPassTest.java
@@ -93,8 +93,8 @@ public class CombinedCompilerPassTest extends TestCase  {
    * rooted with specified strings.
    */
   private static class ConcatTraversal implements Callback {
-    private StringBuffer visited = new StringBuffer();
-    private StringBuffer shouldTraversed = new StringBuffer();
+    private StringBuilder visited = new StringBuilder();
+    private StringBuilder shouldTraversed = new StringBuilder();
     private Set<String> ignoring = Sets.newHashSet();
 
     ConcatTraversal ignore(String s) {
diff --git a/test/com/google/javascript/jscomp/FunctionRewriterTest.java b/test/com/google/javascript/jscomp/FunctionRewriterTest.java
index da441bc0..aeec54ae 100644
--- a/test/com/google/javascript/jscomp/FunctionRewriterTest.java
+++ b/test/com/google/javascript/jscomp/FunctionRewriterTest.java
@@ -167,8 +167,8 @@ public class FunctionRewriterTest extends CompilerTestCase {
                                String expectedHdr,
                                String expectedBody,
                                int repetitions) {
-    StringBuffer srcBuffer = new StringBuffer();
-    StringBuffer expectedBuffer = new StringBuffer();
+    StringBuilder srcBuffer = new StringBuilder();
+    StringBuilder expectedBuffer = new StringBuilder();
 
     expectedBuffer.append(expectedHdr);
 
diff --git a/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java b/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java
index 9c0b86d6..bae077be 100644
--- a/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java
+++ b/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java
@@ -53,7 +53,7 @@ public class ParallelCompilerPassTest extends TestCase {
   }
 
   public void testManyFunctions() {
-    StringBuffer sb = new StringBuffer("\"foo\";");
+    StringBuilder sb = new StringBuilder("\"foo\";");
     for (int i = 0; i < 20; i++) {
       sb.append("function f");
       sb.append(i);
diff --git a/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
index 14bfbbc3..947515e0 100644
--- a/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
+++ b/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
@@ -332,6 +332,24 @@ public class SemanticReverseAbstractInterpreterTest
         Sets.newHashSet(new TypedName("a", NUMBER_TYPE)));
   }
 
+  /**
+   * Tests reverse interpretation of two undefineds.
+   */
+  @SuppressWarnings("unchecked")
+  public void testEqCondition4() throws Exception {
+    FlowScope blind = newScope();
+    testBinop(blind,
+        Token.EQ,
+        createVar(blind, "a", VOID_TYPE),
+        createVar(blind, "b", VOID_TYPE),
+        Sets.newHashSet(
+            new TypedName("a", VOID_TYPE),
+            new TypedName("b", VOID_TYPE)),
+        Sets.newHashSet(
+            new TypedName("a", NO_TYPE),
+            new TypedName("b", NO_TYPE)));
+  }
+
   /**
    * Tests reverse interpretation of a COMPARE(NAME, NUMBER) expression,
    * where COMPARE can be LE, LT, GE or GT.
diff --git a/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java b/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
index 306420c8..a9cba8da 100644
--- a/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
+++ b/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
@@ -297,7 +297,7 @@ public class SimpleDefinitionFinderTest extends CompilerTestCase {
       for (DefinitionSite defSite : passUnderTest.getDefinitionSites()) {
         Node node = defSite.node;
         Definition definition = defSite.definition;
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("DEF ");
         sb.append(Token.name(node.getType()));
         sb.append(" ");
@@ -320,7 +320,7 @@ public class SimpleDefinitionFinderTest extends CompilerTestCase {
       Collection<Definition> defs =
           passUnderTest.getDefinitionsReferencedAt(node);
       if (defs != null) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("USE ");
         sb.append(Token.name(node.getType()));
         sb.append(" ");
diff --git a/test/com/google/javascript/jscomp/deps/JsFileLineParserTest.java b/test/com/google/javascript/jscomp/deps/JsFileLineParserTest.java
index 167e1463..510168c3 100644
--- a/test/com/google/javascript/jscomp/deps/JsFileLineParserTest.java
+++ b/test/com/google/javascript/jscomp/deps/JsFileLineParserTest.java
@@ -16,14 +16,12 @@
 
 package com.google.javascript.jscomp.deps;
 
-import com.google.common.collect.ImmutableList;
 import com.google.javascript.jscomp.ErrorManager;
 import com.google.javascript.jscomp.PrintStreamErrorManager;
 
 import junit.framework.TestCase;
 
 import java.io.StringReader;
-import java.util.Collections;
 
 /**
  * Tests for {@link JsFileLineParser}.
@@ -87,7 +85,7 @@ public class JsFileLineParserTest extends TestCase {
   }
 
   private static class TestParser extends JsFileLineParser {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
 
     TestParser(ErrorManager errorManager) {
       super(errorManager);
