diff --git a/lib/protobuf_deploy.jar b/lib/protobuf_deploy.jar
index 715d7a54..869ccd42 100755
Binary files a/lib/protobuf_deploy.jar and b/lib/protobuf_deploy.jar differ
diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
index 293204f5..aa29e5f0 100644
--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -323,7 +323,7 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
       } catch (NumberFormatException ignored) {
         numJsFiles = -1;
       }
-      
+
       // We will allow modules of zero input.
       if (numJsFiles < 0) {
         throw new FlagUsageException("Invalid js file count '" + parts[1]
@@ -865,14 +865,16 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
           } else if (defValue.equals("false")) {
             options.setDefineToBooleanLiteral(defName, false);
             continue;
-          } else if (defValue.length() > 1 &&
-              defValue.charAt(0) == '\'' &&
-              defValue.charAt(defValue.length() - 1) == '\'') {
+          } else if (defValue.length() > 1
+              && ((defValue.charAt(0) == '\'' &&
+                  defValue.charAt(defValue.length() - 1) == '\'')
+                  || (defValue.charAt(0) == '\"' &&
+                      defValue.charAt(defValue.length() - 1) == '\"'))) {
             // If the value starts and ends with a single quote,
             // we assume that it's a string.
             String maybeStringVal =
                 defValue.substring(1, defValue.length() - 1);
-            if (maybeStringVal.indexOf('\'') == -1) {
+            if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {
               options.setDefineToStringLiteral(defName, maybeStringVal);
               continue;
             }
diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 2fc7a752..67ca01e7 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -544,7 +544,7 @@ public final class NodeUtil {
    * the reason's why a subtree has side effects.
    */
   static boolean nodeTypeMayHaveSideEffects(Node n) {
-    if (NodeUtil.isAssignmentOp(n)) {
+    if (isAssignmentOp(n)) {
       return true;
     }
 
@@ -589,7 +589,7 @@ public final class NodeUtil {
         return true;
       case Token.NAME:
         // Non-constant names values may have been changed.
-        return !NodeUtil.isConstantName(n)
+        return !isConstantName(n)
             && !knownConstants.contains(n.getString());
 
       // Properties on constant NAMEs can still be side-effected.
@@ -600,7 +600,7 @@ public final class NodeUtil {
       case Token.FUNCTION:
         // Anonymous functions definitions are not changed by side-effects,
         // and named functions are not part of expressions.
-        Preconditions.checkState(NodeUtil.isAnonymousFunction(n));
+        Preconditions.checkState(isAnonymousFunction(n));
         return false;
     }
 
@@ -1109,7 +1109,7 @@ public final class NodeUtil {
     Node parent = block.getParent();
     // Try to remove the block if its parent is a block/script or if its
     // parent is label and it has exactly one child.
-    if (NodeUtil.isStatementBlock(parent)) {
+    if (isStatementBlock(parent)) {
       Node previous = block;
       while (block.hasChildren()) {
         Node child = block.removeFirstChild();
@@ -1177,7 +1177,7 @@ public final class NodeUtil {
    * See {@link #isFunctionDeclaration}).
    */
   static boolean isHoistedFunctionDeclaration(Node n) {
-    return NodeUtil.isFunctionDeclaration(n)
+    return isFunctionDeclaration(n)
         && (n.getParent().getType() == Token.SCRIPT
             || n.getParent().getParent().getType() == Token.FUNCTION);
   }
@@ -1225,10 +1225,10 @@ public final class NodeUtil {
    */
   static boolean isVarArgsFunction(Node function) {
     Preconditions.checkArgument(isFunction(function));
-    return NodeUtil.isNameReferenced(
+    return isNameReferenced(
         function.getLastChild(),
         "arguments",
-        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
+        Predicates.<Node>not(new MatchNodeType(Token.FUNCTION)));
   }
 
   /**
@@ -1239,7 +1239,7 @@ public final class NodeUtil {
   static boolean isObjectCallMethod(Node callNode, String methodName) {
     if (callNode.getType() == Token.CALL) {
       Node functionIndentifyingExpression = callNode.getFirstChild();
-      if (NodeUtil.isGet(functionIndentifyingExpression)) {
+      if (isGet(functionIndentifyingExpression)) {
         Node last = functionIndentifyingExpression.getLastChild();
         if (last != null && last.getType() == Token.STRING) {
           String propName = last.getString();
@@ -1399,7 +1399,7 @@ public final class NodeUtil {
    */
   static boolean containsTypeInOuterScope(Node node, int type) {
     return containsType(node, type,
-        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
+        Predicates.<Node>not(new MatchNodeType(Token.FUNCTION)));
   }
 
   /**
@@ -1629,7 +1629,7 @@ public final class NodeUtil {
         // Note that by this point, unicode escapes have been converted
         // to UTF-16 characters, so we're only searching for character
         // values, not escapes.
-        NodeUtil.isLatin(name);
+        isLatin(name);
   }
 
   private static class VarCollector implements Visitor {
@@ -1656,7 +1656,7 @@ public final class NodeUtil {
     visitPreOrder(
         root,
         collector,
-        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
+        Predicates.<Node>not(new MatchNodeType(Token.FUNCTION)));
     return collector.vars.values();
   }
 
@@ -1665,7 +1665,7 @@ public final class NodeUtil {
    *     some constructor.
    */
   static boolean isPrototypePropertyDeclaration(Node n) {
-    if (!NodeUtil.isExprAssign(n)) {
+    if (!isExprAssign(n)) {
       return false;
     }
     return isPrototypeProperty(n.getFirstChild().getFirstChild());
diff --git a/src/com/google/javascript/jscomp/RemoveConstantExpressions.java b/src/com/google/javascript/jscomp/RemoveConstantExpressions.java
index f84fe053..17d55c9f 100644
--- a/src/com/google/javascript/jscomp/RemoveConstantExpressions.java
+++ b/src/com/google/javascript/jscomp/RemoveConstantExpressions.java
@@ -71,7 +71,7 @@ final class RemoveConstantExpressions implements CompilerPass {
       this.changeProxy.registerListener(
           new ReportCodeHasChangedListener(result));
     }
-    
+
     @Override
     public void visit(NodeTraversal traversal, Node node, Node parent) {
       trySimplify(parent, node);
@@ -87,7 +87,9 @@ final class RemoveConstantExpressions implements CompilerPass {
       }
 
       Node exprBody = node.getFirstChild();
-      if (!NodeUtil.nodeTypeMayHaveSideEffects(exprBody)) {
+      if (!NodeUtil.nodeTypeMayHaveSideEffects(exprBody)
+          || exprBody.getType() == Token.NEW
+          || exprBody.getType() == Token.CALL) {
         changeProxy.replaceWith(parent, node, getSideEffectNodes(exprBody));
       }
     }
@@ -110,19 +112,19 @@ final class RemoveConstantExpressions implements CompilerPass {
       }
       return replacements;
     }
-    
+
     public Result getResult() {
       return result;
     }
   }
-  
+
   /**
    * Used to reports code changes to the compiler as they happen.
    */
   private static class ReportCodeHasChangedListener
       implements AstChangeProxy.ChangeListener {
     private final Result result;
-    
+
     private ReportCodeHasChangedListener(Result result) {
       this.result = result;
     }
diff --git a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java
index 6bd76f11..26c57659 100644
--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java
+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java
@@ -39,8 +39,8 @@
  
 package com.google.javascript.rhino.jstype;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.javascript.rhino.jstype.UnionType;
 
 import static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
@@ -144,7 +144,7 @@ class UnionTypeBuilder implements Serializable {
           result = registry.getNativeType(UNKNOWN_TYPE);
         }
       } else {
-        Set<JSType> alternateSet = Sets.newUnmodifiableHashSet(alternates);
+        Set<JSType> alternateSet = ImmutableSet.copyOf(alternates);
         int size = alternateSet.size();
         if (size > MAX_UNION_SIZE) {
           result = registry.getNativeType(UNKNOWN_TYPE);
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 524eb894..b7d44163 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -132,6 +132,18 @@ public class CommandLineRunnerTest extends TestCase {
          "var FOO = true, BAR = 5, CCC = true, DDD = true;");
   }
 
+  public void testDefineFlag2() {
+    args.add("--define=FOO='x\"'");
+    test("/** @define {string} */ var FOO = \"a\";",
+         "var FOO = \"x\\\"\";");
+  }
+
+  public void testDefineFlag3() {
+    args.add("--define=FOO=\"x'\"");
+    test("/** @define {string} */ var FOO = \"a\";",
+         "var FOO = \"x'\";");
+  }
+
   public void testScriptStrictModeNoWarning() {
     test("'use strict';", "");
     test("'no use strict';", CheckSideEffects.USELESS_CODE_ERROR);
diff --git a/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java b/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
index 63c1f7e1..67d07924 100644
--- a/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
+++ b/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
@@ -277,4 +277,20 @@ public class RemoveConstantExpressionsTest extends CompilerTestCase {
   public void testRemoveFromLabel2() {
     test("LBL: foo() + 1 + bar()", "LBL: {foo();bar()}");
   }
+
+  public void testCall1() {
+    test("Math.sin(0);", "");
+  }
+
+  public void testCall2() {
+    test("1 + Math.sin(0);", "");
+  }
+
+  public void testNew1() {
+    test("new Date;", "");
+  }
+
+  public void testNew2() {
+    test("1 + new Date;", "");
+  }
 }
