diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 8d268b6b..d9ac0199 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -127,15 +127,7 @@ class CodeGenerator {
       // the IN_FOR_INIT_CLAUSE one.
       Context rhsContext = getContextForNoInOperator(context);
 
-      // Handle associativity.
-      // e.g. if the parse tree is a * (b * c),
-      // we can simply generate a * b * c.
-      if (last.getType() == type &&
-          NodeUtil.isAssociative(type)) {
-        addExpr(first, p, context);
-        cc.addOp(opstr, true);
-        addExpr(last, p, rhsContext);
-      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
+      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
         // Assignments are the only right-associative binary operators
         addExpr(first, p, context);
         cc.addOp(opstr, true);
diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index f3c09dc1..2015f050 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -99,11 +99,41 @@ class PeepholeSubstituteAlternateSyntax
       case Token.ARRAYLIT:
         return tryMinimizeArrayLiteral(node);
 
+      case Token.MUL:
+      case Token.AND:
+      case Token.OR:
+      case Token.BITOR:
+      case Token.BITXOR:
+      case Token.BITAND:
+        return tryRotateAssociativeOperator(node);
+
       default:
         return node; //Nothing changed
     }
   }
 
+  private Node tryRotateAssociativeOperator(Node n) {
+    if (!late) {
+      return n;
+    }
+    Preconditions.checkArgument(NodeUtil.isAssociative(n.getType()));
+    Node rhs = n.getLastChild();
+    if (n.getType() == rhs.getType()) {
+      Node parent = n.getParent();
+      Node first = n.getFirstChild().detachFromParent();
+      Node second = rhs.getFirstChild().detachFromParent();
+      Node third = rhs.getLastChild().detachFromParent();
+      Node newLhs = new Node(n.getType(), first, second)
+          .copyInformationFrom(n);
+      Node newRoot = new Node(rhs.getType(), newLhs, third)
+          .copyInformationFrom(rhs);
+      parent.replaceChild(n, newRoot);
+      reportCodeChange();
+      return newRoot;
+    }
+    return n;
+  }
+
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
diff --git a/test/com/google/javascript/jscomp/CodePrinterTest.java b/test/com/google/javascript/jscomp/CodePrinterTest.java
index 82742d3e..b1f9587c 100644
--- a/test/com/google/javascript/jscomp/CodePrinterTest.java
+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java
@@ -195,9 +195,11 @@ public class CodePrinterTest extends TestCase {
     assertPrint("var a,b,c,d;a || (b&& c) && (a || d)",
         "var a,b,c,d;a||b&&c&&(a||d)");
     assertPrint("var a,b,c; a || (b || c); a * (b * c); a | (b | c)",
-        "var a,b,c;a||b||c;a*b*c;a|b|c");
+        "var a,b,c;a||(b||c);a*(b*c);a|(b|c)");
     assertPrint("var a,b,c; a / b / c;a / (b / c); a - (b - c);",
         "var a,b,c;a/b/c;a/(b/c);a-(b-c)");
+
+    // Nested assignments
     assertPrint("var a,b; a = b = 3;",
         "var a,b;a=b=3");
     assertPrint("var a,b,c,d; a = (b = c = (d = 3));",
@@ -448,7 +450,7 @@ public class CodePrinterTest extends TestCase {
         "var a={};for(var i=(\"length\"in a)+1;i;);");
     assertPrint("var a={};for (var i = (\"length\" in a|| \"size\" in a);;);",
         "var a={};for(var i=(\"length\"in a)||(\"size\"in a);;);");
-    assertPrint("var a={};for (var i = a || a || (\"size\" in a);;);",
+    assertPrint("var a={};for (var i = (a || a) || (\"size\" in a);;);",
         "var a={};for(var i=a||a||(\"size\"in a);;);");
 
     // Test works with unary operators and calls.
@@ -1565,4 +1567,8 @@ public class CodePrinterTest extends TestCase {
     assertPrintSame("x={foo:2}");
     assertPrint("x={function:2}", "x={\"function\":2}");
   }
+
+  public void testIssue1062() {
+    assertPrintSame("3*(4%3*5)");
+  }
 }
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index ffde003f..fcaf517e 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -443,11 +443,11 @@ public class CommandLineRunnerTest extends TestCase {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     test("function f(p) {" +
          " var x;" +
-         " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" +
+         " return ((x=p.id) && (x=parseInt(x.substr(1)))) && x>0;" +
          "}",
          "function f(b) {" +
          " var a;" +
-         " return ((a=b.id) && (a=parseInt(a.substr(1))) && 0<a);" +
+         " return ((a=b.id) && (a=parseInt(a.substr(1)))) && 0<a;" +
          "}");
   }
 
diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index 41b35a4e..7e4803c0 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -2058,8 +2058,8 @@ public class IntegrationTest extends IntegrationTestCase {
     CompilerOptions options = createCompilerOptions();
     options.foldConstants = true;
     test(options,
-        "if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }",
-        "   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) ");
+        "if (((x < 1 || x > 1) || 1 < x) || 1 > x) { alert(x) }",
+        "   (((1 > x || 1 < x) || 1 < x) || 1 > x) && alert(x) ");
   }
 
   public void testsyntheticBlockOnDeadAssignments() {
diff --git a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
index aeb17e27..ff644e7d 100644
--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
@@ -434,7 +434,6 @@ public class PeepholeSubstituteAlternateSyntaxTest extends CompilerTestCase {
     test("(goog$partial(f))(a)", "f(a)");
     test("(goog$partial(f,a))(b)", "f(a,b)");
     test("(goog$partial(f,a,b))(c)", "f(a,b,c)");
-
     // Don't rewrite if the bind isn't the immediate call target
     testSame("(goog$bind(f)).call(g)");
   }
@@ -456,6 +455,12 @@ public class PeepholeSubstituteAlternateSyntaxTest extends CompilerTestCase {
     testSame("var a = String({valueOf: function() { return 1; }});");
   }
 
+  public void testAssocitivity() {
+    test("var a,b,c; a || (b || c); a * (b * c); a | (b | c)",
+        "var a,b,c; (a || b) || c; (a * b) * c; (a | b) | c");
+    testSame("var a,b,c; a % (b % c); a / (b / c); a - (b - c);");
+  }
+
   private static class StringCompareTestCase extends CompilerTestCase {
 
     StringCompareTestCase() {
diff --git a/test/com/google/javascript/jscomp/parsing/ParserTest.java b/test/com/google/javascript/jscomp/parsing/ParserTest.java
index e087e09c..cb002bcc 100644
--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java
@@ -1140,6 +1140,17 @@ public class ParserTest extends BaseJSTypeTestCase {
     parse("try {} catch (/** @type {Error} */ e) {}");
   }
 
+  public void testParsingAssociativity() {
+    assertNodeEquality(parse("x * y * z"), parse("(x * y) * z"));
+    assertNodeEquality(parse("x + y + z"), parse("(x + y) + z"));
+    assertNodeEquality(parse("x | y | z"), parse("(x | y) | z"));
+    assertNodeEquality(parse("x & y & z"), parse("(x & y) & z"));
+    assertNodeEquality(parse("x ^ y ^ z"), parse("(x ^ y) ^ z"));
+    // TODO(blickly): Fix rhino to parse || and && left-associatively.
+    assertNodeEquality(parse("x || y || z"), parse("x || (y || z)"));
+    assertNodeEquality(parse("x && y && z"), parse("x && (y && z)"));
+  }
+
   /**
    * Verify that the given code has the given parse errors.
    * @return If in IDE mode, returns a partial tree.
