diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 2acd58e3..54d429d9 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -527,23 +527,46 @@ class TypeInference
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
+        JSType varType = var == null ? null : var.getType();
+        boolean isVarDeclaration = left.hasChildren()
+            && varType != null && !var.isTypeInferred();
 
-        // When looking at VAR initializers for declared VARs, we trust
-        // the declared type over the type it's being initialized to.
-        // This has two purposes:
-        // 1) We avoid re-declaring declared variables so that built-in
-        //    types defined in externs are not redeclared.
-        // 2) When there's a lexical closure like
-        //    /** @type {?string} */ var x = null;
-        //    function f() { x = 'xyz'; }
-        //    the inference will ignore the lexical closure,
-        //    which is just wrong. This bug needs to be fixed eventually.
-        boolean isVarDeclaration = left.hasChildren();
-        if (!isVarDeclaration || var == null || var.isTypeInferred()) {
+        // When looking at VAR initializers for declared VARs, we tend
+        // to use the declared type over the type it's being
+        // initialized to in the global scope.
+        //
+        // For example,
+        // /** @param {number} */ var f = goog.abstractMethod;
+        // it's obvious that the programmer wants you to use
+        // the declared function signature, not the inferred signature.
+        //
+        // Or,
+        // /** @type {Object.<string>} */ var x = {};
+        // the one-time anonymous object on the right side
+        // is as narrow as it can possibly be, but we need to make
+        // sure we back-infer the <string> element constraint on
+        // the left hand side, so we use the left hand side.
+
+        boolean isVarTypeBetter = isVarDeclaration &&
+            // Makes it easier to check for NPEs.
+            !resultType.isNullType() && !resultType.isVoidType();
+
+        // TODO(nicksantos): This might be a better check once we have
+        // back-inference of object/array constraints.  It will probably
+        // introduce more type warnings.  It uses the result type iff it's
+        // strictly narrower than the declared var type.
+        //
+        //boolean isVarTypeBetter = isVarDeclaration &&
+        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
+        //     || !resultType.isSubtype(varType));
+
+
+        if (isVarTypeBetter) {
+          redeclareSimpleVar(scope, left, varType);
+        } else {
           redeclareSimpleVar(scope, left, resultType);
         }
-        left.setJSType(isVarDeclaration || leftType == null ?
-            resultType : null);
+        left.setJSType(resultType);
 
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
diff --git a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java
index 0f74f609..ab7d0132 100644
--- a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java
@@ -90,7 +90,8 @@ abstract class CompilerTypeTestCase extends BaseJSTypeTestCase {
       "Arguments.prototype.length;\n" +
       "/** @type {!Arguments} */\n" +
       "var arguments;" +
-      "" + ACTIVE_X_OBJECT_DEF;
+      "" + ACTIVE_X_OBJECT_DEF +
+      "/** @type {?} */ var unknown;"; // For producing unknowns in tests.
 
   protected Compiler compiler;
 
diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index 2ac02c5d..3a5fa58f 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -971,7 +971,7 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testAdd14() throws Exception {
-    testTypes("/** @type {(null,string)} */ var a = null;" +
+    testTypes("/** @type {(null,string)} */ var a = unknown;" +
         "/** @type {number} */ var b = 5;" +
         "/** @type {boolean} */ var c = a + b;",
         "initializing variable\n" +
@@ -989,7 +989,7 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testAdd16() throws Exception {
-    testTypes("/** @type {(undefined,string)} */ var a = undefined;" +
+    testTypes("/** @type {(undefined,string)} */ var a = unknown;" +
         "/** @type {number} */ var b = 5;" +
         "/** @type {boolean} */ var c = a + b;",
         "initializing variable\n" +
@@ -999,7 +999,7 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
 
   public void testAdd17() throws Exception {
     testTypes("/** @type {number} */ var a = 5;" +
-        "/** @type {(undefined,string)} */ var b = undefined;" +
+        "/** @type {(undefined,string)} */ var b = unknown;" +
         "/** @type {boolean} */ var c = a + b;",
         "initializing variable\n" +
         "found   : (number|string)\n" +
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 9415a3a9..74001b13 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -1286,7 +1286,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testAdd14() throws Exception {
-    testTypes("/** @type {(null,string)} */ var a = null;" +
+    testTypes("/** @type {(null,string)} */ var a = unknown;" +
         "/** @type {number} */ var b = 5;" +
         "/** @type {boolean} */ var c = a + b;",
         "initializing variable\n" +
@@ -1304,7 +1304,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testAdd16() throws Exception {
-    testTypes("/** @type {(undefined,string)} */ var a = undefined;" +
+    testTypes("/** @type {(undefined,string)} */ var a = unknown;" +
         "/** @type {number} */ var b = 5;" +
         "/** @type {boolean} */ var c = a + b;",
         "initializing variable\n" +
@@ -1314,7 +1314,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
 
   public void testAdd17() throws Exception {
     testTypes("/** @type {number} */ var a = 5;" +
-        "/** @type {(undefined,string)} */ var b = undefined;" +
+        "/** @type {(undefined,string)} */ var b = unknown;" +
         "/** @type {boolean} */ var c = a + b;",
         "initializing variable\n" +
         "found   : (number|string)\n" +
@@ -6100,19 +6100,19 @@ public class TypeCheckTest extends CompilerTypeTestCase {
 
   public void testSwitchCase4() throws Exception {
     testTypes("/** @type {(string,Null)} */" +
-        "var a = 'foo';" +
+        "var a = unknown;" +
         "switch (a) { case 'A':break; case null:break; }");
   }
 
   public void testSwitchCase5() throws Exception {
     testTypes("/** @type {(String,Null)} */" +
-        "var a = new String('foo');" +
+        "var a = unknown;" +
         "switch (a) { case 'A':break; case null:break; }");
   }
 
   public void testSwitchCase6() throws Exception {
     testTypes("/** @type {(Number,Null)} */" +
-        "var a = new Number(5);" +
+        "var a = unknown;" +
         "switch (a) { case 5:break; case null:break; }");
   }
 
@@ -6907,6 +6907,15 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "Property prop never defined on C2");
   }
 
+  public void testIssue1056() throws Exception {
+    testTypes(
+        "/** @type {Array} */ var x = null;" +
+        "x.push('hi');",
+        "No properties on this expression\n" +
+        "found   : null\n" +
+        "required: Object");
+  }
+
   public void testIssue1072() throws Exception {
     testTypes(
         "/**\n" +
