diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index afaf88a2..d03988cf 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -160,17 +160,23 @@ class InlineObjectLiterals implements CompilerPass {
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
+        // Ignore most indirect references, like x.y (but not x.y(),
+        // since the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target maybe using the object as a 'this' value.
+          // A call target may be using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
+          // Deleting a property has different semantics from deleting
+          // a variable, so deleted properties should not be inlined.
+          if (gramps.isDelProp()) {
+            return false;
+          }
+
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
diff --git a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
index 369fc2f4..00afc7d5 100644
--- a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
+++ b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
@@ -348,6 +348,13 @@ public class InlineObjectLiteralsTest extends CompilerTestCase {
         "   '[object Function]';");
   }
 
+  public void testNoInlineDeletedProperties() {
+    testSameLocal(
+        "var foo = {bar:1};" +
+        "delete foo.bar;" +
+        "return foo.bar;");
+  }
+
   private final String LOCAL_PREFIX = "function local(){";
   private final String LOCAL_POSTFIX = "}";
 
