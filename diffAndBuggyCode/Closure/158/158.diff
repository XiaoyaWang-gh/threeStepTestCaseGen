diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
index 36a92467..e2e102c6 100644
--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -194,12 +194,11 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
       throws FlagUsageException, IOException {
     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();
 
-    diagnosticGroups.setWarningLevels(
-        options, config.jscompError, CheckLevel.ERROR);
-    diagnosticGroups.setWarningLevels(
-        options, config.jscompWarning, CheckLevel.WARNING);
-    diagnosticGroups.setWarningLevels(
-        options, config.jscompOff, CheckLevel.OFF);
+    if (config.warningGuards != null) {
+      for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {
+        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);
+      }
+    }
 
     createDefineOrTweakReplacements(config.define, options, false);
 
@@ -1494,36 +1493,13 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
       return this;
     }
 
-    private final List<String> jscompError = Lists.newArrayList();
+    private WarningGuardSpec warningGuards = null;
 
     /**
-     * Make the named class of warnings an error.
+     * Add warning guards.
      */
-    CommandLineConfig setJscompError(List<String> jscompError) {
-      this.jscompError.clear();
-      this.jscompError.addAll(jscompError);
-      return this;
-    }
-
-    private final List<String> jscompWarning = Lists.newArrayList();
-
-    /**
-     * Make the named class of warnings a normal warning.
-     */
-    CommandLineConfig setJscompWarning(List<String> jscompWarning) {
-      this.jscompWarning.clear();
-      this.jscompWarning.addAll(jscompWarning);
-      return this;
-    }
-
-    private final List<String> jscompOff = Lists.newArrayList();
-
-    /**
-     * Turn off the named class of warnings.
-     */
-    CommandLineConfig setJscompOff(List<String> jscompOff) {
-      this.jscompOff.clear();
-      this.jscompOff.addAll(jscompOff);
+    CommandLineConfig setWarningGuardSpec(WarningGuardSpec spec) {
+      this.warningGuards = spec;
       return this;
     }
 
@@ -1630,4 +1606,31 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
       return this;
     }
   }
+
+  /**
+   * A little helper class to make it easier to collect warning types
+   * from --jscomp_error, --jscomp_warning, and --jscomp_off.
+   */
+  protected static class WarningGuardSpec {
+    private static class Entry {
+      private final CheckLevel level;
+      private final String groupName;
+
+      private Entry(CheckLevel level, String groupName) {
+        this.level = level;
+        this.groupName = groupName;
+      }
+    }
+
+    // The entries, in the order that they were added.
+    private final List<Entry> entries = Lists.newArrayList();
+
+    protected void add(CheckLevel level, String groupName) {
+      entries.add(new Entry(level, groupName));
+    }
+
+    protected void clear() {
+      entries.clear();
+    }
+  }
 }
diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java
index a5ce6aee..b1a7472a 100644
--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -23,6 +23,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Files;
 import com.google.common.io.LimitInputStream;
+import com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec;
 
 import org.kohsuke.args4j.CmdLineException;
 import org.kohsuke.args4j.CmdLineParser;
@@ -31,11 +32,13 @@ import org.kohsuke.args4j.OptionDef;
 import org.kohsuke.args4j.spi.OptionHandler;
 import org.kohsuke.args4j.spi.Parameters;
 import org.kohsuke.args4j.spi.Setter;
+import org.kohsuke.args4j.spi.StringOptionHandler;
 
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
+import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
@@ -47,8 +50,6 @@ import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
-import java.nio.charset.Charset;
-
 /**
  * CommandLineRunner translates flags into Java API calls on the Compiler.
  *
@@ -81,12 +82,19 @@ import java.nio.charset.Charset;
  *   }
  * }
  * </pre>
+ *
+ * This class is totally not thread-safe.
+ *
  * @author bolinfest@google.com (Michael Bolin)
  */
 public class CommandLineRunner extends
     AbstractCommandLineRunner<Compiler, CompilerOptions> {
-
+  // I don't really care about unchecked warnings in this class.
+  @SuppressWarnings("unchecked")
   private static class Flags {
+    private static final WarningGuardSpec warningGuardSpec =
+        new WarningGuardSpec();
+
     @Option(name = "--help",
         handler = BooleanOptionHandler.class,
         usage = "Displays this message")
@@ -223,16 +231,19 @@ public class CommandLineRunner extends
     private String create_source_map = "";
 
     @Option(name = "--jscomp_error",
+        handler = WarningGuardErrorOptionHandler.class,
         usage = "Make the named class of warnings an error. Options:" +
         DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
     private List<String> jscomp_error = Lists.newArrayList();
 
     @Option(name = "--jscomp_warning",
+        handler = WarningGuardWarningOptionHandler.class,
         usage = "Make the named class of warnings a normal warning. " +
         "Options:" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
-    private List<String> jscomp_warning =  Lists.newArrayList();
+    private List<String> jscomp_warning = Lists.newArrayList();
 
     @Option(name = "--jscomp_off",
+        handler = WarningGuardOffOptionHandler.class,
         usage = "Turn off the named class of warnings. Options:" +
         DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
     private List<String> jscomp_off = Lists.newArrayList();
@@ -378,6 +389,55 @@ public class CommandLineRunner extends
         return null;
       }
     }
+
+    // Our own parser for warning guards that preserves the original order
+    // of the flags.
+    public static class WarningGuardErrorOptionHandler
+        extends StringOptionHandler {
+      public WarningGuardErrorOptionHandler(
+          CmdLineParser parser, OptionDef option,
+          Setter<? super String> setter) {
+        super(parser, option, new WarningGuardSetter(setter, CheckLevel.ERROR));
+      }
+    }
+
+    public static class WarningGuardWarningOptionHandler
+        extends StringOptionHandler {
+      public WarningGuardWarningOptionHandler(
+          CmdLineParser parser, OptionDef option,
+          Setter<? super String> setter) {
+        super(parser, option,
+            new WarningGuardSetter(setter, CheckLevel.WARNING));
+      }
+    }
+
+    public static class WarningGuardOffOptionHandler
+        extends StringOptionHandler {
+      public WarningGuardOffOptionHandler(
+          CmdLineParser parser, OptionDef option,
+          Setter<? super String> setter) {
+        super(parser, option, new WarningGuardSetter(setter, CheckLevel.OFF));
+      }
+    }
+
+    private static class WarningGuardSetter implements Setter {
+      private final Setter proxy;
+      private final CheckLevel level;
+
+      private WarningGuardSetter(Setter proxy, CheckLevel level) {
+        this.proxy = proxy;
+        this.level = level;
+      }
+
+      @Override public boolean isMultiValued() { return proxy.isMultiValued(); }
+
+      @Override public Class getType() { return proxy.getType(); }
+
+      @Override public void addValue(Object value) throws CmdLineException {
+        proxy.addValue((String) value);
+        warningGuardSpec.add(level, (String) value);
+      }
+    }
   }
 
   /**
@@ -467,6 +527,7 @@ public class CommandLineRunner extends
     List<String> processedFileArgs
         = processArgs(argsInFile.toArray(new String[] {}));
     CmdLineParser parserFileArgs = new CmdLineParser(flags);
+    Flags.warningGuardSpec.clear();
     parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));
 
     // Currently we are not supporting this (prevent direct/indirect loops)
@@ -482,6 +543,7 @@ public class CommandLineRunner extends
     List<String> processedArgs = processArgs(args);
 
     CmdLineParser parser = new CmdLineParser(flags);
+    Flags.warningGuardSpec.clear();
     isConfigValid = true;
     try {
       parser.parseArgument(processedArgs.toArray(new String[] {}));
@@ -534,9 +596,7 @@ public class CommandLineRunner extends
           .setModuleWrapper(flags.module_wrapper)
           .setModuleOutputPathPrefix(flags.module_output_path_prefix)
           .setCreateSourceMap(flags.create_source_map)
-          .setJscompError(flags.jscomp_error)
-          .setJscompWarning(flags.jscomp_warning)
-          .setJscompOff(flags.jscomp_off)
+          .setWarningGuardSpec(Flags.warningGuardSpec)
           .setDefine(flags.define)
           .setCharset(flags.charset)
           .setManageClosureDependencies(flags.manage_closure_dependencies)
diff --git a/src/com/google/javascript/jscomp/DiagnosticGroups.java b/src/com/google/javascript/jscomp/DiagnosticGroups.java
index 12cc336d..cf0beda1 100644
--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java
+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java
@@ -20,7 +20,6 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 
-import java.util.List;
 import java.util.Map;
 
 /**
@@ -183,12 +182,10 @@ public class DiagnosticGroups {
   /**
    * Adds warning levels by name.
    */
-  void setWarningLevels(CompilerOptions options,
-      List<String> diagnosticGroups, CheckLevel level) {
-    for (String name : diagnosticGroups) {
-      DiagnosticGroup group = forName(name);
-      Preconditions.checkNotNull(group, "No warning class for name: " + name);
-      options.setWarningLevel(group, level);
-    }
+  void setWarningLevel(CompilerOptions options,
+      String name, CheckLevel level) {
+    DiagnosticGroup group = forName(name);
+    Preconditions.checkNotNull(group, "No warning class for name: " + name);
+    options.setWarningLevel(group, level);
   }
 }
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 46a1c296..e5e71c19 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -114,6 +114,30 @@ public class CommandLineRunnerTest extends TestCase {
     super.tearDown();
   }
 
+  public void testWarningGuardOrdering1() {
+    args.add("--jscomp_error=globalThis");
+    args.add("--jscomp_off=globalThis");
+    testSame("function f() { this.a = 3; }");
+  }
+
+  public void testWarningGuardOrdering2() {
+    args.add("--jscomp_off=globalThis");
+    args.add("--jscomp_error=globalThis");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
+  public void testWarningGuardOrdering3() {
+    args.add("--jscomp_warning=globalThis");
+    args.add("--jscomp_off=globalThis");
+    testSame("function f() { this.a = 3; }");
+  }
+
+  public void testWarningGuardOrdering4() {
+    args.add("--jscomp_off=globalThis");
+    args.add("--jscomp_warning=globalThis");
+    test("function f() { this.a = 3; }", CheckGlobalThis.GLOBAL_THIS);
+  }
+
   public void testCheckGlobalThisOffByDefault() {
     testSame("function f() { this.a = 3; }");
   }
