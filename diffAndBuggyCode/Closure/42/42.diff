diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java
index 714e9a57..c6b70c55 100644
--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java
+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java
@@ -565,6 +565,15 @@ class IRFactory {
 
     @Override
     Node processForInLoop(ForInLoop loopNode) {
+      if (loopNode.isForEach()) {
+        errorReporter.error(
+            "unsupported language extension: for each",
+            sourceName,
+            loopNode.getLineno(), "", 0);
+
+        // Return the bare minimum to put the AST in a valid state.
+        return newNode(Token.EXPR_RESULT, Node.newNumber(0));
+      }
       return newNode(
           Token.FOR,
           transform(loopNode.getIterator()),
diff --git a/test/com/google/javascript/jscomp/parsing/ParserTest.java b/test/com/google/javascript/jscomp/parsing/ParserTest.java
index b98f8e52..22fef603 100644
--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java
@@ -958,6 +958,19 @@ public class ParserTest extends BaseJSTypeTestCase {
     assertNotNull(partialTree);
   }
 
+  public void testForEach() {
+    parseError(
+        "function f(stamp, status) {\n" +
+        "  for each ( var curTiming in this.timeLog.timings ) {\n" +
+        "    if ( curTiming.callId == stamp ) {\n" +
+        "      curTiming.flag = status;\n" +
+        "      break;\n" +
+        "    }\n" +
+        "  }\n" +
+        "};",
+        "unsupported language extension: for each");
+  }
+
   /**
    * Verify that the given code has the given parse errors.
    * @return If in IDE mode, returns a partial tree.
@@ -966,7 +979,6 @@ public class ParserTest extends BaseJSTypeTestCase {
     TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);
     Node script = null;
     try {
-
       StaticSourceFile file = new SimpleSourceFile("input", false);
       script = ParserRunner.parse(
           file, string, ParserRunner.createConfig(isIdeMode, mode, false),
