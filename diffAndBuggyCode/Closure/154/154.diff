diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 5760f79c..41b94e0c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -182,14 +182,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           "original: {2}\n" +
           "override: {3}");
 
-  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =
-      DiagnosticType.warning(
-          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",
-          "mismatch of the {0} property type and the type " +
-          "of the property it overrides from interface {1}\n" +
-          "original: {2}\n" +
-          "override: {3}");
-
   static final DiagnosticType UNKNOWN_OVERRIDE =
       DiagnosticType.warning(
           "JSC_UNKNOWN_OVERRIDE",
@@ -240,7 +232,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       HIDDEN_SUPERCLASS_PROPERTY,
       HIDDEN_INTERFACE_PROPERTY,
       HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
-      HIDDEN_INTERFACE_PROPERTY_MISMATCH,
       UNKNOWN_OVERRIDE,
       INTERFACE_METHOD_OVERRIDE,
       UNKNOWN_EXPR_TYPE,
@@ -1047,17 +1038,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
               HIDDEN_INTERFACE_PROPERTY, propertyName,
               interfaceType.getTopMostDefiningType(propertyName).toString()));
         }
-        // Check that it is ok
-        if (interfaceHasProperty) {
-          JSType interfacePropType =
-              interfaceType.getPrototype().getPropertyType(propertyName);
-          if (!propertyType.canAssignTo(interfacePropType)) {
-            compiler.report(t.makeError(n,
-                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,
-                interfaceType.getTopMostDefiningType(propertyName).toString(),
-                interfacePropType.toString(), propertyType.toString()));
-          }
-        }
       }
     }
 
@@ -1441,7 +1421,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         }
       }
       if (functionType.isConstructor()) {
-        validator.expectAllInterfacePropertiesImplemented(functionType);
+        validator.expectAllInterfaceProperties(t, n, functionType);
       }
     }
   }
diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index d20f5703..24bf792f 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -107,13 +107,22 @@ class TypeValidator {
           "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED",
           "property {0} on interface {1} is not implemented by type {2}");
 
+  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =
+      DiagnosticType.warning(
+        "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",
+        "mismatch of the {0} property type and the type " +
+        "of the property it overrides from interface {1}\n" +
+        "original: {2}\n" +
+        "override: {3}");
+
   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
       INVALID_CAST,
       TYPE_MISMATCH_WARNING,
       MISSING_EXTENDS_TAG_WARNING,
       DUP_VAR_DECLARATION,
       HIDDEN_PROPERTY_MISMATCH,
-      INTERFACE_METHOD_NOT_IMPLEMENTED);
+      INTERFACE_METHOD_NOT_IMPLEMENTED,
+      HIDDEN_INTERFACE_PROPERTY_MISMATCH);
 
   TypeValidator(AbstractCompiler compiler) {
     this.compiler = compiler;
@@ -553,27 +562,54 @@ class TypeValidator {
 
   /**
    * Expect that all properties on interfaces that this type implements are
-   * implemented.
+   * implemented and correctly typed.
    */
-  void expectAllInterfacePropertiesImplemented(FunctionType type) {
+  void expectAllInterfaceProperties(NodeTraversal t, Node n,
+      FunctionType type) {
     ObjectType instance = type.getInstanceType();
     for (ObjectType implemented : type.getAllImplementedInterfaces()) {
       if (implemented.getImplicitPrototype() != null) {
         for (String prop :
             implemented.getImplicitPrototype().getOwnPropertyNames()) {
-          if (!instance.hasProperty(prop)) {
-            Node source = type.getSource();
-            Preconditions.checkNotNull(source);
-            String sourceName = (String) source.getProp(Node.SOURCENAME_PROP);
-            sourceName = sourceName == null ? "" : sourceName;
-            if (shouldReport) {
-              compiler.report(JSError.make(sourceName, source,
-                  INTERFACE_METHOD_NOT_IMPLEMENTED,
-                  prop, implemented.toString(), instance.toString()));
-            }
-            registerMismatch(instance, implemented);
-          }
+          expectInterfaceProperty(t, n, instance, implemented, prop);
+        }
+      }
+    }
+  }
+
+  /**
+   * Expect that the peroperty in an interface that this type implements is
+   * implemented and correctly typed.
+   */
+  private void expectInterfaceProperty(NodeTraversal t, Node n,
+      ObjectType instance, ObjectType implementedInterface, String prop) {
+    if (!instance.hasProperty(prop)) {
+      // Not implemented
+      String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
+      sourceName = sourceName == null ? "" : sourceName;
+      if (shouldReport) {
+        compiler.report(JSError.make(sourceName, n,
+            INTERFACE_METHOD_NOT_IMPLEMENTED,
+            prop, implementedInterface.toString(), instance.toString()));
+      }
+      registerMismatch(instance, implementedInterface);
+    } else {
+      JSType found = instance.getPropertyType(prop);
+      JSType required
+        = implementedInterface.getImplicitPrototype().getPropertyType(prop);
+      found = found.restrictByNotNullOrUndefined();
+      required = required.restrictByNotNullOrUndefined();
+      if (!found.canAssignTo(required)) {
+        // Implemented, but not correctly typed
+        if (shouldReport) {
+          FunctionType constructor
+            = implementedInterface.toObjectType().getConstructor();
+          compiler.report(t.makeError(n,
+              HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,
+              constructor.getTopMostDefiningType(prop).toString(),
+              required.toString(), found.toString()));
         }
+        registerMismatch(found, required);
       }
     }
   }
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 39a6c944..0eb9cb1d 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -4817,7 +4817,8 @@ public class TypeCheckTest extends CompilerTypeTestCase {
              "Element.prototype.innerHTML;" +
              "/** @constructor \n @extends Element */" +
              "function DIVElement() {};",
-             "(new DIVElement).innerHTML = new Array();", null, false);
+             "(new DIVElement).innerHTML = new Array();",
+             null, false);
   }
 
   public void testImplicitCastNotInExterns() throws Exception {
@@ -6712,6 +6713,20 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: string");
   }
 
+  public void testInterfaceInheritanceCheck12() throws Exception {
+    testTypes(
+        "/** @interface */ function I() {};\n" +
+        "/** @type {string} */ I.prototype.foobar;\n" +
+        "/** \n * @constructor \n * @implements {I} */\n" +
+        "function C() {\n" +
+        "/** \n * @type {number} */ this.foobar = 2;};\n" +
+        "/** @type {I} */ \n var test = new C(); alert(test.foobar);",
+        "mismatch of the foobar property type and the type of the property" +
+        " it overrides from interface I\n" +
+        "original: string\n" +
+        "override: number");
+  }
+
   public void testInterfacePropertyNotImplemented() throws Exception {
     testTypes(
         "/** @interface */function Int() {};" +
