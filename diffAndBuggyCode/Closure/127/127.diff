diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
index 4cd16415..e6d88a8b 100644
--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -167,13 +167,23 @@ class UnreachableCodeElimination implements CompilerPass {
                 outEdges.get(0).getValue() == Branch.UNCOND);
             Node fallThrough = computeFollowing(n);
             Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
+            if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {
               removeNode(n);
             }
           }
       }
     }
 
+    private boolean inFinally(Node parent, Node child) {
+      if (parent == null || parent.isFunction()) {
+        return false;
+      } else if (NodeUtil.isTryFinallyNode(parent, child)) {
+        return true;
+      } else {
+        return inFinally(parent.getParent(), parent);
+      }
+    }
+
     private Node computeFollowing(Node n) {
       Node next = ControlFlowAnalysis.computeFollowNode(n);
       while (next != null && next.isBlock()) {
diff --git a/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java b/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
index 4493c8d0..d6785b0f 100644
--- a/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
+++ b/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
@@ -285,20 +285,7 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
   }
 
   public void testIssue4177428a() {
-    test(
-        "f = function() {\n" +
-        "  var action;\n" +
-        "  a: {\n" +
-        "    var proto = null;\n" +
-        "    try {\n" +
-        "      proto = new Proto\n" +
-        "    } finally {\n" +
-        "      action = proto;\n" +
-        "      break a\n" +  // Remove this...
-        "    }\n" +
-        "  }\n" +
-        "  alert(action)\n" + // but not this.
-        "};",
+    testSame(
         "f = function() {\n" +
         "  var action;\n" +
         "  a: {\n" +
@@ -307,31 +294,15 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
         "      proto = new Proto\n" +
         "    } finally {\n" +
         "      action = proto;\n" +
+        "      break a\n" +  // Keep this...
         "    }\n" +
         "  }\n" +
-        "  alert(action)\n" +  // but not this.
-        "};"
-        );
+        "  alert(action)\n" + // and this.
+        "};");
   }
 
   public void testIssue4177428b() {
-    test(
-        "f = function() {\n" +
-        "  var action;\n" +
-        "  a: {\n" +
-        "    var proto = null;\n" +
-        "    try {\n" +
-        "    try {\n" +
-        "      proto = new Proto\n" +
-        "    } finally {\n" +
-        "      action = proto;\n" +
-        "      break a\n" +  // Remove this...
-        "    }\n" +
-        "    } finally {\n" +
-        "    }\n" +
-        "  }\n" +
-        "  alert(action)\n" + // but not this.
-        "};",
+    testSame(
         "f = function() {\n" +
         "  var action;\n" +
         "  a: {\n" +
@@ -341,34 +312,17 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
         "      proto = new Proto\n" +
         "    } finally {\n" +
         "      action = proto;\n" +
-        "      break a\n" +  // Remove this...
+        "      break a\n" +  // Keep this...
         "    }\n" +
         "    } finally {\n" +
         "    }\n" +
         "  }\n" +
-        "  alert(action)\n" +  // but not this.
-        "};"
-        );
+        "  alert(action)\n" + // and this.
+        "};");
   }
 
   public void testIssue4177428c() {
-    test(
-        "f = function() {\n" +
-        "  var action;\n" +
-        "  a: {\n" +
-        "    var proto = null;\n" +
-        "    try {\n" +
-        "    } finally {\n" +
-        "    try {\n" +
-        "      proto = new Proto\n" +
-        "    } finally {\n" +
-        "      action = proto;\n" +
-        "      break a\n" +  // Remove this...
-        "    }\n" +
-        "    }\n" +
-        "  }\n" +
-        "  alert(action)\n" + // but not this.
-        "};",
+    testSame(
         "f = function() {\n" +
         "  var action;\n" +
         "  a: {\n" +
@@ -379,16 +333,16 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
         "      proto = new Proto\n" +
         "    } finally {\n" +
         "      action = proto;\n" +
+        "      break a\n" +  // Keep this...
         "    }\n" +
         "    }\n" +
         "  }\n" +
-        "  alert(action)\n" +  // but not this.
-        "};"
-        );
+        "  alert(action)\n" + // and this.
+        "};");
   }
 
   public void testIssue4177428_continue() {
-    test(
+    testSame(
         "f = function() {\n" +
         "  var action;\n" +
         "  a: do {\n" +
@@ -397,24 +351,11 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
         "      proto = new Proto\n" +
         "    } finally {\n" +
         "      action = proto;\n" +
-        "      continue a\n" +  // Remove this...
+        "      continue a\n" +  // Keep this...
         "    }\n" +
         "  } while(false)\n" +
-        "  alert(action)\n" + // but not this.
-        "};",
-        "f = function() {\n" +
-        "  var action;\n" +
-        "  a: do {\n" +
-        "    var proto = null;\n" +
-        "    try {\n" +
-        "      proto = new Proto\n" +
-        "    } finally {\n" +
-        "      action = proto;\n" +
-        "    }\n" +
-        "  } while (false)\n" +
-        "  alert(action)\n" +
-        "};"
-        );
+        "  alert(action)\n" + // and this.
+        "};");
   }
 
   public void testIssue4177428_return() {
@@ -427,10 +368,10 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
         "      proto = new Proto\n" +
         "    } finally {\n" +
         "      action = proto;\n" +
-        "      return\n" +  // Remove this...
+        "      return\n" +  // Keep this...
         "    }\n" +
         "  }\n" +
-        "  alert(action)\n" + // and this.
+        "  alert(action)\n" + // and remove this.
         "};",
         "f = function() {\n" +
         "  var action;\n" +
@@ -440,6 +381,7 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
         "      proto = new Proto\n" +
         "    } finally {\n" +
         "      action = proto;\n" +
+        "      return\n" +
         "    }\n" +
         "  }\n" +
         "};"
@@ -470,4 +412,12 @@ public class UnreachableCodeEliminationTest extends CompilerTestCase {
   public void testForInLoop() {
     testSame("for(var x in y) {}");
   }
+
+  public void testDontRemoveBreakInTryFinally() throws Exception {
+    testSame("function f() {b:try{throw 9} finally {break b} return 1;}");
+  }
+
+  public void testDontRemoveBreakInTryFinallySwitch() throws Exception {
+    testSame("function f() {b:try{throw 9} finally {switch(x) {case 1: break b} } return 1;}");
+  }
 }
