diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index b1500532..5c9df618 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -299,8 +299,14 @@ class InlineVariables implements CompilerPass {
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
-          !staleVars.contains(v) && referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
+          !staleVars.contains(v) &&
+          referenceInfo.isWellDefined() &&
+          referenceInfo.isAssignedOnceInLifetime() &&
+          // Inlining the variable based solely on well-defined and assigned
+          // once is *NOT* correct. We relax the correctness requirement if
+          // the variable is declared constant.
+          (isInlineableDeclaredConstant(v, referenceInfo) ||
+           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
index cdacc5f7..f89f10c0 100644
--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -423,7 +423,7 @@ class ReferenceCollectingCallback implements ScopedCallback,
       if (ref == null) {
         return false;
       }
-
+      
       // Make sure this assignment is not in a loop.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
@@ -436,6 +436,29 @@ class ReferenceCollectingCallback implements ScopedCallback,
 
       return true;
     }
+    
+    /**
+     * @return Whether the variable is only assigned a value once for its
+     *     lifetime.
+     */
+    boolean isOnlyAssignmentSameScopeAsDeclaration() {
+      Reference ref = getOneAndOnlyAssignment();
+      Preconditions.checkNotNull(ref);
+      
+      // Make sure the declaration is the same scope as the assignment.
+      // Otherwise, the variable can be assigned multiple times and possibly
+      // with a different variable.
+      for (BasicBlock block = ref.getBasicBlock();
+           block != null; block = block.getParent()) {
+        if (block.isFunction) {
+          if (ref.getSymbol().getScope() != ref.scope) {
+            return false;
+          }
+        }
+      }
+
+      return true;
+    }
 
     /**
      * @return The one and only assignment. Returns if there are 0 or 2+
diff --git a/test/com/google/javascript/jscomp/InlineVariablesTest.java b/test/com/google/javascript/jscomp/InlineVariablesTest.java
index 23f9fee5..d1c0ed71 100644
--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java
@@ -1064,4 +1064,9 @@ public class InlineVariablesTest extends CompilerTestCase {
         "F.prototype.inc = function() { this.a++; return 10; };" +
         "F.prototype.bar = function() { var x = this.inc(); this.a += x; };");
   }
+
+  public void testExternalIssue1053() {
+    testSame(
+        "var u; function f() { u = Random(); var x = u; f(); alert(x===u)}");
+  }
 }
