diff --git a/src/com/google/javascript/jscomp/CheckMissingReturn.java b/src/com/google/javascript/jscomp/CheckMissingReturn.java
index d458857d..49400986 100644
--- a/src/com/google/javascript/jscomp/CheckMissingReturn.java
+++ b/src/com/google/javascript/jscomp/CheckMissingReturn.java
@@ -39,7 +39,7 @@ class CheckMissingReturn implements ScopedCallback {
   static final DiagnosticType MISSING_RETURN_STATEMENT =
       DiagnosticType.warning(
           "JSC_MISSING_RETURN_STATEMENT",
-          "missing return statement");
+          "Missing return statement. Function expected to return {0}.");
 
   private final AbstractCompiler compiler;
   private final CheckLevel level;
@@ -90,7 +90,8 @@ class CheckMissingReturn implements ScopedCallback {
 
   @Override
   public void enterScope(NodeTraversal t) {
-    if (!explicitReturnExpected(t.getScopeRoot())) {
+    JSType returnType = explicitReturnExpected(t.getScopeRoot());
+    if (returnType == null) {
       return;
     }
 
@@ -107,7 +108,8 @@ class CheckMissingReturn implements ScopedCallback {
 
     if (!test.allPathsSatisfyPredicate()) {
       compiler.report(
-          t.makeError(t.getScopeRoot(), level, MISSING_RETURN_STATEMENT));
+          t.makeError(t.getScopeRoot(), level,
+              MISSING_RETURN_STATEMENT, returnType.toString()));
     }
   }
 
@@ -143,25 +145,30 @@ class CheckMissingReturn implements ScopedCallback {
   /**
    * Determines if the given scope should explicitly return. All functions
    * with non-void or non-unknown return types must have explicit returns.
+   * @return If a return type is expected, returns it. Otherwise returns null.
    */
-  private boolean explicitReturnExpected(Node scope) {
+  private JSType explicitReturnExpected(Node scope) {
     JSType scopeType = scope.getJSType();
 
     if (!(scopeType instanceof FunctionType)) {
-      return false;
+      return null;
     }
 
     if (isEmptyFunction(scope)) {
-      return false;
+      return null;
     }
 
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
     if (returnType == null) {
-      return false;
+      return null;
+    }
+
+    if (!isVoidOrUnknown(returnType)) {
+      return returnType;
     }
 
-    return !isVoidOrUnknown(returnType);
+    return null;
   }
 
 
diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 748ac33e..cce82f48 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -275,8 +275,8 @@ class CodeGenerator {
 
       case Token.FUNCTION:
         if (n.getClass() != Node.class) {
-          throw new Error("Unexpected Node subclass."); 
-        }        
+          throw new Error("Unexpected Node subclass.");
+        }
         Preconditions.checkState(childCount == 3);
         boolean funcNeedsParens = (context == Context.START_OF_EXPR);
         if (funcNeedsParens) {
@@ -298,7 +298,7 @@ class CodeGenerator {
       case Token.SCRIPT:
       case Token.BLOCK: {
         if (n.getClass() != Node.class) {
-          throw new Error("Unexpected Node subclass."); 
+          throw new Error("Unexpected Node subclass.");
         }
         boolean stripBlock = n.isSyntheticBlock() ||
             ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));
@@ -658,7 +658,7 @@ class CodeGenerator {
     // Strip unneeded blocks, that is blocks with <2 children unless
     // the CodePrinter specifically wants to keep them.
     if (n.getType() == Token.BLOCK ) {
-      int count = getNonEmptyChildCount(n);
+      int count = getNonEmptyChildCount(n, 2);
       if (count == 0) {
         if (cc.shouldPreserveExtraBlocks()) {
           cc.beginBlock();
@@ -675,9 +675,7 @@ class CodeGenerator {
         //   IE6/7 needs a block around DOs.
         Node firstAndOnlyChild = getFirstNonEmptyChild(n);
         boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
-        if (alwaysWrapInBlock ||
-            firstAndOnlyChild.getType() == Token.FUNCTION ||
-            firstAndOnlyChild.getType() == Token.DO) {
+        if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
           cc.beginBlock();
           add(firstAndOnlyChild, Context.STATEMENT);
           cc.maybeLineBreak();
@@ -703,6 +701,32 @@ class CodeGenerator {
     }
   }
 
+  /**
+   * @return Whether the Node is a DO or FUNCTION (with or without
+   * labels).
+   */
+  private boolean isOneExactlyFunctionOrDo(Node n) {
+    if (n.getType() == Token.LABEL) {
+      Node labeledStatement = n.getLastChild();
+      if (labeledStatement.getType() != Token.BLOCK) {
+        return isOneExactlyFunctionOrDo(labeledStatement);
+      } else {
+        // For labels with block children, we need to ensure that a
+        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
+        // are skipped. 
+        if (getNonEmptyChildCount(n, 2) == 1) { 
+          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
+        } else {
+          // Either a empty statement or an block with more than one child,
+          // way it isn't a FUNCTION or DO.
+          return false;
+        }
+      }
+    } else {
+      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    }
+  }
+
   /**
    * Adds a node at the left-hand side of an expression. Unlike
    * {@link #addExpr(Node,int)}, this preserves information about the context.
@@ -930,11 +954,15 @@ class CodeGenerator {
     }
     return sb.toString();
   }
-
-  /** Gets the number of children of this node that are non empty. */
-  private static int getNonEmptyChildCount(Node n) {
+  /**
+   * @param maxCount The maximum number of children to look for.
+   * @return The number of children of this node that are non empty up to
+   * maxCount.
+   */
+  private static int getNonEmptyChildCount(Node n, int maxCount) {
     int i = 0;
-    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+    Node c = n.getFirstChild();
+    for (; c != null && i < maxCount; c = c.getNext()) {
       if (c.getType() != Token.EMPTY) {
         i++;
       }
diff --git a/test/com/google/javascript/jscomp/CodePrinterTest.java b/test/com/google/javascript/jscomp/CodePrinterTest.java
index 1d8473cd..d835ee2b 100644
--- a/test/com/google/javascript/jscomp/CodePrinterTest.java
+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java
@@ -194,7 +194,7 @@ public class CodePrinterTest extends TestCase {
 
     // Name functions expression.
     assertPrint("(function f(){})", "(function f(){})");
-    
+
     // Function declaration.
     assertPrint("function f(){}", "function f(){}");
 
@@ -599,7 +599,7 @@ public class CodePrinterTest extends TestCase {
         "})();\n" +
         "if(1) {\n" +
         "  alert()\n" +
-        "}\n");    
+        "}\n");
   }
 
   public void testTypeAnnotations() {
@@ -745,10 +745,10 @@ public class CodePrinterTest extends TestCase {
         "/**\n" +
         " * @param {*} x\n" +
         " * @return {undefined}\n" +
-        " */\n" + 
+        " */\n" +
         "var a = function(x) {\n}");
   }
-  
+
   public void testOptionalTypesAnnotation() {
     assertTypeAnnotations(
         "/**\n" +
@@ -761,7 +761,7 @@ public class CodePrinterTest extends TestCase {
         " */\n" +
         "var a = function(x) {\n}");
   }
-  
+
   public void testVariableArgumentsTypesAnnotation() {
     assertTypeAnnotations(
         "/**\n" +
@@ -774,7 +774,7 @@ public class CodePrinterTest extends TestCase {
         " */\n" +
         "var a = function(x) {\n}");
   }
-  
+
   public void testTempConstructor() {
     assertTypeAnnotations(
         "var x = function() {\n/**\n * @constructor\n */\nfunction t1() {}\n" +
@@ -907,7 +907,7 @@ public class CodePrinterTest extends TestCase {
     testReparse("'foo\"bar' + \"foo'c\" + 'stuff\\n and \\\\more'");
     testReparse("x.__proto__;");
   }
-  
+
   private void testReparse(String code) {
     Node parse1 = parse(code);
     Node parse2 = parse(new CodePrinter.Builder(parse1).build());
@@ -927,10 +927,22 @@ public class CodePrinterTest extends TestCase {
 
     assertPrint("if(x)do{foo()}while(y);else bar()",
         "if(x){do foo();while(y)}else bar()");
+
+    assertPrint("if(x){do{foo()}while(y)}",
+        "if(x){do foo();while(y)}");
+
+    assertPrint("if(x)do{foo()}while(y);",
+        "if(x){do foo();while(y)}");
+
+    assertPrint("if(x)A:do{foo()}while(y);",
+        "if(x){A:do foo();while(y)}");
+    
+    assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
+        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");
   }
 
   public void testFunctionSafariCompatiblity() {
-    // Do loops within IFs cause syntax errors in IE6 and IE7.
+    // Functions within IFs cause syntax errors on Safari.
     assertPrint("function(){if(e1){function goo(){return true}}else foo()}",
         "function(){if(e1){function goo(){return true}}else foo()}");
 
@@ -942,6 +954,9 @@ public class CodePrinterTest extends TestCase {
 
     assertPrint("if(e1)function goo(){return true}",
         "if(e1){function goo(){return true}}");
+
+    assertPrint("if(e1)A:function goo(){return true}",
+        "if(e1){A:function goo(){return true}}");
   }
 
   public void testExponents() {
