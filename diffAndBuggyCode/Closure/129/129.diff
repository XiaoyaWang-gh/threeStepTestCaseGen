diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java
index eda524ec..42982afb 100644
--- a/src/com/google/javascript/jscomp/PrepareAst.java
+++ b/src/com/google/javascript/jscomp/PrepareAst.java
@@ -161,6 +161,12 @@ class PrepareAst implements CompilerPass {
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
+
+      // ignore cast nodes.
+      while (first.isCast()) {
+        first = first.getFirstChild();
+      }
+
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index 0c7ef23a..c7067e9d 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -2415,6 +2415,23 @@ public class IntegrationTest extends IntegrationTestCase {
     test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);
   }
 
+  public void testIssue937() {
+    CompilerOptions options = createCompilerOptions();
+    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
+    level.setOptionsForCompilationLevel(options);
+    WarningLevel warnings = WarningLevel.DEFAULT;
+    warnings.setOptionsForWarningLevel(options);
+
+    String code = "" +
+        "console.log(" +
+            "/** @type {function():!string} */ ((new x())['abc'])() );";
+    String result = "" +
+        "console.log((new x()).abc());";
+    test(options, code, result);
+  }
+
+
+
   public void testIssue787() {
     CompilerOptions options = createCompilerOptions();
     CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
